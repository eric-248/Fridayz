{"ast":null,"code":"/*!\n * Module dependencies.\n */\n\n'use strict';\n\nconst MongooseError = require('../error/mongooseError');\nconst SchemaType = require('../schemaType');\nconst SchemaSubdocument = require('./subdocument');\nconst getConstructor = require('../helpers/discriminator/getConstructor');\n\n/**\n * DocumentArrayElement SchemaType constructor.\n *\n * @param {String} path\n * @param {Object} options\n * @inherits SchemaType\n * @api public\n */\n\nfunction SchemaDocumentArrayElement(path, options) {\n  this.$parentSchemaType = options && options.$parentSchemaType;\n  if (!this.$parentSchemaType) {\n    throw new MongooseError('Cannot create DocumentArrayElement schematype without a parent');\n  }\n  delete options.$parentSchemaType;\n  SchemaType.call(this, path, options, 'DocumentArrayElement');\n  this.$isMongooseDocumentArrayElement = true;\n}\n\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api public\n */\nSchemaDocumentArrayElement.schemaName = 'DocumentArrayElement';\nSchemaDocumentArrayElement.defaultOptions = {};\n\n/*!\n * Inherits from SchemaType.\n */\nSchemaDocumentArrayElement.prototype = Object.create(SchemaType.prototype);\nSchemaDocumentArrayElement.prototype.constructor = SchemaDocumentArrayElement;\n\n/**\n * Casts `val` for DocumentArrayElement.\n *\n * @param {Object} value to cast\n * @api private\n */\n\nSchemaDocumentArrayElement.prototype.cast = function (...args) {\n  return this.$parentSchemaType.cast(...args)[0];\n};\n\n/**\n * Casts contents for queries.\n *\n * @param {String} $cond\n * @param {any} [val]\n * @api private\n */\n\nSchemaDocumentArrayElement.prototype.doValidate = function (value, fn, scope, options) {\n  const Constructor = getConstructor(this.caster, value);\n  if (value && !(value instanceof Constructor)) {\n    value = new Constructor(value, scope, null, null, options && options.index != null ? options.index : null);\n  }\n  return SchemaSubdocument.prototype.doValidate.call(this, value, fn, scope, options);\n};\n\n/**\n * Clone the current SchemaType\n *\n * @return {DocumentArrayElement} The cloned instance\n * @api private\n */\n\nSchemaDocumentArrayElement.prototype.clone = function () {\n  this.options.$parentSchemaType = this.$parentSchemaType;\n  const ret = SchemaType.prototype.clone.apply(this, arguments);\n  delete this.options.$parentSchemaType;\n  ret.caster = this.caster;\n  ret.schema = this.schema;\n  return ret;\n};\n\n/*!\n * Module exports.\n */\n\nmodule.exports = SchemaDocumentArrayElement;","map":{"version":3,"names":["MongooseError","require","SchemaType","SchemaSubdocument","getConstructor","SchemaDocumentArrayElement","path","options","$parentSchemaType","call","$isMongooseDocumentArrayElement","schemaName","defaultOptions","prototype","Object","create","constructor","cast","args","doValidate","value","fn","scope","Constructor","caster","index","clone","ret","apply","arguments","schema","module","exports"],"sources":["C:/Users/lrmir/OneDrive/Desktop/cs35L/newFridayz/Fridayz/frontend/node_modules/mongoose/lib/schema/documentArrayElement.js"],"sourcesContent":["/*!\n * Module dependencies.\n */\n\n'use strict';\n\nconst MongooseError = require('../error/mongooseError');\nconst SchemaType = require('../schemaType');\nconst SchemaSubdocument = require('./subdocument');\nconst getConstructor = require('../helpers/discriminator/getConstructor');\n\n/**\n * DocumentArrayElement SchemaType constructor.\n *\n * @param {String} path\n * @param {Object} options\n * @inherits SchemaType\n * @api public\n */\n\nfunction SchemaDocumentArrayElement(path, options) {\n  this.$parentSchemaType = options && options.$parentSchemaType;\n  if (!this.$parentSchemaType) {\n    throw new MongooseError('Cannot create DocumentArrayElement schematype without a parent');\n  }\n  delete options.$parentSchemaType;\n\n  SchemaType.call(this, path, options, 'DocumentArrayElement');\n\n  this.$isMongooseDocumentArrayElement = true;\n}\n\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api public\n */\nSchemaDocumentArrayElement.schemaName = 'DocumentArrayElement';\n\nSchemaDocumentArrayElement.defaultOptions = {};\n\n/*!\n * Inherits from SchemaType.\n */\nSchemaDocumentArrayElement.prototype = Object.create(SchemaType.prototype);\nSchemaDocumentArrayElement.prototype.constructor = SchemaDocumentArrayElement;\n\n/**\n * Casts `val` for DocumentArrayElement.\n *\n * @param {Object} value to cast\n * @api private\n */\n\nSchemaDocumentArrayElement.prototype.cast = function(...args) {\n  return this.$parentSchemaType.cast(...args)[0];\n};\n\n/**\n * Casts contents for queries.\n *\n * @param {String} $cond\n * @param {any} [val]\n * @api private\n */\n\nSchemaDocumentArrayElement.prototype.doValidate = function(value, fn, scope, options) {\n  const Constructor = getConstructor(this.caster, value);\n\n  if (value && !(value instanceof Constructor)) {\n    value = new Constructor(value, scope, null, null, options && options.index != null ? options.index : null);\n  }\n\n  return SchemaSubdocument.prototype.doValidate.call(this, value, fn, scope, options);\n};\n\n/**\n * Clone the current SchemaType\n *\n * @return {DocumentArrayElement} The cloned instance\n * @api private\n */\n\nSchemaDocumentArrayElement.prototype.clone = function() {\n  this.options.$parentSchemaType = this.$parentSchemaType;\n  const ret = SchemaType.prototype.clone.apply(this, arguments);\n  delete this.options.$parentSchemaType;\n\n  ret.caster = this.caster;\n  ret.schema = this.schema;\n\n  return ret;\n};\n\n/*!\n * Module exports.\n */\n\nmodule.exports = SchemaDocumentArrayElement;\n"],"mappings":"AAAA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAMA,aAAa,GAAGC,OAAO,CAAC,wBAAwB,CAAC;AACvD,MAAMC,UAAU,GAAGD,OAAO,CAAC,eAAe,CAAC;AAC3C,MAAME,iBAAiB,GAAGF,OAAO,CAAC,eAAe,CAAC;AAClD,MAAMG,cAAc,GAAGH,OAAO,CAAC,yCAAyC,CAAC;;AAEzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASI,0BAA0BA,CAACC,IAAI,EAAEC,OAAO,EAAE;EACjD,IAAI,CAACC,iBAAiB,GAAGD,OAAO,IAAIA,OAAO,CAACC,iBAAiB;EAC7D,IAAI,CAAC,IAAI,CAACA,iBAAiB,EAAE;IAC3B,MAAM,IAAIR,aAAa,CAAC,gEAAgE,CAAC;EAC3F;EACA,OAAOO,OAAO,CAACC,iBAAiB;EAEhCN,UAAU,CAACO,IAAI,CAAC,IAAI,EAAEH,IAAI,EAAEC,OAAO,EAAE,sBAAsB,CAAC;EAE5D,IAAI,CAACG,+BAA+B,GAAG,IAAI;AAC7C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACAL,0BAA0B,CAACM,UAAU,GAAG,sBAAsB;AAE9DN,0BAA0B,CAACO,cAAc,GAAG,CAAC,CAAC;;AAE9C;AACA;AACA;AACAP,0BAA0B,CAACQ,SAAS,GAAGC,MAAM,CAACC,MAAM,CAACb,UAAU,CAACW,SAAS,CAAC;AAC1ER,0BAA0B,CAACQ,SAAS,CAACG,WAAW,GAAGX,0BAA0B;;AAE7E;AACA;AACA;AACA;AACA;AACA;;AAEAA,0BAA0B,CAACQ,SAAS,CAACI,IAAI,GAAG,UAAS,GAAGC,IAAI,EAAE;EAC5D,OAAO,IAAI,CAACV,iBAAiB,CAACS,IAAI,CAAC,GAAGC,IAAI,CAAC,CAAC,CAAC,CAAC;AAChD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAb,0BAA0B,CAACQ,SAAS,CAACM,UAAU,GAAG,UAASC,KAAK,EAAEC,EAAE,EAAEC,KAAK,EAAEf,OAAO,EAAE;EACpF,MAAMgB,WAAW,GAAGnB,cAAc,CAAC,IAAI,CAACoB,MAAM,EAAEJ,KAAK,CAAC;EAEtD,IAAIA,KAAK,IAAI,EAAEA,KAAK,YAAYG,WAAW,CAAC,EAAE;IAC5CH,KAAK,GAAG,IAAIG,WAAW,CAACH,KAAK,EAAEE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAEf,OAAO,IAAIA,OAAO,CAACkB,KAAK,IAAI,IAAI,GAAGlB,OAAO,CAACkB,KAAK,GAAG,IAAI,CAAC;EAC5G;EAEA,OAAOtB,iBAAiB,CAACU,SAAS,CAACM,UAAU,CAACV,IAAI,CAAC,IAAI,EAAEW,KAAK,EAAEC,EAAE,EAAEC,KAAK,EAAEf,OAAO,CAAC;AACrF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;;AAEAF,0BAA0B,CAACQ,SAAS,CAACa,KAAK,GAAG,YAAW;EACtD,IAAI,CAACnB,OAAO,CAACC,iBAAiB,GAAG,IAAI,CAACA,iBAAiB;EACvD,MAAMmB,GAAG,GAAGzB,UAAU,CAACW,SAAS,CAACa,KAAK,CAACE,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC;EAC7D,OAAO,IAAI,CAACtB,OAAO,CAACC,iBAAiB;EAErCmB,GAAG,CAACH,MAAM,GAAG,IAAI,CAACA,MAAM;EACxBG,GAAG,CAACG,MAAM,GAAG,IAAI,CAACA,MAAM;EAExB,OAAOH,GAAG;AACZ,CAAC;;AAED;AACA;AACA;;AAEAI,MAAM,CAACC,OAAO,GAAG3B,0BAA0B","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}