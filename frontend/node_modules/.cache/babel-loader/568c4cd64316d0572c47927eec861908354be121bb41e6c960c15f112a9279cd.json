{"ast":null,"code":"'use strict';\n\nconst assert = require('assert');\nmodule.exports = function castDate(value) {\n  // Support empty string because of empty form values. Originally introduced\n  // in https://github.com/Automattic/mongoose/commit/efc72a1898fc3c33a319d915b8c5463a22938dfe\n  if (value == null || value === '') {\n    return null;\n  }\n  if (value instanceof Date) {\n    assert.ok(!isNaN(value.valueOf()));\n    return value;\n  }\n  let date;\n  assert.ok(typeof value !== 'boolean');\n  if (value instanceof Number || typeof value === 'number') {\n    date = new Date(value);\n  } else if (typeof value === 'string' && !isNaN(Number(value)) && (Number(value) >= 275761 || Number(value) < -271820)) {\n    // string representation of milliseconds take this path\n    date = new Date(Number(value));\n  } else if (typeof value.valueOf === 'function') {\n    // support for moment.js. This is also the path strings will take because\n    // strings have a `valueOf()`\n    date = new Date(value.valueOf());\n  } else {\n    // fallback\n    date = new Date(value);\n  }\n  if (!isNaN(date.valueOf())) {\n    return date;\n  }\n  assert.ok(false);\n};","map":{"version":3,"names":["assert","require","module","exports","castDate","value","Date","ok","isNaN","valueOf","date","Number"],"sources":["C:/Users/lrmir/OneDrive/Desktop/cs35L/newFridayz/Fridayz/frontend/node_modules/mongoose/lib/cast/date.js"],"sourcesContent":["'use strict';\n\nconst assert = require('assert');\n\nmodule.exports = function castDate(value) {\n  // Support empty string because of empty form values. Originally introduced\n  // in https://github.com/Automattic/mongoose/commit/efc72a1898fc3c33a319d915b8c5463a22938dfe\n  if (value == null || value === '') {\n    return null;\n  }\n\n  if (value instanceof Date) {\n    assert.ok(!isNaN(value.valueOf()));\n\n    return value;\n  }\n\n  let date;\n\n  assert.ok(typeof value !== 'boolean');\n\n  if (value instanceof Number || typeof value === 'number') {\n    date = new Date(value);\n  } else if (typeof value === 'string' && !isNaN(Number(value)) && (Number(value) >= 275761 || Number(value) < -271820)) {\n    // string representation of milliseconds take this path\n    date = new Date(Number(value));\n  } else if (typeof value.valueOf === 'function') {\n    // support for moment.js. This is also the path strings will take because\n    // strings have a `valueOf()`\n    date = new Date(value.valueOf());\n  } else {\n    // fallback\n    date = new Date(value);\n  }\n\n  if (!isNaN(date.valueOf())) {\n    return date;\n  }\n\n  assert.ok(false);\n};\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAEhCC,MAAM,CAACC,OAAO,GAAG,SAASC,QAAQA,CAACC,KAAK,EAAE;EACxC;EACA;EACA,IAAIA,KAAK,IAAI,IAAI,IAAIA,KAAK,KAAK,EAAE,EAAE;IACjC,OAAO,IAAI;EACb;EAEA,IAAIA,KAAK,YAAYC,IAAI,EAAE;IACzBN,MAAM,CAACO,EAAE,CAAC,CAACC,KAAK,CAACH,KAAK,CAACI,OAAO,CAAC,CAAC,CAAC,CAAC;IAElC,OAAOJ,KAAK;EACd;EAEA,IAAIK,IAAI;EAERV,MAAM,CAACO,EAAE,CAAC,OAAOF,KAAK,KAAK,SAAS,CAAC;EAErC,IAAIA,KAAK,YAAYM,MAAM,IAAI,OAAON,KAAK,KAAK,QAAQ,EAAE;IACxDK,IAAI,GAAG,IAAIJ,IAAI,CAACD,KAAK,CAAC;EACxB,CAAC,MAAM,IAAI,OAAOA,KAAK,KAAK,QAAQ,IAAI,CAACG,KAAK,CAACG,MAAM,CAACN,KAAK,CAAC,CAAC,KAAKM,MAAM,CAACN,KAAK,CAAC,IAAI,MAAM,IAAIM,MAAM,CAACN,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE;IACrH;IACAK,IAAI,GAAG,IAAIJ,IAAI,CAACK,MAAM,CAACN,KAAK,CAAC,CAAC;EAChC,CAAC,MAAM,IAAI,OAAOA,KAAK,CAACI,OAAO,KAAK,UAAU,EAAE;IAC9C;IACA;IACAC,IAAI,GAAG,IAAIJ,IAAI,CAACD,KAAK,CAACI,OAAO,CAAC,CAAC,CAAC;EAClC,CAAC,MAAM;IACL;IACAC,IAAI,GAAG,IAAIJ,IAAI,CAACD,KAAK,CAAC;EACxB;EAEA,IAAI,CAACG,KAAK,CAACE,IAAI,CAACD,OAAO,CAAC,CAAC,CAAC,EAAE;IAC1B,OAAOC,IAAI;EACb;EAEAV,MAAM,CAACO,EAAE,CAAC,KAAK,CAAC;AAClB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}