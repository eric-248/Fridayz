{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Db = void 0;\nconst admin_1 = require(\"./admin\");\nconst bson_1 = require(\"./bson\");\nconst change_stream_1 = require(\"./change_stream\");\nconst collection_1 = require(\"./collection\");\nconst CONSTANTS = require(\"./constants\");\nconst aggregation_cursor_1 = require(\"./cursor/aggregation_cursor\");\nconst list_collections_cursor_1 = require(\"./cursor/list_collections_cursor\");\nconst run_command_cursor_1 = require(\"./cursor/run_command_cursor\");\nconst error_1 = require(\"./error\");\nconst collections_1 = require(\"./operations/collections\");\nconst create_collection_1 = require(\"./operations/create_collection\");\nconst drop_1 = require(\"./operations/drop\");\nconst execute_operation_1 = require(\"./operations/execute_operation\");\nconst indexes_1 = require(\"./operations/indexes\");\nconst profiling_level_1 = require(\"./operations/profiling_level\");\nconst remove_user_1 = require(\"./operations/remove_user\");\nconst rename_1 = require(\"./operations/rename\");\nconst run_command_1 = require(\"./operations/run_command\");\nconst set_profiling_level_1 = require(\"./operations/set_profiling_level\");\nconst stats_1 = require(\"./operations/stats\");\nconst read_concern_1 = require(\"./read_concern\");\nconst read_preference_1 = require(\"./read_preference\");\nconst utils_1 = require(\"./utils\");\nconst write_concern_1 = require(\"./write_concern\");\n// Allowed parameters\nconst DB_OPTIONS_ALLOW_LIST = ['writeConcern', 'readPreference', 'readPreferenceTags', 'native_parser', 'forceServerObjectId', 'pkFactory', 'serializeFunctions', 'raw', 'authSource', 'ignoreUndefined', 'readConcern', 'retryMiliSeconds', 'numberOfRetries', 'useBigInt64', 'promoteBuffers', 'promoteLongs', 'bsonRegExp', 'enableUtf8Validation', 'promoteValues', 'compression', 'retryWrites'];\n/**\n * The **Db** class is a class that represents a MongoDB Database.\n * @public\n *\n * @example\n * ```ts\n * import { MongoClient } from 'mongodb';\n *\n * interface Pet {\n *   name: string;\n *   kind: 'dog' | 'cat' | 'fish';\n * }\n *\n * const client = new MongoClient('mongodb://localhost:27017');\n * const db = client.db();\n *\n * // Create a collection that validates our union\n * await db.createCollection<Pet>('pets', {\n *   validator: { $expr: { $in: ['$kind', ['dog', 'cat', 'fish']] } }\n * })\n * ```\n */\nclass Db {\n  /**\n   * Creates a new Db instance.\n   *\n   * Db name cannot contain a dot, the server may apply more restrictions when an operation is run.\n   *\n   * @param client - The MongoClient for the database.\n   * @param databaseName - The name of the database this instance represents.\n   * @param options - Optional settings for Db construction.\n   */\n  constructor(client, databaseName, options) {\n    options = options ?? {};\n    // Filter the options\n    options = (0, utils_1.filterOptions)(options, DB_OPTIONS_ALLOW_LIST);\n    // Ensure there are no dots in database name\n    if (typeof databaseName === 'string' && databaseName.includes('.')) {\n      throw new error_1.MongoInvalidArgumentError(`Database names cannot contain the character '.'`);\n    }\n    // Internal state of the db object\n    this.s = {\n      // Options\n      options,\n      // Unpack read preference\n      readPreference: read_preference_1.ReadPreference.fromOptions(options),\n      // Merge bson options\n      bsonOptions: (0, bson_1.resolveBSONOptions)(options, client),\n      // Set up the primary key factory or fallback to ObjectId\n      pkFactory: options?.pkFactory ?? utils_1.DEFAULT_PK_FACTORY,\n      // ReadConcern\n      readConcern: read_concern_1.ReadConcern.fromOptions(options),\n      writeConcern: write_concern_1.WriteConcern.fromOptions(options),\n      // Namespace\n      namespace: new utils_1.MongoDBNamespace(databaseName)\n    };\n    this.client = client;\n  }\n  get databaseName() {\n    return this.s.namespace.db;\n  }\n  // Options\n  get options() {\n    return this.s.options;\n  }\n  /**\n   * Check if a secondary can be used (because the read preference is *not* set to primary)\n   */\n  get secondaryOk() {\n    return this.s.readPreference?.preference !== 'primary' || false;\n  }\n  get readConcern() {\n    return this.s.readConcern;\n  }\n  /**\n   * The current readPreference of the Db. If not explicitly defined for\n   * this Db, will be inherited from the parent MongoClient\n   */\n  get readPreference() {\n    if (this.s.readPreference == null) {\n      return this.client.readPreference;\n    }\n    return this.s.readPreference;\n  }\n  get bsonOptions() {\n    return this.s.bsonOptions;\n  }\n  // get the write Concern\n  get writeConcern() {\n    return this.s.writeConcern;\n  }\n  get namespace() {\n    return this.s.namespace.toString();\n  }\n  /**\n   * Create a new collection on a server with the specified options. Use this to create capped collections.\n   * More information about command options available at https://www.mongodb.com/docs/manual/reference/command/create/\n   *\n   * Collection namespace validation is performed server-side.\n   *\n   * @param name - The name of the collection to create\n   * @param options - Optional settings for the command\n   */\n  async createCollection(name, options) {\n    return (0, execute_operation_1.executeOperation)(this.client, new create_collection_1.CreateCollectionOperation(this, name, (0, utils_1.resolveOptions)(this, options)));\n  }\n  /**\n   * Execute a command\n   *\n   * @remarks\n   * This command does not inherit options from the MongoClient.\n   *\n   * The driver will ensure the following fields are attached to the command sent to the server:\n   * - `lsid` - sourced from an implicit session or options.session\n   * - `$readPreference` - defaults to primary or can be configured by options.readPreference\n   * - `$db` - sourced from the name of this database\n   *\n   * If the client has a serverApi setting:\n   * - `apiVersion`\n   * - `apiStrict`\n   * - `apiDeprecationErrors`\n   *\n   * When in a transaction:\n   * - `readConcern` - sourced from readConcern set on the TransactionOptions\n   * - `writeConcern` - sourced from writeConcern set on the TransactionOptions\n   *\n   * Attaching any of the above fields to the command will have no effect as the driver will overwrite the value.\n   *\n   * @param command - The command to run\n   * @param options - Optional settings for the command\n   */\n  async command(command, options) {\n    // Intentionally, we do not inherit options from parent for this operation.\n    return (0, execute_operation_1.executeOperation)(this.client, new run_command_1.RunCommandOperation(this, command, {\n      ...(0, bson_1.resolveBSONOptions)(options),\n      session: options?.session,\n      readPreference: options?.readPreference\n    }));\n  }\n  /**\n   * Execute an aggregation framework pipeline against the database, needs MongoDB \\>= 3.6\n   *\n   * @param pipeline - An array of aggregation stages to be executed\n   * @param options - Optional settings for the command\n   */\n  aggregate(pipeline = [], options) {\n    return new aggregation_cursor_1.AggregationCursor(this.client, this.s.namespace, pipeline, (0, utils_1.resolveOptions)(this, options));\n  }\n  /** Return the Admin db instance */\n  admin() {\n    return new admin_1.Admin(this);\n  }\n  /**\n   * Returns a reference to a MongoDB Collection. If it does not exist it will be created implicitly.\n   *\n   * Collection namespace validation is performed server-side.\n   *\n   * @param name - the collection name we wish to access.\n   * @returns return the new Collection instance\n   */\n  collection(name, options = {}) {\n    if (typeof options === 'function') {\n      throw new error_1.MongoInvalidArgumentError('The callback form of this helper has been removed.');\n    }\n    return new collection_1.Collection(this, name, (0, utils_1.resolveOptions)(this, options));\n  }\n  /**\n   * Get all the db statistics.\n   *\n   * @param options - Optional settings for the command\n   */\n  async stats(options) {\n    return (0, execute_operation_1.executeOperation)(this.client, new stats_1.DbStatsOperation(this, (0, utils_1.resolveOptions)(this, options)));\n  }\n  listCollections(filter = {}, options = {}) {\n    return new list_collections_cursor_1.ListCollectionsCursor(this, filter, (0, utils_1.resolveOptions)(this, options));\n  }\n  /**\n   * Rename a collection.\n   *\n   * @remarks\n   * This operation does not inherit options from the MongoClient.\n   *\n   * @param fromCollection - Name of current collection to rename\n   * @param toCollection - New name of of the collection\n   * @param options - Optional settings for the command\n   */\n  async renameCollection(fromCollection, toCollection, options) {\n    // Intentionally, we do not inherit options from parent for this operation.\n    return (0, execute_operation_1.executeOperation)(this.client, new rename_1.RenameOperation(this.collection(fromCollection), toCollection, {\n      ...options,\n      new_collection: true,\n      readPreference: read_preference_1.ReadPreference.primary\n    }));\n  }\n  /**\n   * Drop a collection from the database, removing it permanently. New accesses will create a new collection.\n   *\n   * @param name - Name of collection to drop\n   * @param options - Optional settings for the command\n   */\n  async dropCollection(name, options) {\n    return (0, execute_operation_1.executeOperation)(this.client, new drop_1.DropCollectionOperation(this, name, (0, utils_1.resolveOptions)(this, options)));\n  }\n  /**\n   * Drop a database, removing it permanently from the server.\n   *\n   * @param options - Optional settings for the command\n   */\n  async dropDatabase(options) {\n    return (0, execute_operation_1.executeOperation)(this.client, new drop_1.DropDatabaseOperation(this, (0, utils_1.resolveOptions)(this, options)));\n  }\n  /**\n   * Fetch all collections for the current db.\n   *\n   * @param options - Optional settings for the command\n   */\n  async collections(options) {\n    return (0, execute_operation_1.executeOperation)(this.client, new collections_1.CollectionsOperation(this, (0, utils_1.resolveOptions)(this, options)));\n  }\n  /**\n   * Creates an index on the db and collection.\n   *\n   * @param name - Name of the collection to create the index on.\n   * @param indexSpec - Specify the field to index, or an index specification\n   * @param options - Optional settings for the command\n   */\n  async createIndex(name, indexSpec, options) {\n    return (0, execute_operation_1.executeOperation)(this.client, new indexes_1.CreateIndexOperation(this, name, indexSpec, (0, utils_1.resolveOptions)(this, options)));\n  }\n  /**\n   * Remove a user from a database\n   *\n   * @param username - The username to remove\n   * @param options - Optional settings for the command\n   */\n  async removeUser(username, options) {\n    return (0, execute_operation_1.executeOperation)(this.client, new remove_user_1.RemoveUserOperation(this, username, (0, utils_1.resolveOptions)(this, options)));\n  }\n  /**\n   * Set the current profiling level of MongoDB\n   *\n   * @param level - The new profiling level (off, slow_only, all).\n   * @param options - Optional settings for the command\n   */\n  async setProfilingLevel(level, options) {\n    return (0, execute_operation_1.executeOperation)(this.client, new set_profiling_level_1.SetProfilingLevelOperation(this, level, (0, utils_1.resolveOptions)(this, options)));\n  }\n  /**\n   * Retrieve the current profiling Level for MongoDB\n   *\n   * @param options - Optional settings for the command\n   */\n  async profilingLevel(options) {\n    return (0, execute_operation_1.executeOperation)(this.client, new profiling_level_1.ProfilingLevelOperation(this, (0, utils_1.resolveOptions)(this, options)));\n  }\n  /**\n   * Retrieves this collections index info.\n   *\n   * @param name - The name of the collection.\n   * @param options - Optional settings for the command\n   */\n  async indexInformation(name, options) {\n    return (0, execute_operation_1.executeOperation)(this.client, new indexes_1.IndexInformationOperation(this, name, (0, utils_1.resolveOptions)(this, options)));\n  }\n  /**\n   * Create a new Change Stream, watching for new changes (insertions, updates,\n   * replacements, deletions, and invalidations) in this database. Will ignore all\n   * changes to system collections.\n   *\n   * @remarks\n   * watch() accepts two generic arguments for distinct use cases:\n   * - The first is to provide the schema that may be defined for all the collections within this database\n   * - The second is to override the shape of the change stream document entirely, if it is not provided the type will default to ChangeStreamDocument of the first argument\n   *\n   * @param pipeline - An array of {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents. This allows for filtering (using $match) and manipulating the change stream documents.\n   * @param options - Optional settings for the command\n   * @typeParam TSchema - Type of the data being detected by the change stream\n   * @typeParam TChange - Type of the whole change stream document emitted\n   */\n  watch(pipeline = [], options = {}) {\n    // Allow optionally not specifying a pipeline\n    if (!Array.isArray(pipeline)) {\n      options = pipeline;\n      pipeline = [];\n    }\n    return new change_stream_1.ChangeStream(this, pipeline, (0, utils_1.resolveOptions)(this, options));\n  }\n  /**\n   * A low level cursor API providing basic driver functionality:\n   * - ClientSession management\n   * - ReadPreference for server selection\n   * - Running getMores automatically when a local batch is exhausted\n   *\n   * @param command - The command that will start a cursor on the server.\n   * @param options - Configurations for running the command, bson options will apply to getMores\n   */\n  runCursorCommand(command, options) {\n    return new run_command_cursor_1.RunCommandCursor(this, command, options);\n  }\n}\nDb.SYSTEM_NAMESPACE_COLLECTION = CONSTANTS.SYSTEM_NAMESPACE_COLLECTION;\nDb.SYSTEM_INDEX_COLLECTION = CONSTANTS.SYSTEM_INDEX_COLLECTION;\nDb.SYSTEM_PROFILE_COLLECTION = CONSTANTS.SYSTEM_PROFILE_COLLECTION;\nDb.SYSTEM_USER_COLLECTION = CONSTANTS.SYSTEM_USER_COLLECTION;\nDb.SYSTEM_COMMAND_COLLECTION = CONSTANTS.SYSTEM_COMMAND_COLLECTION;\nDb.SYSTEM_JS_COLLECTION = CONSTANTS.SYSTEM_JS_COLLECTION;\nexports.Db = Db;","map":{"version":3,"names":["admin_1","require","bson_1","change_stream_1","collection_1","CONSTANTS","aggregation_cursor_1","list_collections_cursor_1","run_command_cursor_1","error_1","collections_1","create_collection_1","drop_1","execute_operation_1","indexes_1","profiling_level_1","remove_user_1","rename_1","run_command_1","set_profiling_level_1","stats_1","read_concern_1","read_preference_1","utils_1","write_concern_1","DB_OPTIONS_ALLOW_LIST","Db","constructor","client","databaseName","options","filterOptions","includes","MongoInvalidArgumentError","s","readPreference","ReadPreference","fromOptions","bsonOptions","resolveBSONOptions","pkFactory","DEFAULT_PK_FACTORY","readConcern","ReadConcern","writeConcern","WriteConcern","namespace","MongoDBNamespace","db","secondaryOk","preference","toString","createCollection","name","executeOperation","CreateCollectionOperation","resolveOptions","command","RunCommandOperation","session","aggregate","pipeline","AggregationCursor","admin","Admin","collection","Collection","stats","DbStatsOperation","listCollections","filter","ListCollectionsCursor","renameCollection","fromCollection","toCollection","RenameOperation","new_collection","primary","dropCollection","DropCollectionOperation","dropDatabase","DropDatabaseOperation","collections","CollectionsOperation","createIndex","indexSpec","CreateIndexOperation","removeUser","username","RemoveUserOperation","setProfilingLevel","level","SetProfilingLevelOperation","profilingLevel","ProfilingLevelOperation","indexInformation","IndexInformationOperation","watch","Array","isArray","ChangeStream","runCursorCommand","RunCommandCursor","SYSTEM_NAMESPACE_COLLECTION","SYSTEM_INDEX_COLLECTION","SYSTEM_PROFILE_COLLECTION","SYSTEM_USER_COLLECTION","SYSTEM_COMMAND_COLLECTION","SYSTEM_JS_COLLECTION","exports"],"sources":["../src/db.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}