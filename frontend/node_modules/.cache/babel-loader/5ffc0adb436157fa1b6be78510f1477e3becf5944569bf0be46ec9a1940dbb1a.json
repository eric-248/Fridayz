{"ast":null,"code":"'use strict';\n\nconst assert = require('assert');\n\n/**\n * Given a value, cast it to a number, or throw an `Error` if the value\n * cannot be casted. `null` and `undefined` are considered valid.\n *\n * @param {Any} value\n * @return {Number}\n * @throws {Error} if `value` is not one of the allowed values\n * @api private\n */\n\nmodule.exports = function castNumber(val) {\n  if (val == null) {\n    return val;\n  }\n  if (val === '') {\n    return null;\n  }\n  if (typeof val === 'string' || typeof val === 'boolean') {\n    val = Number(val);\n  }\n  assert.ok(!isNaN(val));\n  if (val instanceof Number) {\n    return val.valueOf();\n  }\n  if (typeof val === 'number') {\n    return val;\n  }\n  if (!Array.isArray(val) && typeof val.valueOf === 'function') {\n    return Number(val.valueOf());\n  }\n  if (val.toString && !Array.isArray(val) && val.toString() == Number(val)) {\n    return Number(val);\n  }\n  assert.ok(false);\n};","map":{"version":3,"names":["assert","require","module","exports","castNumber","val","Number","ok","isNaN","valueOf","Array","isArray","toString"],"sources":["C:/Users/lrmir/OneDrive/Desktop/cs35L/newFridayz/Fridayz/frontend/node_modules/mongoose/lib/cast/number.js"],"sourcesContent":["'use strict';\n\nconst assert = require('assert');\n\n/**\n * Given a value, cast it to a number, or throw an `Error` if the value\n * cannot be casted. `null` and `undefined` are considered valid.\n *\n * @param {Any} value\n * @return {Number}\n * @throws {Error} if `value` is not one of the allowed values\n * @api private\n */\n\nmodule.exports = function castNumber(val) {\n  if (val == null) {\n    return val;\n  }\n  if (val === '') {\n    return null;\n  }\n\n  if (typeof val === 'string' || typeof val === 'boolean') {\n    val = Number(val);\n  }\n\n  assert.ok(!isNaN(val));\n  if (val instanceof Number) {\n    return val.valueOf();\n  }\n  if (typeof val === 'number') {\n    return val;\n  }\n  if (!Array.isArray(val) && typeof val.valueOf === 'function') {\n    return Number(val.valueOf());\n  }\n  if (val.toString && !Array.isArray(val) && val.toString() == Number(val)) {\n    return Number(val);\n  }\n\n  assert.ok(false);\n};\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAQ,CAAC;;AAEhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAC,MAAM,CAACC,OAAO,GAAG,SAASC,UAAUA,CAACC,GAAG,EAAE;EACxC,IAAIA,GAAG,IAAI,IAAI,EAAE;IACf,OAAOA,GAAG;EACZ;EACA,IAAIA,GAAG,KAAK,EAAE,EAAE;IACd,OAAO,IAAI;EACb;EAEA,IAAI,OAAOA,GAAG,KAAK,QAAQ,IAAI,OAAOA,GAAG,KAAK,SAAS,EAAE;IACvDA,GAAG,GAAGC,MAAM,CAACD,GAAG,CAAC;EACnB;EAEAL,MAAM,CAACO,EAAE,CAAC,CAACC,KAAK,CAACH,GAAG,CAAC,CAAC;EACtB,IAAIA,GAAG,YAAYC,MAAM,EAAE;IACzB,OAAOD,GAAG,CAACI,OAAO,CAAC,CAAC;EACtB;EACA,IAAI,OAAOJ,GAAG,KAAK,QAAQ,EAAE;IAC3B,OAAOA,GAAG;EACZ;EACA,IAAI,CAACK,KAAK,CAACC,OAAO,CAACN,GAAG,CAAC,IAAI,OAAOA,GAAG,CAACI,OAAO,KAAK,UAAU,EAAE;IAC5D,OAAOH,MAAM,CAACD,GAAG,CAACI,OAAO,CAAC,CAAC,CAAC;EAC9B;EACA,IAAIJ,GAAG,CAACO,QAAQ,IAAI,CAACF,KAAK,CAACC,OAAO,CAACN,GAAG,CAAC,IAAIA,GAAG,CAACO,QAAQ,CAAC,CAAC,IAAIN,MAAM,CAACD,GAAG,CAAC,EAAE;IACxE,OAAOC,MAAM,CAACD,GAAG,CAAC;EACpB;EAEAL,MAAM,CAACO,EAAE,CAAC,KAAK,CAAC;AAClB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}