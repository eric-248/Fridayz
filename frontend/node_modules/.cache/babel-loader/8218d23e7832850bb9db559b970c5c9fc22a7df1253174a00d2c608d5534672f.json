{"ast":null,"code":"'use strict';\n\n/*!\n * Module requirements.\n */\nconst MongooseError = require('../error/index');\nconst SchemaNumberOptions = require('../options/schemaNumberOptions');\nconst SchemaType = require('../schemaType');\nconst castNumber = require('../cast/number');\nconst handleBitwiseOperator = require('./operators/bitwise');\nconst utils = require('../utils');\nconst CastError = SchemaType.CastError;\n\n/**\n * Number SchemaType constructor.\n *\n * @param {String} key\n * @param {Object} options\n * @inherits SchemaType\n * @api public\n */\n\nfunction SchemaNumber(key, options) {\n  SchemaType.call(this, key, options, 'Number');\n}\n\n/**\n * Attaches a getter for all Number instances.\n *\n * #### Example:\n *\n *     // Make all numbers round down\n *     mongoose.Number.get(function(v) { return Math.floor(v); });\n *\n *     const Model = mongoose.model('Test', new Schema({ test: Number }));\n *     new Model({ test: 3.14 }).test; // 3\n *\n * @param {Function} getter\n * @return {this}\n * @function get\n * @static\n * @api public\n */\n\nSchemaNumber.get = SchemaType.get;\n\n/**\n * Sets a default option for all Number instances.\n *\n * #### Example:\n *\n *     // Make all numbers have option `min` equal to 0.\n *     mongoose.Schema.Number.set('min', 0);\n *\n *     const Order = mongoose.model('Order', new Schema({ amount: Number }));\n *     new Order({ amount: -10 }).validateSync().errors.amount.message; // Path `amount` must be larger than 0.\n *\n * @param {String} option The option you'd like to set the value for\n * @param {Any} value value for option\n * @return {undefined}\n * @function set\n * @static\n * @api public\n */\n\nSchemaNumber.set = SchemaType.set;\nSchemaNumber.setters = [];\n\n/*!\n * ignore\n */\n\nSchemaNumber._cast = castNumber;\n\n/**\n * Get/set the function used to cast arbitrary values to numbers.\n *\n * #### Example:\n *\n *     // Make Mongoose cast empty strings '' to 0 for paths declared as numbers\n *     const original = mongoose.Number.cast();\n *     mongoose.Number.cast(v => {\n *       if (v === '') { return 0; }\n *       return original(v);\n *     });\n *\n *     // Or disable casting entirely\n *     mongoose.Number.cast(false);\n *\n * @param {Function} caster\n * @return {Function}\n * @function get\n * @static\n * @api public\n */\n\nSchemaNumber.cast = function cast(caster) {\n  if (arguments.length === 0) {\n    return this._cast;\n  }\n  if (caster === false) {\n    caster = this._defaultCaster;\n  }\n  this._cast = caster;\n  return this._cast;\n};\n\n/*!\n * ignore\n */\n\nSchemaNumber._defaultCaster = v => {\n  if (typeof v !== 'number') {\n    throw new Error();\n  }\n  return v;\n};\n\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api public\n */\nSchemaNumber.schemaName = 'Number';\nSchemaNumber.defaultOptions = {};\n\n/*!\n * Inherits from SchemaType.\n */\nSchemaNumber.prototype = Object.create(SchemaType.prototype);\nSchemaNumber.prototype.constructor = SchemaNumber;\nSchemaNumber.prototype.OptionsConstructor = SchemaNumberOptions;\n\n/*!\n * ignore\n */\n\nSchemaNumber._checkRequired = v => typeof v === 'number' || v instanceof Number;\n\n/**\n * Override the function the required validator uses to check whether a string\n * passes the `required` check.\n *\n * @param {Function} fn\n * @return {Function}\n * @function checkRequired\n * @static\n * @api public\n */\n\nSchemaNumber.checkRequired = SchemaType.checkRequired;\n\n/**\n * Check if the given value satisfies a required validator.\n *\n * @param {Any} value\n * @param {Document} doc\n * @return {Boolean}\n * @api public\n */\n\nSchemaNumber.prototype.checkRequired = function checkRequired(value, doc) {\n  if (typeof value === 'object' && SchemaType._isRef(this, value, doc, true)) {\n    return value != null;\n  }\n\n  // `require('util').inherits()` does **not** copy static properties, and\n  // plugins like mongoose-float use `inherits()` for pre-ES6.\n  const _checkRequired = typeof this.constructor.checkRequired === 'function' ? this.constructor.checkRequired() : SchemaNumber.checkRequired();\n  return _checkRequired(value);\n};\n\n/**\n * Sets a minimum number validator.\n *\n * #### Example:\n *\n *     const s = new Schema({ n: { type: Number, min: 10 })\n *     const M = db.model('M', s)\n *     const m = new M({ n: 9 })\n *     m.save(function (err) {\n *       console.error(err) // validator error\n *       m.n = 10;\n *       m.save() // success\n *     })\n *\n *     // custom error messages\n *     // We can also use the special {MIN} token which will be replaced with the invalid value\n *     const min = [10, 'The value of path `{PATH}` ({VALUE}) is beneath the limit ({MIN}).'];\n *     const schema = new Schema({ n: { type: Number, min: min })\n *     const M = mongoose.model('Measurement', schema);\n *     const s= new M({ n: 4 });\n *     s.validate(function (err) {\n *       console.log(String(err)) // ValidationError: The value of path `n` (4) is beneath the limit (10).\n *     })\n *\n * @param {Number} value minimum number\n * @param {String} [message] optional custom error message\n * @return {SchemaType} this\n * @see Customized Error Messages https://mongoosejs.com/docs/api/error.html#Error.messages\n * @api public\n */\n\nSchemaNumber.prototype.min = function (value, message) {\n  if (this.minValidator) {\n    this.validators = this.validators.filter(function (v) {\n      return v.validator !== this.minValidator;\n    }, this);\n  }\n  if (value !== null && value !== undefined) {\n    let msg = message || MongooseError.messages.Number.min;\n    msg = msg.replace(/{MIN}/, value);\n    this.validators.push({\n      validator: this.minValidator = function (v) {\n        return v == null || v >= value;\n      },\n      message: msg,\n      type: 'min',\n      min: value\n    });\n  }\n  return this;\n};\n\n/**\n * Sets a maximum number validator.\n *\n * #### Example:\n *\n *     const s = new Schema({ n: { type: Number, max: 10 })\n *     const M = db.model('M', s)\n *     const m = new M({ n: 11 })\n *     m.save(function (err) {\n *       console.error(err) // validator error\n *       m.n = 10;\n *       m.save() // success\n *     })\n *\n *     // custom error messages\n *     // We can also use the special {MAX} token which will be replaced with the invalid value\n *     const max = [10, 'The value of path `{PATH}` ({VALUE}) exceeds the limit ({MAX}).'];\n *     const schema = new Schema({ n: { type: Number, max: max })\n *     const M = mongoose.model('Measurement', schema);\n *     const s= new M({ n: 4 });\n *     s.validate(function (err) {\n *       console.log(String(err)) // ValidationError: The value of path `n` (4) exceeds the limit (10).\n *     })\n *\n * @param {Number} maximum number\n * @param {String} [message] optional custom error message\n * @return {SchemaType} this\n * @see Customized Error Messages https://mongoosejs.com/docs/api/error.html#Error.messages\n * @api public\n */\n\nSchemaNumber.prototype.max = function (value, message) {\n  if (this.maxValidator) {\n    this.validators = this.validators.filter(function (v) {\n      return v.validator !== this.maxValidator;\n    }, this);\n  }\n  if (value !== null && value !== undefined) {\n    let msg = message || MongooseError.messages.Number.max;\n    msg = msg.replace(/{MAX}/, value);\n    this.validators.push({\n      validator: this.maxValidator = function (v) {\n        return v == null || v <= value;\n      },\n      message: msg,\n      type: 'max',\n      max: value\n    });\n  }\n  return this;\n};\n\n/**\n * Sets a enum validator\n *\n * #### Example:\n *\n *     const s = new Schema({ n: { type: Number, enum: [1, 2, 3] });\n *     const M = db.model('M', s);\n *\n *     const m = new M({ n: 4 });\n *     await m.save(); // throws validation error\n *\n *     m.n = 3;\n *     await m.save(); // succeeds\n *\n * @param {Array} values allowed values\n * @param {String} [message] optional custom error message\n * @return {SchemaType} this\n * @see Customized Error Messages https://mongoosejs.com/docs/api/error.html#Error.messages\n * @api public\n */\n\nSchemaNumber.prototype.enum = function (values, message) {\n  if (this.enumValidator) {\n    this.validators = this.validators.filter(function (v) {\n      return v.validator !== this.enumValidator;\n    }, this);\n  }\n  if (!Array.isArray(values)) {\n    const isObjectSyntax = utils.isPOJO(values) && values.values != null;\n    if (isObjectSyntax) {\n      message = values.message;\n      values = values.values;\n    } else if (typeof values === 'number') {\n      values = Array.prototype.slice.call(arguments);\n      message = null;\n    }\n    if (utils.isPOJO(values)) {\n      values = Object.values(values);\n    }\n    message = message || MongooseError.messages.Number.enum;\n  }\n  message = message == null ? MongooseError.messages.Number.enum : message;\n  this.enumValidator = v => v == null || values.indexOf(v) !== -1;\n  this.validators.push({\n    validator: this.enumValidator,\n    message: message,\n    type: 'enum',\n    enumValues: values\n  });\n  return this;\n};\n\n/**\n * Casts to number\n *\n * @param {Object} value value to cast\n * @param {Document} doc document that triggers the casting\n * @param {Boolean} init\n * @api private\n */\n\nSchemaNumber.prototype.cast = function (value, doc, init) {\n  if (typeof value !== 'number' && SchemaType._isRef(this, value, doc, init)) {\n    if (value == null || utils.isNonBuiltinObject(value)) {\n      return this._castRef(value, doc, init);\n    }\n  }\n  const val = value && typeof value._id !== 'undefined' ? value._id :\n  // documents\n  value;\n  let castNumber;\n  if (typeof this._castFunction === 'function') {\n    castNumber = this._castFunction;\n  } else if (typeof this.constructor.cast === 'function') {\n    castNumber = this.constructor.cast();\n  } else {\n    castNumber = SchemaNumber.cast();\n  }\n  try {\n    return castNumber(val);\n  } catch (err) {\n    throw new CastError('Number', val, this.path, err, this);\n  }\n};\n\n/*!\n * ignore\n */\n\nfunction handleSingle(val) {\n  return this.cast(val);\n}\nfunction handleArray(val) {\n  const _this = this;\n  if (!Array.isArray(val)) {\n    return [this.cast(val)];\n  }\n  return val.map(function (m) {\n    return _this.cast(m);\n  });\n}\nSchemaNumber.prototype.$conditionalHandlers = {\n  ...SchemaType.prototype.$conditionalHandlers,\n  $bitsAllClear: handleBitwiseOperator,\n  $bitsAnyClear: handleBitwiseOperator,\n  $bitsAllSet: handleBitwiseOperator,\n  $bitsAnySet: handleBitwiseOperator,\n  $gt: handleSingle,\n  $gte: handleSingle,\n  $lt: handleSingle,\n  $lte: handleSingle,\n  $mod: handleArray\n};\n\n/**\n * Casts contents for queries.\n *\n * @param {String} $conditional\n * @param {any} [value]\n * @api private\n */\n\nSchemaNumber.prototype.castForQuery = function ($conditional, val, context) {\n  let handler;\n  if ($conditional != null) {\n    handler = this.$conditionalHandlers[$conditional];\n    if (!handler) {\n      throw new CastError('number', val, this.path, null, this);\n    }\n    return handler.call(this, val, context);\n  }\n  try {\n    val = this.applySetters(val, context);\n  } catch (err) {\n    if (err instanceof CastError && err.path === this.path && this.$fullPath != null) {\n      err.path = this.$fullPath;\n    }\n    throw err;\n  }\n  return val;\n};\n\n/*!\n * Module exports.\n */\n\nmodule.exports = SchemaNumber;","map":{"version":3,"names":["MongooseError","require","SchemaNumberOptions","SchemaType","castNumber","handleBitwiseOperator","utils","CastError","SchemaNumber","key","options","call","get","set","setters","_cast","cast","caster","arguments","length","_defaultCaster","v","Error","schemaName","defaultOptions","prototype","Object","create","constructor","OptionsConstructor","_checkRequired","Number","checkRequired","value","doc","_isRef","min","message","minValidator","validators","filter","validator","undefined","msg","messages","replace","push","type","max","maxValidator","enum","values","enumValidator","Array","isArray","isObjectSyntax","isPOJO","slice","indexOf","enumValues","init","isNonBuiltinObject","_castRef","val","_id","_castFunction","err","path","handleSingle","handleArray","_this","map","m","$conditionalHandlers","$bitsAllClear","$bitsAnyClear","$bitsAllSet","$bitsAnySet","$gt","$gte","$lt","$lte","$mod","castForQuery","$conditional","context","handler","applySetters","$fullPath","module","exports"],"sources":["C:/Users/lrmir/OneDrive/Desktop/cs35L/newFridayz/Fridayz/frontend/node_modules/mongoose/lib/schema/number.js"],"sourcesContent":["'use strict';\n\n/*!\n * Module requirements.\n */\n\nconst MongooseError = require('../error/index');\nconst SchemaNumberOptions = require('../options/schemaNumberOptions');\nconst SchemaType = require('../schemaType');\nconst castNumber = require('../cast/number');\nconst handleBitwiseOperator = require('./operators/bitwise');\nconst utils = require('../utils');\n\nconst CastError = SchemaType.CastError;\n\n/**\n * Number SchemaType constructor.\n *\n * @param {String} key\n * @param {Object} options\n * @inherits SchemaType\n * @api public\n */\n\nfunction SchemaNumber(key, options) {\n  SchemaType.call(this, key, options, 'Number');\n}\n\n/**\n * Attaches a getter for all Number instances.\n *\n * #### Example:\n *\n *     // Make all numbers round down\n *     mongoose.Number.get(function(v) { return Math.floor(v); });\n *\n *     const Model = mongoose.model('Test', new Schema({ test: Number }));\n *     new Model({ test: 3.14 }).test; // 3\n *\n * @param {Function} getter\n * @return {this}\n * @function get\n * @static\n * @api public\n */\n\nSchemaNumber.get = SchemaType.get;\n\n/**\n * Sets a default option for all Number instances.\n *\n * #### Example:\n *\n *     // Make all numbers have option `min` equal to 0.\n *     mongoose.Schema.Number.set('min', 0);\n *\n *     const Order = mongoose.model('Order', new Schema({ amount: Number }));\n *     new Order({ amount: -10 }).validateSync().errors.amount.message; // Path `amount` must be larger than 0.\n *\n * @param {String} option The option you'd like to set the value for\n * @param {Any} value value for option\n * @return {undefined}\n * @function set\n * @static\n * @api public\n */\n\nSchemaNumber.set = SchemaType.set;\n\nSchemaNumber.setters = [];\n\n/*!\n * ignore\n */\n\nSchemaNumber._cast = castNumber;\n\n/**\n * Get/set the function used to cast arbitrary values to numbers.\n *\n * #### Example:\n *\n *     // Make Mongoose cast empty strings '' to 0 for paths declared as numbers\n *     const original = mongoose.Number.cast();\n *     mongoose.Number.cast(v => {\n *       if (v === '') { return 0; }\n *       return original(v);\n *     });\n *\n *     // Or disable casting entirely\n *     mongoose.Number.cast(false);\n *\n * @param {Function} caster\n * @return {Function}\n * @function get\n * @static\n * @api public\n */\n\nSchemaNumber.cast = function cast(caster) {\n  if (arguments.length === 0) {\n    return this._cast;\n  }\n  if (caster === false) {\n    caster = this._defaultCaster;\n  }\n  this._cast = caster;\n\n  return this._cast;\n};\n\n/*!\n * ignore\n */\n\nSchemaNumber._defaultCaster = v => {\n  if (typeof v !== 'number') {\n    throw new Error();\n  }\n  return v;\n};\n\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api public\n */\nSchemaNumber.schemaName = 'Number';\n\nSchemaNumber.defaultOptions = {};\n\n/*!\n * Inherits from SchemaType.\n */\nSchemaNumber.prototype = Object.create(SchemaType.prototype);\nSchemaNumber.prototype.constructor = SchemaNumber;\nSchemaNumber.prototype.OptionsConstructor = SchemaNumberOptions;\n\n/*!\n * ignore\n */\n\nSchemaNumber._checkRequired = v => typeof v === 'number' || v instanceof Number;\n\n/**\n * Override the function the required validator uses to check whether a string\n * passes the `required` check.\n *\n * @param {Function} fn\n * @return {Function}\n * @function checkRequired\n * @static\n * @api public\n */\n\nSchemaNumber.checkRequired = SchemaType.checkRequired;\n\n/**\n * Check if the given value satisfies a required validator.\n *\n * @param {Any} value\n * @param {Document} doc\n * @return {Boolean}\n * @api public\n */\n\nSchemaNumber.prototype.checkRequired = function checkRequired(value, doc) {\n  if (typeof value === 'object' && SchemaType._isRef(this, value, doc, true)) {\n    return value != null;\n  }\n\n  // `require('util').inherits()` does **not** copy static properties, and\n  // plugins like mongoose-float use `inherits()` for pre-ES6.\n  const _checkRequired = typeof this.constructor.checkRequired === 'function' ?\n    this.constructor.checkRequired() :\n    SchemaNumber.checkRequired();\n\n  return _checkRequired(value);\n};\n\n/**\n * Sets a minimum number validator.\n *\n * #### Example:\n *\n *     const s = new Schema({ n: { type: Number, min: 10 })\n *     const M = db.model('M', s)\n *     const m = new M({ n: 9 })\n *     m.save(function (err) {\n *       console.error(err) // validator error\n *       m.n = 10;\n *       m.save() // success\n *     })\n *\n *     // custom error messages\n *     // We can also use the special {MIN} token which will be replaced with the invalid value\n *     const min = [10, 'The value of path `{PATH}` ({VALUE}) is beneath the limit ({MIN}).'];\n *     const schema = new Schema({ n: { type: Number, min: min })\n *     const M = mongoose.model('Measurement', schema);\n *     const s= new M({ n: 4 });\n *     s.validate(function (err) {\n *       console.log(String(err)) // ValidationError: The value of path `n` (4) is beneath the limit (10).\n *     })\n *\n * @param {Number} value minimum number\n * @param {String} [message] optional custom error message\n * @return {SchemaType} this\n * @see Customized Error Messages https://mongoosejs.com/docs/api/error.html#Error.messages\n * @api public\n */\n\nSchemaNumber.prototype.min = function(value, message) {\n  if (this.minValidator) {\n    this.validators = this.validators.filter(function(v) {\n      return v.validator !== this.minValidator;\n    }, this);\n  }\n\n  if (value !== null && value !== undefined) {\n    let msg = message || MongooseError.messages.Number.min;\n    msg = msg.replace(/{MIN}/, value);\n    this.validators.push({\n      validator: this.minValidator = function(v) {\n        return v == null || v >= value;\n      },\n      message: msg,\n      type: 'min',\n      min: value\n    });\n  }\n\n  return this;\n};\n\n/**\n * Sets a maximum number validator.\n *\n * #### Example:\n *\n *     const s = new Schema({ n: { type: Number, max: 10 })\n *     const M = db.model('M', s)\n *     const m = new M({ n: 11 })\n *     m.save(function (err) {\n *       console.error(err) // validator error\n *       m.n = 10;\n *       m.save() // success\n *     })\n *\n *     // custom error messages\n *     // We can also use the special {MAX} token which will be replaced with the invalid value\n *     const max = [10, 'The value of path `{PATH}` ({VALUE}) exceeds the limit ({MAX}).'];\n *     const schema = new Schema({ n: { type: Number, max: max })\n *     const M = mongoose.model('Measurement', schema);\n *     const s= new M({ n: 4 });\n *     s.validate(function (err) {\n *       console.log(String(err)) // ValidationError: The value of path `n` (4) exceeds the limit (10).\n *     })\n *\n * @param {Number} maximum number\n * @param {String} [message] optional custom error message\n * @return {SchemaType} this\n * @see Customized Error Messages https://mongoosejs.com/docs/api/error.html#Error.messages\n * @api public\n */\n\nSchemaNumber.prototype.max = function(value, message) {\n  if (this.maxValidator) {\n    this.validators = this.validators.filter(function(v) {\n      return v.validator !== this.maxValidator;\n    }, this);\n  }\n\n  if (value !== null && value !== undefined) {\n    let msg = message || MongooseError.messages.Number.max;\n    msg = msg.replace(/{MAX}/, value);\n    this.validators.push({\n      validator: this.maxValidator = function(v) {\n        return v == null || v <= value;\n      },\n      message: msg,\n      type: 'max',\n      max: value\n    });\n  }\n\n  return this;\n};\n\n/**\n * Sets a enum validator\n *\n * #### Example:\n *\n *     const s = new Schema({ n: { type: Number, enum: [1, 2, 3] });\n *     const M = db.model('M', s);\n *\n *     const m = new M({ n: 4 });\n *     await m.save(); // throws validation error\n *\n *     m.n = 3;\n *     await m.save(); // succeeds\n *\n * @param {Array} values allowed values\n * @param {String} [message] optional custom error message\n * @return {SchemaType} this\n * @see Customized Error Messages https://mongoosejs.com/docs/api/error.html#Error.messages\n * @api public\n */\n\nSchemaNumber.prototype.enum = function(values, message) {\n  if (this.enumValidator) {\n    this.validators = this.validators.filter(function(v) {\n      return v.validator !== this.enumValidator;\n    }, this);\n  }\n\n\n  if (!Array.isArray(values)) {\n    const isObjectSyntax = utils.isPOJO(values) && values.values != null;\n    if (isObjectSyntax) {\n      message = values.message;\n      values = values.values;\n    } else if (typeof values === 'number') {\n      values = Array.prototype.slice.call(arguments);\n      message = null;\n    }\n\n    if (utils.isPOJO(values)) {\n      values = Object.values(values);\n    }\n    message = message || MongooseError.messages.Number.enum;\n  }\n\n  message = message == null ? MongooseError.messages.Number.enum : message;\n\n  this.enumValidator = v => v == null || values.indexOf(v) !== -1;\n  this.validators.push({\n    validator: this.enumValidator,\n    message: message,\n    type: 'enum',\n    enumValues: values\n  });\n\n  return this;\n};\n\n/**\n * Casts to number\n *\n * @param {Object} value value to cast\n * @param {Document} doc document that triggers the casting\n * @param {Boolean} init\n * @api private\n */\n\nSchemaNumber.prototype.cast = function(value, doc, init) {\n  if (typeof value !== 'number' && SchemaType._isRef(this, value, doc, init)) {\n    if (value == null || utils.isNonBuiltinObject(value)) {\n      return this._castRef(value, doc, init);\n    }\n  }\n\n  const val = value && typeof value._id !== 'undefined' ?\n    value._id : // documents\n    value;\n\n  let castNumber;\n  if (typeof this._castFunction === 'function') {\n    castNumber = this._castFunction;\n  } else if (typeof this.constructor.cast === 'function') {\n    castNumber = this.constructor.cast();\n  } else {\n    castNumber = SchemaNumber.cast();\n  }\n\n  try {\n    return castNumber(val);\n  } catch (err) {\n    throw new CastError('Number', val, this.path, err, this);\n  }\n};\n\n/*!\n * ignore\n */\n\nfunction handleSingle(val) {\n  return this.cast(val);\n}\n\nfunction handleArray(val) {\n  const _this = this;\n  if (!Array.isArray(val)) {\n    return [this.cast(val)];\n  }\n  return val.map(function(m) {\n    return _this.cast(m);\n  });\n}\n\nSchemaNumber.prototype.$conditionalHandlers = {\n  ...SchemaType.prototype.$conditionalHandlers,\n  $bitsAllClear: handleBitwiseOperator,\n  $bitsAnyClear: handleBitwiseOperator,\n  $bitsAllSet: handleBitwiseOperator,\n  $bitsAnySet: handleBitwiseOperator,\n  $gt: handleSingle,\n  $gte: handleSingle,\n  $lt: handleSingle,\n  $lte: handleSingle,\n  $mod: handleArray\n};\n\n/**\n * Casts contents for queries.\n *\n * @param {String} $conditional\n * @param {any} [value]\n * @api private\n */\n\nSchemaNumber.prototype.castForQuery = function($conditional, val, context) {\n  let handler;\n  if ($conditional != null) {\n    handler = this.$conditionalHandlers[$conditional];\n    if (!handler) {\n      throw new CastError('number', val, this.path, null, this);\n    }\n    return handler.call(this, val, context);\n  }\n\n  try {\n    val = this.applySetters(val, context);\n  } catch (err) {\n    if (err instanceof CastError && err.path === this.path && this.$fullPath != null) {\n      err.path = this.$fullPath;\n    }\n    throw err;\n  }\n\n  return val;\n};\n\n/*!\n * Module exports.\n */\n\nmodule.exports = SchemaNumber;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}