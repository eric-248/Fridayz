{"ast":null,"code":"'use strict';\n\n/*!\n * Module dependencies.\n */\nconst EventEmitter = require('events').EventEmitter;\nconst InternalCache = require('./internal');\nconst MongooseError = require('./error/index');\nconst MixedSchema = require('./schema/mixed');\nconst ObjectExpectedError = require('./error/objectExpected');\nconst ObjectParameterError = require('./error/objectParameter');\nconst ParallelValidateError = require('./error/parallelValidate');\nconst Schema = require('./schema');\nconst StrictModeError = require('./error/strict');\nconst ValidationError = require('./error/validation');\nconst ValidatorError = require('./error/validator');\nconst $__hasIncludedChildren = require('./helpers/projection/hasIncludedChildren');\nconst applyDefaults = require('./helpers/document/applyDefaults');\nconst cleanModifiedSubpaths = require('./helpers/document/cleanModifiedSubpaths');\nconst clone = require('./helpers/clone');\nconst compile = require('./helpers/document/compile').compile;\nconst defineKey = require('./helpers/document/compile').defineKey;\nconst flatten = require('./helpers/common').flatten;\nconst get = require('./helpers/get');\nconst getEmbeddedDiscriminatorPath = require('./helpers/document/getEmbeddedDiscriminatorPath');\nconst getKeysInSchemaOrder = require('./helpers/schema/getKeysInSchemaOrder');\nconst getSubdocumentStrictValue = require('./helpers/schema/getSubdocumentStrictValue');\nconst handleSpreadDoc = require('./helpers/document/handleSpreadDoc');\nconst immediate = require('./helpers/immediate');\nconst isDefiningProjection = require('./helpers/projection/isDefiningProjection');\nconst isExclusive = require('./helpers/projection/isExclusive');\nconst inspect = require('util').inspect;\nconst internalToObjectOptions = require('./options').internalToObjectOptions;\nconst markArraySubdocsPopulated = require('./helpers/populate/markArraySubdocsPopulated');\nconst minimize = require('./helpers/minimize');\nconst mpath = require('mpath');\nconst queryhelpers = require('./queryHelpers');\nconst utils = require('./utils');\nconst isPromise = require('./helpers/isPromise');\nconst deepEqual = utils.deepEqual;\nconst isMongooseObject = utils.isMongooseObject;\nconst arrayAtomicsBackupSymbol = require('./helpers/symbols').arrayAtomicsBackupSymbol;\nconst arrayAtomicsSymbol = require('./helpers/symbols').arrayAtomicsSymbol;\nconst documentArrayParent = require('./helpers/symbols').documentArrayParent;\nconst documentIsModified = require('./helpers/symbols').documentIsModified;\nconst documentModifiedPaths = require('./helpers/symbols').documentModifiedPaths;\nconst documentSchemaSymbol = require('./helpers/symbols').documentSchemaSymbol;\nconst getSymbol = require('./helpers/symbols').getSymbol;\nconst populateModelSymbol = require('./helpers/symbols').populateModelSymbol;\nconst scopeSymbol = require('./helpers/symbols').scopeSymbol;\nconst schemaMixedSymbol = require('./schema/symbols').schemaMixedSymbol;\nconst parentPaths = require('./helpers/path/parentPaths');\nconst getDeepestSubdocumentForPath = require('./helpers/document/getDeepestSubdocumentForPath');\nconst sessionNewDocuments = require('./helpers/symbols').sessionNewDocuments;\nlet DocumentArray;\nlet MongooseArray;\nlet Embedded;\nconst specialProperties = utils.specialProperties;\n\n/**\n * The core Mongoose document constructor. You should not call this directly,\n * the Mongoose [Model constructor](./api/model.html#Model) calls this for you.\n *\n * @param {Object} obj the values to set\n * @param {Object} [fields] optional object containing the fields which were selected in the query returning this document and any populated paths data\n * @param {Object} [options] various configuration options for the document\n * @param {Boolean} [options.defaults=true] if `false`, skip applying default values to this document.\n * @inherits NodeJS EventEmitter https://nodejs.org/api/events.html#class-eventemitter\n * @event `init`: Emitted on a document after it has been retrieved from the db and fully hydrated by Mongoose.\n * @event `save`: Emitted when the document is successfully saved\n * @api private\n */\n\nfunction Document(obj, fields, skipId, options) {\n  if (typeof skipId === 'object' && skipId != null) {\n    options = skipId;\n    skipId = options.skipId;\n  }\n  options = Object.assign({}, options);\n\n  // Support `browserDocument.js` syntax\n  if (this.$__schema == null) {\n    const _schema = utils.isObject(fields) && !fields.instanceOfSchema ? new Schema(fields) : fields;\n    this.$__setSchema(_schema);\n    fields = skipId;\n    skipId = options;\n    options = arguments[4] || {};\n  }\n  this.$__ = new InternalCache();\n\n  // Avoid setting `isNew` to `true`, because it is `true` by default\n  if (options.isNew != null && options.isNew !== true) {\n    this.$isNew = options.isNew;\n  }\n  if (options.priorDoc != null) {\n    this.$__.priorDoc = options.priorDoc;\n  }\n  if (skipId) {\n    this.$__.skipId = skipId;\n  }\n  if (obj != null && typeof obj !== 'object') {\n    throw new ObjectParameterError(obj, 'obj', 'Document');\n  }\n  let defaults = true;\n  if (options.defaults !== undefined) {\n    this.$__.defaults = options.defaults;\n    defaults = options.defaults;\n  }\n  const schema = this.$__schema;\n  if (typeof fields === 'boolean' || fields === 'throw') {\n    if (fields !== true) {\n      this.$__.strictMode = fields;\n    }\n    fields = undefined;\n  } else if (schema.options.strict !== true) {\n    this.$__.strictMode = schema.options.strict;\n  }\n  const requiredPaths = schema.requiredPaths(true);\n  for (const path of requiredPaths) {\n    this.$__.activePaths.require(path);\n  }\n  let exclude = null;\n\n  // determine if this doc is a result of a query with\n  // excluded fields\n  if (utils.isPOJO(fields) && Object.keys(fields).length > 0) {\n    exclude = isExclusive(fields);\n    this.$__.selected = fields;\n    this.$__.exclude = exclude;\n  }\n  const hasIncludedChildren = exclude === false && fields ? $__hasIncludedChildren(fields) : null;\n  if (this._doc == null) {\n    this.$__buildDoc(obj, fields, skipId, exclude, hasIncludedChildren, false);\n\n    // By default, defaults get applied **before** setting initial values\n    // Re: gh-6155\n    if (defaults) {\n      applyDefaults(this, fields, exclude, hasIncludedChildren, true, null);\n    }\n  }\n  if (obj) {\n    // Skip set hooks\n    if (this.$__original_set) {\n      this.$__original_set(obj, undefined, true, options);\n    } else {\n      this.$set(obj, undefined, true, options);\n    }\n    if (obj instanceof Document) {\n      this.$isNew = obj.$isNew;\n    }\n  }\n\n  // Function defaults get applied **after** setting initial values so they\n  // see the full doc rather than an empty one, unless they opt out.\n  // Re: gh-3781, gh-6155\n  if (options.willInit && defaults) {\n    if (options.skipDefaults) {\n      this.$__.skipDefaults = options.skipDefaults;\n    }\n  } else if (defaults) {\n    applyDefaults(this, fields, exclude, hasIncludedChildren, false, options.skipDefaults);\n  }\n  if (!this.$__.strictMode && obj) {\n    const _this = this;\n    const keys = Object.keys(this._doc);\n    keys.forEach(function (key) {\n      // Avoid methods, virtuals, existing fields, and `$` keys. The latter is to avoid overwriting\n      // Mongoose internals.\n      if (!(key in schema.tree) && !(key in schema.methods) && !(key in schema.virtuals) && !key.startsWith('$')) {\n        defineKey({\n          prop: key,\n          subprops: null,\n          prototype: _this\n        });\n      }\n    });\n  }\n  applyQueue(this);\n}\nDocument.prototype.$isMongooseDocumentPrototype = true;\n\n/**\n * Boolean flag specifying if the document is new. If you create a document\n * using `new`, this document will be considered \"new\". `$isNew` is how\n * Mongoose determines whether `save()` should use `insertOne()` to create\n * a new document or `updateOne()` to update an existing document.\n *\n * #### Example:\n *\n *     const user = new User({ name: 'John Smith' });\n *     user.$isNew; // true\n *\n *     await user.save(); // Sends an `insertOne` to MongoDB\n *\n * On the other hand, if you load an existing document from the database\n * using `findOne()` or another [query operation](https://mongoosejs.com/docs/queries.html),\n * `$isNew` will be false.\n *\n * #### Example:\n *\n *     const user = await User.findOne({ name: 'John Smith' });\n *     user.$isNew; // false\n *\n * Mongoose sets `$isNew` to `false` immediately after `save()` succeeds.\n * That means Mongoose sets `$isNew` to false **before** `post('save')` hooks run.\n * In `post('save')` hooks, `$isNew` will be `false` if `save()` succeeded.\n *\n * #### Example:\n *\n *     userSchema.post('save', function() {\n *       this.$isNew; // false\n *     });\n *     await User.create({ name: 'John Smith' });\n *\n * For subdocuments, `$isNew` is true if either the parent has `$isNew` set,\n * or if you create a new subdocument.\n *\n * #### Example:\n *\n *     // Assume `Group` has a document array `users`\n *     const group = await Group.findOne();\n *     group.users[0].$isNew; // false\n *\n *     group.users.push({ name: 'John Smith' });\n *     group.users[1].$isNew; // true\n *\n * @api public\n * @property $isNew\n * @memberOf Document\n * @instance\n */\n\nObject.defineProperty(Document.prototype, 'isNew', {\n  get: function () {\n    return this.$isNew;\n  },\n  set: function (value) {\n    this.$isNew = value;\n  }\n});\n\n/**\n * Hash containing current validation errors.\n *\n * @api public\n * @property errors\n * @memberOf Document\n * @instance\n */\n\nObject.defineProperty(Document.prototype, 'errors', {\n  get: function () {\n    return this.$errors;\n  },\n  set: function (value) {\n    this.$errors = value;\n  }\n});\n\n/*!\n * ignore\n */\n\nDocument.prototype.$isNew = true;\n\n/*!\n * Document exposes the NodeJS event emitter API, so you can use\n * `on`, `once`, etc.\n */\nutils.each(['on', 'once', 'emit', 'listeners', 'removeListener', 'setMaxListeners', 'removeAllListeners', 'addListener'], function (emitterFn) {\n  Document.prototype[emitterFn] = function () {\n    // Delay creating emitter until necessary because emitters take up a lot of memory,\n    // especially for subdocuments.\n    if (!this.$__.emitter) {\n      if (emitterFn === 'emit') {\n        return;\n      }\n      this.$__.emitter = new EventEmitter();\n      this.$__.emitter.setMaxListeners(0);\n    }\n    return this.$__.emitter[emitterFn].apply(this.$__.emitter, arguments);\n  };\n  Document.prototype[`$${emitterFn}`] = Document.prototype[emitterFn];\n});\nDocument.prototype.constructor = Document;\nfor (const i in EventEmitter.prototype) {\n  Document[i] = EventEmitter.prototype[i];\n}\n\n/**\n * The document's internal schema.\n *\n * @api private\n * @property schema\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.$__schema;\n\n/**\n * The document's schema.\n *\n * @api public\n * @property schema\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.schema;\n\n/**\n * Empty object that you can use for storing properties on the document. This\n * is handy for passing data to middleware without conflicting with Mongoose\n * internals.\n *\n * #### Example:\n *\n *     schema.pre('save', function() {\n *       // Mongoose will set `isNew` to `false` if `save()` succeeds\n *       this.$locals.wasNew = this.isNew;\n *     });\n *\n *     schema.post('save', function() {\n *       // Prints true if `isNew` was set before `save()`\n *       console.log(this.$locals.wasNew);\n *     });\n *\n * @api public\n * @property $locals\n * @memberOf Document\n * @instance\n */\n\nObject.defineProperty(Document.prototype, '$locals', {\n  configurable: false,\n  enumerable: false,\n  get: function () {\n    if (this.$__.locals == null) {\n      this.$__.locals = {};\n    }\n    return this.$__.locals;\n  },\n  set: function (v) {\n    this.$__.locals = v;\n  }\n});\n\n/**\n * Legacy alias for `$isNew`.\n *\n * @api public\n * @property isNew\n * @memberOf Document\n * @see $isNew https://mongoosejs.com/docs/api/document.html#Document.prototype.$isNew\n * @instance\n */\n\nDocument.prototype.isNew;\n\n/**\n * Set this property to add additional query filters when Mongoose saves this document and `isNew` is false.\n *\n * #### Example:\n *\n *     // Make sure `save()` never updates a soft deleted document.\n *     schema.pre('save', function() {\n *       this.$where = { isDeleted: false };\n *     });\n *\n * @api public\n * @property $where\n * @memberOf Document\n * @instance\n */\n\nObject.defineProperty(Document.prototype, '$where', {\n  configurable: false,\n  enumerable: false,\n  writable: true\n});\n\n/**\n * The string version of this documents _id.\n *\n * #### Note:\n *\n * This getter exists on all documents by default. The getter can be disabled by setting the `id` [option](https://mongoosejs.com/docs/guide.html#id) of its `Schema` to false at construction time.\n *\n *     new Schema({ name: String }, { id: false });\n *\n * @api public\n * @see Schema options https://mongoosejs.com/docs/guide.html#options\n * @property id\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.id;\n\n/**\n * Hash containing current validation $errors.\n *\n * @api public\n * @property $errors\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.$errors;\n\n/**\n * A string containing the current operation that Mongoose is executing\n * on this document. May be `null`, `'save'`, `'validate'`, or `'remove'`.\n *\n * #### Example:\n *\n *     const doc = new Model({ name: 'test' });\n *     doc.$op; // null\n *\n *     const promise = doc.save();\n *     doc.$op; // 'save'\n *\n *     await promise;\n *     doc.$op; // null\n *\n * @api public\n * @property $op\n * @memberOf Document\n * @instance\n */\n\nObject.defineProperty(Document.prototype, '$op', {\n  get: function () {\n    return this.$__.op || null;\n  },\n  set: function (value) {\n    this.$__.op = value;\n  }\n});\n\n/*!\n * ignore\n */\n\nfunction $applyDefaultsToNested(val, path, doc) {\n  if (val == null) {\n    return;\n  }\n  const paths = Object.keys(doc.$__schema.paths);\n  const plen = paths.length;\n  const pathPieces = path.indexOf('.') === -1 ? [path] : path.split('.');\n  for (let i = 0; i < plen; ++i) {\n    let curPath = '';\n    const p = paths[i];\n    if (!p.startsWith(path + '.')) {\n      continue;\n    }\n    const type = doc.$__schema.paths[p];\n    const pieces = type.splitPath().slice(pathPieces.length);\n    const len = pieces.length;\n    if (type.defaultValue === void 0) {\n      continue;\n    }\n    let cur = val;\n    for (let j = 0; j < len; ++j) {\n      if (cur == null) {\n        break;\n      }\n      const piece = pieces[j];\n      if (j === len - 1) {\n        if (cur[piece] !== void 0) {\n          break;\n        }\n        try {\n          const def = type.getDefault(doc, false);\n          if (def !== void 0) {\n            cur[piece] = def;\n          }\n        } catch (err) {\n          doc.invalidate(path + '.' + curPath, err);\n          break;\n        }\n        break;\n      }\n      curPath += (!curPath.length ? '' : '.') + piece;\n      cur[piece] = cur[piece] || {};\n      cur = cur[piece];\n    }\n  }\n}\n\n/**\n * Builds the default doc structure\n *\n * @param {Object} obj\n * @param {Object} [fields]\n * @param {Boolean} [skipId]\n * @param {Boolean} [exclude]\n * @param {Object} [hasIncludedChildren]\n * @api private\n * @method $__buildDoc\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.$__buildDoc = function (obj, fields, skipId, exclude, hasIncludedChildren) {\n  const doc = {};\n  const paths = Object.keys(this.$__schema.paths).\n  // Don't build up any paths that are underneath a map, we don't know\n  // what the keys will be\n  filter(p => !p.includes('$*'));\n  const plen = paths.length;\n  let ii = 0;\n  for (; ii < plen; ++ii) {\n    const p = paths[ii];\n    if (p === '_id') {\n      if (skipId) {\n        continue;\n      }\n      if (obj && '_id' in obj) {\n        continue;\n      }\n    }\n    const path = this.$__schema.paths[p].splitPath();\n    const len = path.length;\n    const last = len - 1;\n    let curPath = '';\n    let doc_ = doc;\n    let included = false;\n    for (let i = 0; i < len; ++i) {\n      const piece = path[i];\n      if (!curPath.length) {\n        curPath = piece;\n      } else {\n        curPath += '.' + piece;\n      }\n\n      // support excluding intermediary levels\n      if (exclude === true) {\n        if (curPath in fields) {\n          break;\n        }\n      } else if (exclude === false && fields && !included) {\n        if (curPath in fields) {\n          included = true;\n        } else if (!hasIncludedChildren[curPath]) {\n          break;\n        }\n      }\n      if (i < last) {\n        doc_ = doc_[piece] || (doc_[piece] = {});\n      }\n    }\n  }\n  this._doc = doc;\n};\n\n/*!\n * Converts to POJO when you use the document for querying\n */\n\nDocument.prototype.toBSON = function () {\n  return this.toObject(internalToObjectOptions);\n};\n\n/**\n * Initializes the document without setters or marking anything modified.\n *\n * Called internally after a document is returned from mongodb. Normally,\n * you do **not** need to call this function on your own.\n *\n * This function triggers `init` [middleware](https://mongoosejs.com/docs/middleware.html).\n * Note that `init` hooks are [synchronous](https://mongoosejs.com/docs/middleware.html#synchronous).\n *\n * @param {Object} doc document returned by mongo\n * @param {Object} [opts]\n * @param {Function} [fn]\n * @api public\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.init = function (doc, opts, fn) {\n  if (typeof opts === 'function') {\n    fn = opts;\n    opts = null;\n  }\n  this.$__init(doc, opts);\n  if (fn) {\n    fn(null, this);\n  }\n  return this;\n};\n\n/**\n * Alias for [`.init`](https://mongoosejs.com/docs/api/document.html#Document.prototype.init())\n *\n * @api public\n */\n\nDocument.prototype.$init = function () {\n  return this.constructor.prototype.init.apply(this, arguments);\n};\n\n/**\n * Internal \"init\" function\n *\n * @param {Document} doc\n * @param {Object} [opts]\n * @returns {Document} this\n * @api private\n */\n\nDocument.prototype.$__init = function (doc, opts) {\n  this.$isNew = false;\n  opts = opts || {};\n\n  // handle docs with populated paths\n  // If doc._id is not null or undefined\n  if (doc._id != null && opts.populated && opts.populated.length) {\n    const id = String(doc._id);\n    for (const item of opts.populated) {\n      if (item.isVirtual) {\n        this.$populated(item.path, utils.getValue(item.path, doc), item);\n      } else {\n        this.$populated(item.path, item._docs[id], item);\n      }\n      if (item._childDocs == null) {\n        continue;\n      }\n      for (const child of item._childDocs) {\n        if (child == null || child.$__ == null) {\n          continue;\n        }\n        child.$__.parent = this;\n      }\n      item._childDocs = [];\n    }\n  }\n  init(this, doc, this._doc, opts);\n  markArraySubdocsPopulated(this, opts.populated);\n  this.$emit('init', this);\n  this.constructor.emit('init', this);\n  const hasIncludedChildren = this.$__.exclude === false && this.$__.selected ? $__hasIncludedChildren(this.$__.selected) : null;\n  applyDefaults(this, this.$__.selected, this.$__.exclude, hasIncludedChildren, false, this.$__.skipDefaults);\n  return this;\n};\n\n/**\n * Init helper.\n *\n * @param {Object} self document instance\n * @param {Object} obj raw mongodb doc\n * @param {Object} doc object we are initializing\n * @param {Object} [opts] Optional Options\n * @param {Boolean} [opts.setters] Call `applySetters` instead of `cast`\n * @param {String} [prefix] Prefix to add to each path\n * @api private\n */\n\nfunction init(self, obj, doc, opts, prefix) {\n  prefix = prefix || '';\n  if (obj.$__ != null) {\n    obj = obj._doc;\n  }\n  const keys = Object.keys(obj);\n  const len = keys.length;\n  let schemaType;\n  let path;\n  let i;\n  let index = 0;\n  const strict = self.$__.strictMode;\n  const docSchema = self.$__schema;\n  while (index < len) {\n    _init(index++);\n  }\n  function _init(index) {\n    i = keys[index];\n    // avoid prototype pollution\n    if (i === '__proto__' || i === 'constructor') {\n      return;\n    }\n    path = prefix + i;\n    schemaType = docSchema.path(path);\n    // Should still work if not a model-level discriminator, but should not be\n    // necessary. This is *only* to catch the case where we queried using the\n    // base model and the discriminated model has a projection\n    if (docSchema.$isRootDiscriminator && !self.$__isSelected(path)) {\n      return;\n    }\n    if (!schemaType && utils.isPOJO(obj[i])) {\n      // assume nested object\n      if (!doc[i]) {\n        doc[i] = {};\n        if (!strict && !(i in docSchema.tree) && !(i in docSchema.methods) && !(i in docSchema.virtuals)) {\n          self[i] = doc[i];\n        }\n      }\n      init(self, obj[i], doc[i], opts, path + '.');\n    } else if (!schemaType) {\n      doc[i] = obj[i];\n      if (!strict && !prefix) {\n        self[i] = obj[i];\n      }\n    } else {\n      // Retain order when overwriting defaults\n      if (doc.hasOwnProperty(i) && obj[i] !== void 0 && !opts.hydratedPopulatedDocs) {\n        delete doc[i];\n      }\n      if (obj[i] === null) {\n        doc[i] = schemaType._castNullish(null);\n      } else if (obj[i] !== undefined) {\n        const wasPopulated = obj[i].$__ == null ? null : obj[i].$__.wasPopulated;\n        if (schemaType && !wasPopulated && !opts.hydratedPopulatedDocs) {\n          try {\n            if (opts && opts.setters) {\n              // Call applySetters with `init = false` because otherwise setters are a noop\n              const overrideInit = false;\n              doc[i] = schemaType.applySetters(obj[i], self, overrideInit);\n            } else {\n              doc[i] = schemaType.cast(obj[i], self, true);\n            }\n          } catch (e) {\n            self.invalidate(e.path, new ValidatorError({\n              path: e.path,\n              message: e.message,\n              type: 'cast',\n              value: e.value,\n              reason: e\n            }));\n          }\n        } else {\n          doc[i] = obj[i];\n        }\n      }\n      // mark as hydrated\n      if (!self.$isModified(path)) {\n        self.$__.activePaths.init(path);\n      }\n    }\n  }\n}\n\n/**\n * Sends an updateOne command with this document `_id` as the query selector.\n *\n * #### Example:\n *\n *     weirdCar.updateOne({$inc: {wheels:1}}, { w: 1 }, callback);\n *\n * #### Valid options:\n *\n *  - same as in [Model.updateOne](https://mongoosejs.com/docs/api/model.html#Model.updateOne)\n *\n * @see Model.updateOne https://mongoosejs.com/docs/api/model.html#Model.updateOne\n * @param {Object} doc\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.setOptions())\n * @param {Object} [options.lean] if truthy, mongoose will return the document as a plain JavaScript object rather than a mongoose document. See [`Query.lean()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.lean()) and the [Mongoose lean tutorial](https://mongoosejs.com/docs/tutorials/lean.html).\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](https://mongoosejs.com/docs/guide.html#strict)\n * @param {Boolean} [options.timestamps=null] If set to `false` and [schema-level timestamps](https://mongoosejs.com/docs/guide.html#timestamps) are enabled, skip timestamps for this update. Note that this allows you to overwrite timestamps. Does nothing if schema-level timestamps are not set.\n * @param {Function} [callback]\n * @return {Query}\n * @api public\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.updateOne = function updateOne(doc, options, callback) {\n  const query = this.constructor.updateOne({\n    _id: this._id\n  }, doc, options);\n  const self = this;\n  query.pre(function queryPreUpdateOne(cb) {\n    self.constructor._middleware.execPre('updateOne', self, [self], cb);\n  });\n  query.post(function queryPostUpdateOne(cb) {\n    self.constructor._middleware.execPost('updateOne', self, [self], {}, cb);\n  });\n  if (this.$session() != null) {\n    if (!('session' in query.options)) {\n      query.options.session = this.$session();\n    }\n  }\n  if (callback != null) {\n    return query.exec(callback);\n  }\n  return query;\n};\n\n/**\n * Sends a replaceOne command with this document `_id` as the query selector.\n *\n * #### Valid options:\n *\n *  - same as in [Model.replaceOne](https://mongoosejs.com/docs/api/model.html#Model.replaceOne())\n *\n * @see Model.replaceOne https://mongoosejs.com/docs/api/model.html#Model.replaceOne()\n * @param {Object} doc\n * @param {Object} [options]\n * @param {Function} [callback]\n * @return {Query}\n * @api public\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.replaceOne = function replaceOne() {\n  const args = [...arguments];\n  args.unshift({\n    _id: this._id\n  });\n  return this.constructor.replaceOne.apply(this.constructor, args);\n};\n\n/**\n * Getter/setter around the session associated with this document. Used to\n * automatically set `session` if you `save()` a doc that you got from a\n * query with an associated session.\n *\n * #### Example:\n *\n *     const session = MyModel.startSession();\n *     const doc = await MyModel.findOne().session(session);\n *     doc.$session() === session; // true\n *     doc.$session(null);\n *     doc.$session() === null; // true\n *\n * If this is a top-level document, setting the session propagates to all child\n * docs.\n *\n * @param {ClientSession} [session] overwrite the current session\n * @return {ClientSession}\n * @method $session\n * @api public\n * @memberOf Document\n */\n\nDocument.prototype.$session = function $session(session) {\n  if (arguments.length === 0) {\n    if (this.$__.session != null && this.$__.session.hasEnded) {\n      this.$__.session = null;\n      return null;\n    }\n    return this.$__.session;\n  }\n  if (session != null && session.hasEnded) {\n    throw new MongooseError('Cannot set a document\\'s session to a session that has ended. Make sure you haven\\'t ' + 'called `endSession()` on the session you are passing to `$session()`.');\n  }\n  if (session == null && this.$__.session == null) {\n    return;\n  }\n  this.$__.session = session;\n  if (!this.$isSubdocument) {\n    const subdocs = this.$getAllSubdocs();\n    for (const child of subdocs) {\n      child.$session(session);\n    }\n  }\n  return session;\n};\n\n/**\n * Getter/setter around whether this document will apply timestamps by\n * default when using `save()` and `bulkSave()`.\n *\n * #### Example:\n *\n *     const TestModel = mongoose.model('Test', new Schema({ name: String }, { timestamps: true }));\n *     const doc = new TestModel({ name: 'John Smith' });\n *\n *     doc.$timestamps(); // true\n *\n *     doc.$timestamps(false);\n *     await doc.save(); // Does **not** apply timestamps\n *\n * @param {Boolean} [value] overwrite the current session\n * @return {Document|boolean|undefined} When used as a getter (no argument), a boolean will be returned indicating the timestamps option state or if unset \"undefined\" will be used, otherwise will return \"this\"\n * @method $timestamps\n * @api public\n * @memberOf Document\n */\n\nDocument.prototype.$timestamps = function $timestamps(value) {\n  if (arguments.length === 0) {\n    if (this.$__.timestamps != null) {\n      return this.$__.timestamps;\n    }\n    if (this.$__schema) {\n      return this.$__schema.options.timestamps;\n    }\n    return undefined;\n  }\n  const currentValue = this.$timestamps();\n  if (value !== currentValue) {\n    this.$__.timestamps = value;\n  }\n  return this;\n};\n\n/**\n * Overwrite all values in this document with the values of `obj`, except\n * for immutable properties. Behaves similarly to `set()`, except for it\n * unsets all properties that aren't in `obj`.\n *\n * @param {Object} obj the object to overwrite this document with\n * @method overwrite\n * @memberOf Document\n * @instance\n * @api public\n * @return {Document} this\n */\n\nDocument.prototype.overwrite = function overwrite(obj) {\n  const keys = Array.from(new Set(Object.keys(this._doc).concat(Object.keys(obj))));\n  for (const key of keys) {\n    if (key === '_id') {\n      continue;\n    }\n    // Explicitly skip version key\n    if (this.$__schema.options.versionKey && key === this.$__schema.options.versionKey) {\n      continue;\n    }\n    if (this.$__schema.options.discriminatorKey && key === this.$__schema.options.discriminatorKey) {\n      continue;\n    }\n    this.$set(key, obj[key]);\n  }\n  return this;\n};\n\n/**\n * Alias for `set()`, used internally to avoid conflicts\n *\n * @param {String|Object} path path or object of key/vals to set\n * @param {Any} val the value to set\n * @param {Schema|String|Number|Buffer|*} [type] optionally specify a type for \"on-the-fly\" attributes\n * @param {Object} [options] optionally specify options that modify the behavior of the set\n * @param {Boolean} [options.merge=false] if true, setting a [nested path](https://mongoosejs.com/docs/subdocs.html#subdocuments-versus-nested-paths) will merge existing values rather than overwrite the whole object. So `doc.set('nested', { a: 1, b: 2 })` becomes `doc.set('nested.a', 1); doc.set('nested.b', 2);`\n * @return {Document} this\n * @method $set\n * @memberOf Document\n * @instance\n * @api public\n */\n\nDocument.prototype.$set = function $set(path, val, type, options) {\n  if (utils.isPOJO(type)) {\n    options = type;\n    type = undefined;\n  }\n  const merge = options && options.merge;\n  const adhoc = type && type !== true;\n  const constructing = type === true;\n  let adhocs;\n  let keys;\n  let i = 0;\n  let pathtype;\n  let key;\n  let prefix;\n  const userSpecifiedStrict = options && 'strict' in options;\n  let strict = userSpecifiedStrict ? options.strict : this.$__.strictMode;\n  if (adhoc) {\n    adhocs = this.$__.adhocPaths || (this.$__.adhocPaths = {});\n    adhocs[path] = this.$__schema.interpretAsType(path, type, this.$__schema.options);\n  }\n  if (path == null) {\n    [path, val] = [val, path];\n  } else if (typeof path !== 'string') {\n    // new Document({ key: val })\n    if (path instanceof Document) {\n      if (path.$__isNested) {\n        path = path.toObject();\n      } else {\n        path = path._doc;\n      }\n    }\n    if (path == null) {\n      [path, val] = [val, path];\n    }\n    prefix = val ? val + '.' : '';\n    keys = getKeysInSchemaOrder(this.$__schema, path);\n    const len = keys.length;\n\n    // `_skipMinimizeTopLevel` is because we may have deleted the top-level\n    // nested key to ensure key order.\n    const _skipMinimizeTopLevel = options && options._skipMinimizeTopLevel || false;\n    if (len === 0 && _skipMinimizeTopLevel) {\n      delete options._skipMinimizeTopLevel;\n      if (val) {\n        this.$set(val, {});\n      }\n      return this;\n    }\n    options = Object.assign({}, options, {\n      _skipMinimizeTopLevel: false\n    });\n    for (let i = 0; i < len; ++i) {\n      key = keys[i];\n      const pathName = prefix ? prefix + key : key;\n      pathtype = this.$__schema.pathType(pathName);\n      const valForKey = path[key];\n\n      // On initial set, delete any nested keys if we're going to overwrite\n      // them to ensure we keep the user's key order.\n      if (type === true && !prefix && valForKey != null && pathtype === 'nested' && this._doc[key] != null) {\n        delete this._doc[key];\n      }\n      if (utils.isNonBuiltinObject(valForKey) && pathtype === 'nested') {\n        this.$set(pathName, valForKey, constructing, Object.assign({}, options, {\n          _skipMarkModified: true\n        }));\n        $applyDefaultsToNested(this.$get(pathName), pathName, this);\n        continue;\n      } else if (strict) {\n        // Don't overwrite defaults with undefined keys (gh-3981) (gh-9039)\n        if (constructing && valForKey === void 0 && this.$get(pathName) !== void 0) {\n          continue;\n        }\n        if (pathtype === 'adhocOrUndefined') {\n          pathtype = getEmbeddedDiscriminatorPath(this, pathName, {\n            typeOnly: true\n          });\n        }\n        if (pathtype === 'real' || pathtype === 'virtual') {\n          this.$set(pathName, valForKey, constructing, options);\n        } else if (pathtype === 'nested' && valForKey instanceof Document) {\n          this.$set(pathName, valForKey.toObject({\n            transform: false\n          }), constructing, options);\n        } else if (strict === 'throw') {\n          if (pathtype === 'nested') {\n            throw new ObjectExpectedError(key, valForKey);\n          } else {\n            throw new StrictModeError(key);\n          }\n        } else if (pathtype === 'nested' && valForKey == null) {\n          this.$set(pathName, valForKey, constructing, options);\n        }\n      } else if (valForKey !== void 0) {\n        this.$set(pathName, valForKey, constructing, options);\n      }\n    }\n\n    // Ensure all properties are in correct order\n    const orderedDoc = {};\n    const orderedKeys = Object.keys(this.$__schema.tree);\n    for (let i = 0, len = orderedKeys.length; i < len; ++i) {\n      (key = orderedKeys[i]) && this._doc.hasOwnProperty(key) && (orderedDoc[key] = undefined);\n    }\n    this._doc = Object.assign(orderedDoc, this._doc);\n    return this;\n  }\n  let pathType = this.$__schema.pathType(path);\n  let parts = null;\n  if (pathType === 'adhocOrUndefined') {\n    parts = path.indexOf('.') === -1 ? [path] : path.split('.');\n    pathType = getEmbeddedDiscriminatorPath(this, parts, {\n      typeOnly: true\n    });\n  }\n  if (pathType === 'adhocOrUndefined' && !userSpecifiedStrict) {\n    // May be path underneath non-strict schema\n    if (parts == null) {\n      parts = path.indexOf('.') === -1 ? [path] : path.split('.');\n    }\n    const subdocStrict = getSubdocumentStrictValue(this.$__schema, parts);\n    if (subdocStrict !== undefined) {\n      strict = subdocStrict;\n    }\n  }\n\n  // Assume this is a Mongoose document that was copied into a POJO using\n  // `Object.assign()` or `{...doc}`\n  val = handleSpreadDoc(val, true);\n\n  // if this doc is being constructed we should not trigger getters\n  const priorVal = (() => {\n    if (this.$__.priorDoc != null) {\n      return this.$__.priorDoc.$__getValue(path);\n    }\n    if (constructing) {\n      return void 0;\n    }\n    return this.$__getValue(path);\n  })();\n  if (pathType === 'nested' && val) {\n    if (typeof val === 'object' && val != null) {\n      if (val.$__ != null) {\n        val = val.toObject(internalToObjectOptions);\n      }\n      if (val == null) {\n        this.invalidate(path, new MongooseError.CastError('Object', val, path));\n        return this;\n      }\n      const wasModified = this.$isModified(path);\n      const hasInitialVal = this.$__.savedState != null && this.$__.savedState.hasOwnProperty(path);\n      if (this.$__.savedState != null && !this.$isNew && !this.$__.savedState.hasOwnProperty(path)) {\n        const initialVal = this.$__getValue(path);\n        this.$__.savedState[path] = initialVal;\n        const keys = Object.keys(initialVal || {});\n        for (const key of keys) {\n          this.$__.savedState[path + '.' + key] = initialVal[key];\n        }\n      }\n      if (!merge) {\n        this.$__setValue(path, null);\n        cleanModifiedSubpaths(this, path);\n      } else {\n        return this.$set(val, path, constructing);\n      }\n      const keys = getKeysInSchemaOrder(this.$__schema, val, path);\n      this.$__setValue(path, {});\n      for (const key of keys) {\n        this.$set(path + '.' + key, val[key], constructing, {\n          ...options,\n          _skipMarkModified: true\n        });\n      }\n      if (priorVal != null && (!wasModified || hasInitialVal) && utils.deepEqual(hasInitialVal ? this.$__.savedState[path] : priorVal, val)) {\n        this.unmarkModified(path);\n      } else {\n        this.markModified(path);\n      }\n      return this;\n    }\n    this.invalidate(path, new MongooseError.CastError('Object', val, path));\n    return this;\n  }\n  let schema;\n  if (parts == null) {\n    parts = path.indexOf('.') === -1 ? [path] : path.split('.');\n  }\n\n  // Might need to change path for top-level alias\n  if (typeof this.$__schema.aliases[parts[0]] === 'string') {\n    parts[0] = this.$__schema.aliases[parts[0]];\n  }\n  if (pathType === 'adhocOrUndefined' && strict) {\n    // check for roots that are Mixed types\n    let mixed;\n    for (i = 0; i < parts.length; ++i) {\n      const subpath = parts.slice(0, i + 1).join('.');\n\n      // If path is underneath a virtual, bypass everything and just set it.\n      if (i + 1 < parts.length && this.$__schema.pathType(subpath) === 'virtual') {\n        mpath.set(path, val, this);\n        return this;\n      }\n      schema = this.$__schema.path(subpath);\n      if (schema == null) {\n        continue;\n      }\n      if (schema instanceof MixedSchema) {\n        // allow changes to sub paths of mixed types\n        mixed = true;\n        break;\n      } else if (schema.$isSchemaMap && schema.$__schemaType instanceof MixedSchema && i < parts.length - 1) {\n        // Map of mixed and not the last element in the path resolves to mixed\n        mixed = true;\n        schema = schema.$__schemaType;\n        break;\n      }\n    }\n    if (schema == null) {\n      // Check for embedded discriminators\n      schema = getEmbeddedDiscriminatorPath(this, path);\n    }\n    if (!mixed && !schema) {\n      if (strict === 'throw') {\n        throw new StrictModeError(path);\n      }\n      return this;\n    }\n  } else if (pathType === 'virtual') {\n    schema = this.$__schema.virtualpath(path);\n    schema.applySetters(val, this);\n    return this;\n  } else {\n    schema = this.$__path(path);\n  }\n\n  // gh-4578, if setting a deeply nested path that doesn't exist yet, create it\n  let cur = this._doc;\n  let curPath = '';\n  for (i = 0; i < parts.length - 1; ++i) {\n    cur = cur[parts[i]];\n    curPath += (curPath.length !== 0 ? '.' : '') + parts[i];\n    if (!cur) {\n      this.$set(curPath, {});\n      // Hack re: gh-5800. If nested field is not selected, it probably exists\n      // so `MongoServerError: cannot use the part (nested of nested.num) to\n      // traverse the element ({nested: null})` is not likely. If user gets\n      // that error, its their fault for now. We should reconsider disallowing\n      // modifying not selected paths for 6.x\n      if (!this.$__isSelected(curPath)) {\n        this.unmarkModified(curPath);\n      }\n      cur = this.$__getValue(curPath);\n    }\n  }\n  let pathToMark;\n\n  // When using the $set operator the path to the field must already exist.\n  // Else mongodb throws: \"LEFT_SUBFIELD only supports Object\"\n\n  if (parts.length <= 1) {\n    pathToMark = path;\n  } else {\n    const len = parts.length;\n    for (i = 0; i < len; ++i) {\n      const subpath = parts.slice(0, i + 1).join('.');\n      if (this.$get(subpath, null, {\n        getters: false\n      }) === null) {\n        pathToMark = subpath;\n        break;\n      }\n    }\n    if (!pathToMark) {\n      pathToMark = path;\n    }\n  }\n  if (!schema) {\n    this.$__set(pathToMark, path, options, constructing, parts, schema, val, priorVal);\n    if (pathType === 'nested' && val == null) {\n      cleanModifiedSubpaths(this, path);\n    }\n    return this;\n  }\n\n  // If overwriting a subdocument path, make sure to clear out\n  // any errors _before_ setting, so new errors that happen\n  // get persisted. Re: #9080\n  if (schema.$isSingleNested || schema.$isMongooseArray) {\n    _markValidSubpaths(this, path);\n  }\n  if (val != null && merge && schema.$isSingleNested) {\n    if (val instanceof Document) {\n      val = val.toObject({\n        virtuals: false,\n        transform: false\n      });\n    }\n    const keys = Object.keys(val);\n    for (const key of keys) {\n      this.$set(path + '.' + key, val[key], constructing, options);\n    }\n    return this;\n  }\n  let shouldSet = true;\n  try {\n    // If the user is trying to set a ref path to a document with\n    // the correct model name, treat it as populated\n    const refMatches = (() => {\n      if (schema.options == null) {\n        return false;\n      }\n      if (!(val instanceof Document)) {\n        return false;\n      }\n      const model = val.constructor;\n\n      // Check ref\n      const ref = schema.options.ref;\n      if (ref != null && (ref === model.modelName || ref === model.baseModelName)) {\n        return true;\n      }\n\n      // Check refPath\n      const refPath = schema.options.refPath;\n      if (refPath == null) {\n        return false;\n      }\n      const modelName = val.get(refPath);\n      return modelName === model.modelName || modelName === model.baseModelName;\n    })();\n    let didPopulate = false;\n    if (refMatches && val instanceof Document && (!val.$__.wasPopulated || utils.deepEqual(val.$__.wasPopulated.value, val._id))) {\n      const unpopulatedValue = schema && schema.$isSingleNested ? schema.cast(val, this) : val._id;\n      this.$populated(path, unpopulatedValue, {\n        [populateModelSymbol]: val.constructor\n      });\n      val.$__.wasPopulated = {\n        value: unpopulatedValue\n      };\n      didPopulate = true;\n    }\n    let popOpts;\n    const typeKey = this.$__schema.options.typeKey;\n    if (schema.options && Array.isArray(schema.options[typeKey]) && schema.options[typeKey].length && schema.options[typeKey][0].ref && _isManuallyPopulatedArray(val, schema.options[typeKey][0].ref)) {\n      popOpts = {\n        [populateModelSymbol]: val[0].constructor\n      };\n      this.$populated(path, val.map(function (v) {\n        return v._id;\n      }), popOpts);\n      for (const doc of val) {\n        doc.$__.wasPopulated = {\n          value: doc._id\n        };\n      }\n      didPopulate = true;\n    }\n    if (!refMatches || !schema.$isSingleNested || !val.$__) {\n      // If this path is underneath a single nested schema, we'll call the setter\n      // later in `$__set()` because we don't take `_doc` when we iterate through\n      // a single nested doc. That's to make sure we get the correct context.\n      // Otherwise we would double-call the setter, see gh-7196.\n      let setterContext = this;\n      if (this.$__schema.singleNestedPaths[path] != null && parts.length > 1) {\n        setterContext = getDeepestSubdocumentForPath(this, parts, this.schema);\n      }\n      if (options != null && options.overwriteImmutable) {\n        val = schema.applySetters(val, setterContext, false, priorVal, {\n          overwriteImmutable: true\n        });\n      } else {\n        val = schema.applySetters(val, setterContext, false, priorVal);\n      }\n    }\n    if (Array.isArray(val) && !Array.isArray(schema) && schema.$isMongooseDocumentArray && val.length !== 0 && val[0] != null && val[0].$__ != null && val[0].$__.populated != null) {\n      const populatedPaths = Object.keys(val[0].$__.populated);\n      for (const populatedPath of populatedPaths) {\n        this.$populated(path + '.' + populatedPath, val.map(v => v.$populated(populatedPath)), val[0].$__.populated[populatedPath].options);\n      }\n      didPopulate = true;\n    }\n    if (!didPopulate && this.$__.populated) {\n      // If this array partially contains populated documents, convert them\n      // all to ObjectIds re: #8443\n      if (Array.isArray(val) && this.$__.populated[path]) {\n        for (let i = 0; i < val.length; ++i) {\n          if (val[i] instanceof Document) {\n            val.set(i, val[i]._id, true);\n          }\n        }\n      }\n      delete this.$__.populated[path];\n    }\n    if (val != null && schema.$isSingleNested) {\n      _checkImmutableSubpaths(val, schema, priorVal);\n    }\n    this.$markValid(path);\n  } catch (e) {\n    if (e instanceof MongooseError.StrictModeError && e.isImmutableError) {\n      this.invalidate(path, e);\n    } else if (e instanceof MongooseError.CastError) {\n      this.invalidate(e.path, e);\n      if (e.$originalErrorPath) {\n        this.invalidate(path, new MongooseError.CastError(schema.instance, val, path, e.$originalErrorPath));\n      }\n    } else {\n      this.invalidate(path, new MongooseError.CastError(schema.instance, val, path, e));\n    }\n    shouldSet = false;\n  }\n  if (shouldSet) {\n    let savedState = null;\n    let savedStatePath = null;\n    if (!constructing) {\n      const doc = this.$isSubdocument ? this.ownerDocument() : this;\n      savedState = doc.$__.savedState;\n      savedStatePath = this.$isSubdocument ? this.$__.fullPath + '.' + path : path;\n      doc.$__saveInitialState(savedStatePath);\n    }\n    this.$__set(pathToMark, path, options, constructing, parts, schema, val, priorVal);\n    const isInTransaction = !!this.$__.session?.transaction;\n    const isModifiedWithinTransaction = this.$__.session && this.$__.session[sessionNewDocuments] && this.$__.session[sessionNewDocuments].has(this) && this.$__.session[sessionNewDocuments].get(this).modifiedPaths && !this.$__.session[sessionNewDocuments].get(this).modifiedPaths.has(savedStatePath);\n    if (savedState != null && savedState.hasOwnProperty(savedStatePath) && (!isInTransaction || isModifiedWithinTransaction) && utils.deepEqual(val, savedState[savedStatePath])) {\n      this.unmarkModified(path);\n    }\n  }\n  if (schema.$isSingleNested && (this.isDirectModified(path) || val == null)) {\n    cleanModifiedSubpaths(this, path);\n  }\n  return this;\n};\n\n/*!\n * ignore\n */\n\nfunction _isManuallyPopulatedArray(val, ref) {\n  if (!Array.isArray(val)) {\n    return false;\n  }\n  if (val.length === 0) {\n    return false;\n  }\n  for (const el of val) {\n    if (!(el instanceof Document)) {\n      return false;\n    }\n    const modelName = el.constructor.modelName;\n    if (modelName == null) {\n      return false;\n    }\n    if (el.constructor.modelName != ref && el.constructor.baseModelName != ref) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Sets the value of a path, or many paths.\n * Alias for [`.$set`](https://mongoosejs.com/docs/api/document.html#Document.prototype.$set()).\n *\n * #### Example:\n *\n *     // path, value\n *     doc.set(path, value)\n *\n *     // object\n *     doc.set({\n *         path  : value\n *       , path2 : {\n *            path  : value\n *         }\n *     })\n *\n *     // on-the-fly cast to number\n *     doc.set(path, value, Number)\n *\n *     // on-the-fly cast to string\n *     doc.set(path, value, String)\n *\n *     // changing strict mode behavior\n *     doc.set(path, value, { strict: false });\n *\n * @param {String|Object} path path or object of key/vals to set\n * @param {Any} val the value to set\n * @param {Schema|String|Number|Buffer|*} [type] optionally specify a type for \"on-the-fly\" attributes\n * @param {Object} [options] optionally specify options that modify the behavior of the set\n * @return {Document} this\n * @api public\n * @method set\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.set = Document.prototype.$set;\n\n/**\n * Determine if we should mark this change as modified.\n *\n * @param {never} pathToMark UNUSED\n * @param {String|Symbol} path\n * @param {Object} options\n * @param {Any} constructing\n * @param {never} parts UNUSED\n * @param {Schema} schema\n * @param {Any} val\n * @param {Any} priorVal\n * @return {Boolean}\n * @api private\n * @method $__shouldModify\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.$__shouldModify = function (pathToMark, path, options, constructing, parts, schema, val, priorVal) {\n  if (options && options._skipMarkModified) {\n    return false;\n  }\n  if (this.$isNew) {\n    return true;\n  }\n  // Is path already modified? If so, always modify. We may unmark modified later.\n  if (path in this.$__.activePaths.getStatePaths('modify')) {\n    return true;\n  }\n  if (val === void 0 && !this.$__isSelected(path)) {\n    // when a path is not selected in a query, its initial\n    // value will be undefined.\n    return true;\n  }\n  if (val === void 0 && path in this.$__.activePaths.getStatePaths('default')) {\n    // we're just unsetting the default value which was never saved\n    return false;\n  }\n\n  // gh-3992: if setting a populated field to a doc, don't mark modified\n  // if they have the same _id\n  if (this.$populated(path) && val instanceof Document && deepEqual(val._id, priorVal)) {\n    return false;\n  }\n  if (!deepEqual(val, priorVal !== undefined ? priorVal : utils.getValue(path, this))) {\n    return true;\n  }\n  if (!constructing && val !== null && val !== undefined && path in this.$__.activePaths.getStatePaths('default') && deepEqual(val, schema.getDefault(this, constructing))) {\n    // a path with a default was $unset on the server\n    // and the user is setting it to the same value again\n    return true;\n  }\n  return false;\n};\n\n/**\n * Handles the actual setting of the value and marking the path modified if appropriate.\n *\n * @param {String} pathToMark\n * @param {String|Symbol} path\n * @param {Object} options\n * @param {Any} constructing\n * @param {Array} parts\n * @param {Schema} schema\n * @param {Any} val\n * @param {Any} priorVal\n * @api private\n * @method $__set\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.$__set = function (pathToMark, path, options, constructing, parts, schema, val, priorVal) {\n  Embedded = Embedded || require('./types/arraySubdocument');\n  const shouldModify = this.$__shouldModify(pathToMark, path, options, constructing, parts, schema, val, priorVal);\n  if (shouldModify) {\n    if (this.$__.primitiveAtomics && this.$__.primitiveAtomics[path]) {\n      delete this.$__.primitiveAtomics[path];\n      if (Object.keys(this.$__.primitiveAtomics).length === 0) {\n        delete this.$__.primitiveAtomics;\n      }\n    }\n    this.markModified(pathToMark);\n\n    // handle directly setting arrays (gh-1126)\n    MongooseArray || (MongooseArray = require('./types/array'));\n    if (val && utils.isMongooseArray(val)) {\n      val._registerAtomic('$set', val);\n\n      // Update embedded document parent references (gh-5189)\n      if (utils.isMongooseDocumentArray(val)) {\n        val.forEach(function (item) {\n          item && item.__parentArray && (item.__parentArray = val);\n        });\n      }\n    }\n  } else if (Array.isArray(val) && Array.isArray(priorVal) && utils.isMongooseArray(val) && utils.isMongooseArray(priorVal)) {\n    val[arrayAtomicsSymbol] = priorVal[arrayAtomicsSymbol];\n    val[arrayAtomicsBackupSymbol] = priorVal[arrayAtomicsBackupSymbol];\n    if (utils.isMongooseDocumentArray(val)) {\n      val.forEach(doc => {\n        if (doc != null) {\n          doc.$isNew = false;\n        }\n      });\n    }\n  }\n  let obj = this._doc;\n  let i = 0;\n  const l = parts.length;\n  let cur = '';\n  for (; i < l; i++) {\n    const next = i + 1;\n    const last = next === l;\n    cur += cur ? '.' + parts[i] : parts[i];\n    if (specialProperties.has(parts[i])) {\n      return;\n    }\n    if (last) {\n      if (obj instanceof Map) {\n        obj.set(parts[i], val);\n      } else if (obj.$isSingleNested) {\n        if (!(parts[i] in obj)) {\n          obj[parts[i]] = val;\n          obj._doc[parts[i]] = val;\n        } else {\n          obj._doc[parts[i]] = val;\n        }\n      } else {\n        obj[parts[i]] = val;\n      }\n    } else {\n      const isMap = obj instanceof Map;\n      let value = isMap ? obj.get(parts[i]) : obj[parts[i]];\n      if (utils.isPOJO(value)) {\n        obj = value;\n      } else if (value && value instanceof Embedded) {\n        obj = value;\n      } else if (value && !Array.isArray(value) && value.$isSingleNested) {\n        obj = value;\n      } else if (value && Array.isArray(value)) {\n        obj = value;\n      } else if (value == null) {\n        value = {};\n        if (isMap) {\n          obj.set(parts[i], value);\n        } else {\n          obj[parts[i]] = value;\n        }\n        obj = value;\n      } else {\n        obj = value;\n      }\n    }\n  }\n};\n\n/**\n * Gets a raw value from a path (no getters)\n *\n * @param {String} path\n * @return {Any} Returns the value from the given `path`.\n * @api private\n */\n\nDocument.prototype.$__getValue = function (path) {\n  return utils.getValue(path, this._doc);\n};\n\n/**\n * Increments the numeric value at `path` by the given `val`.\n * When you call `save()` on this document, Mongoose will send a\n * [`$inc`](https://www.mongodb.com/docs/manual/reference/operator/update/inc/)\n * as opposed to a `$set`.\n *\n * #### Example:\n *\n *     const schema = new Schema({ counter: Number });\n *     const Test = db.model('Test', schema);\n *\n *     const doc = await Test.create({ counter: 0 });\n *     doc.$inc('counter', 2);\n *     await doc.save(); // Sends a `{ $inc: { counter: 2 } }` to MongoDB\n *     doc.counter; // 2\n *\n *     doc.counter += 2;\n *     await doc.save(); // Sends a `{ $set: { counter: 2 } }` to MongoDB\n *\n * @param {String|Array} path path or paths to update\n * @param {Number} val increment `path` by this value\n * @return {Document} this\n */\n\nDocument.prototype.$inc = function $inc(path, val) {\n  if (val == null) {\n    val = 1;\n  }\n  if (Array.isArray(path)) {\n    path.forEach(p => this.$inc(p, val));\n    return this;\n  }\n  const schemaType = this.$__path(path);\n  if (schemaType == null) {\n    if (this.$__.strictMode === 'throw') {\n      throw new StrictModeError(path);\n    } else if (this.$__.strictMode === true) {\n      return this;\n    }\n  } else if (schemaType.instance !== 'Number') {\n    this.invalidate(path, new MongooseError.CastError(schemaType.instance, val, path));\n    return this;\n  }\n  const currentValue = this.$__getValue(path) || 0;\n  let shouldSet = false;\n  let valToSet = null;\n  let valToInc = val;\n  try {\n    val = schemaType.cast(val);\n    valToSet = schemaType.applySetters(currentValue + val, this);\n    valToInc = valToSet - currentValue;\n    shouldSet = true;\n  } catch (err) {\n    this.invalidate(path, new MongooseError.CastError('number', val, path, err));\n  }\n  if (shouldSet) {\n    this.$__.primitiveAtomics = this.$__.primitiveAtomics || {};\n    if (this.$__.primitiveAtomics[path] == null) {\n      this.$__.primitiveAtomics[path] = {\n        $inc: valToInc\n      };\n    } else {\n      this.$__.primitiveAtomics[path].$inc += valToInc;\n    }\n    this.markModified(path);\n    this.$__setValue(path, valToSet);\n  }\n  return this;\n};\n\n/**\n * Sets a raw value for a path (no casting, setters, transformations)\n *\n * @param {String} path\n * @param {Object} value\n * @return {Document} this\n * @api private\n */\n\nDocument.prototype.$__setValue = function (path, val) {\n  utils.setValue(path, val, this._doc);\n  return this;\n};\n\n/**\n * Returns the value of a path.\n *\n * #### Example:\n *\n *     // path\n *     doc.get('age') // 47\n *\n *     // dynamic casting to a string\n *     doc.get('age', String) // \"47\"\n *\n * @param {String} path\n * @param {Schema|String|Number|Buffer|*} [type] optionally specify a type for on-the-fly attributes\n * @param {Object} [options]\n * @param {Boolean} [options.virtuals=false] Apply virtuals before getting this path\n * @param {Boolean} [options.getters=true] If false, skip applying getters and just get the raw value\n * @return {Any}\n * @api public\n */\n\nDocument.prototype.get = function (path, type, options) {\n  let adhoc;\n  if (options == null) {\n    options = {};\n  }\n  if (type) {\n    adhoc = this.$__schema.interpretAsType(path, type, this.$__schema.options);\n  }\n  const noDottedPath = options.noDottedPath;\n\n  // Fast path if we know we're just accessing top-level path on the document:\n  // just get the schema path, avoid `$__path()` because that does string manipulation\n  let schema = noDottedPath ? this.$__schema.paths[path] : this.$__path(path);\n  if (schema == null) {\n    schema = this.$__schema.virtualpath(path);\n    if (schema != null) {\n      return schema.applyGetters(void 0, this);\n    }\n  }\n  if (noDottedPath) {\n    let obj = this._doc[path];\n    if (adhoc) {\n      obj = adhoc.cast(obj);\n    }\n    if (schema != null && options.getters !== false) {\n      return schema.applyGetters(obj, this);\n    }\n    return obj;\n  }\n  if (schema != null && schema.instance === 'Mixed') {\n    const virtual = this.$__schema.virtualpath(path);\n    if (virtual != null) {\n      schema = virtual;\n    }\n  }\n  const hasDot = path.indexOf('.') !== -1;\n  let obj = this._doc;\n  const pieces = hasDot ? path.split('.') : [path];\n  // Might need to change path for top-level alias\n  if (typeof this.$__schema.aliases[pieces[0]] === 'string') {\n    pieces[0] = this.$__schema.aliases[pieces[0]];\n  }\n  for (let i = 0, l = pieces.length; i < l; i++) {\n    if (obj && obj._doc) {\n      obj = obj._doc;\n    }\n    if (obj == null) {\n      obj = void 0;\n    } else if (obj instanceof Map) {\n      obj = obj.get(pieces[i], {\n        getters: false\n      });\n    } else if (i === l - 1) {\n      obj = utils.getValue(pieces[i], obj);\n    } else {\n      obj = obj[pieces[i]];\n    }\n  }\n  if (adhoc) {\n    obj = adhoc.cast(obj);\n  }\n  if (schema != null && options.getters !== false) {\n    obj = schema.applyGetters(obj, this);\n  } else if (this.$__schema.nested[path] && options.virtuals) {\n    // Might need to apply virtuals if this is a nested path\n    return applyVirtuals(this, clone(obj) || {}, {\n      path: path\n    });\n  }\n  return obj;\n};\n\n/*!\n * ignore\n */\n\nDocument.prototype[getSymbol] = Document.prototype.get;\nDocument.prototype.$get = Document.prototype.get;\n\n/**\n * Returns the schematype for the given `path`.\n *\n * @param {String} path\n * @return {SchemaPath}\n * @api private\n * @method $__path\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.$__path = function (path) {\n  const adhocs = this.$__.adhocPaths;\n  const adhocType = adhocs && adhocs.hasOwnProperty(path) ? adhocs[path] : null;\n  if (adhocType) {\n    return adhocType;\n  }\n  return this.$__schema.path(path);\n};\n\n/**\n * Marks the path as having pending changes to write to the db.\n *\n * _Very helpful when using [Mixed](https://mongoosejs.com/docs/schematypes.html#mixed) types._\n *\n * #### Example:\n *\n *     doc.mixed.type = 'changed';\n *     doc.markModified('mixed.type');\n *     doc.save() // changes to mixed.type are now persisted\n *\n * @param {String} path the path to mark modified\n * @param {Document} [scope] the scope to run validators with\n * @api public\n */\n\nDocument.prototype.markModified = function (path, scope) {\n  this.$__saveInitialState(path);\n  this.$__.activePaths.modify(path);\n  if (scope != null && !this.$isSubdocument) {\n    this.$__.pathsToScopes = this.$__pathsToScopes || {};\n    this.$__.pathsToScopes[path] = scope;\n  }\n};\n\n/*!\n * ignore\n */\n\nDocument.prototype.$__saveInitialState = function $__saveInitialState(path) {\n  const savedState = this.$__.savedState;\n  const savedStatePath = path;\n  if (savedState != null) {\n    const firstDot = savedStatePath.indexOf('.');\n    const topLevelPath = firstDot === -1 ? savedStatePath : savedStatePath.slice(0, firstDot);\n    if (!savedState.hasOwnProperty(topLevelPath)) {\n      savedState[topLevelPath] = clone(this.$__getValue(topLevelPath));\n    }\n  }\n};\n\n/**\n * Clears the modified state on the specified path.\n *\n * #### Example:\n *\n *     doc.foo = 'bar';\n *     doc.unmarkModified('foo');\n *     doc.save(); // changes to foo will not be persisted\n *\n * @param {String} path the path to unmark modified\n * @api public\n */\n\nDocument.prototype.unmarkModified = function (path) {\n  this.$__.activePaths.init(path);\n  if (this.$__.pathsToScopes != null) {\n    delete this.$__.pathsToScopes[path];\n  }\n};\n\n/**\n * Don't run validation on this path or persist changes to this path.\n *\n * #### Example:\n *\n *     doc.foo = null;\n *     doc.$ignore('foo');\n *     doc.save(); // changes to foo will not be persisted and validators won't be run\n *\n * @memberOf Document\n * @instance\n * @method $ignore\n * @param {String} path the path to ignore\n * @api public\n */\n\nDocument.prototype.$ignore = function (path) {\n  this.$__.activePaths.ignore(path);\n};\n\n/**\n * Returns the list of paths that have been directly modified. A direct\n * modified path is a path that you explicitly set, whether via `doc.foo = 'bar'`,\n * `Object.assign(doc, { foo: 'bar' })`, or `doc.set('foo', 'bar')`.\n *\n * A path `a` may be in `modifiedPaths()` but not in `directModifiedPaths()`\n * because a child of `a` was directly modified.\n *\n * #### Example:\n *\n *     const schema = new Schema({ foo: String, nested: { bar: String } });\n *     const Model = mongoose.model('Test', schema);\n *     await Model.create({ foo: 'original', nested: { bar: 'original' } });\n *\n *     const doc = await Model.findOne();\n *     doc.nested.bar = 'modified';\n *     doc.directModifiedPaths(); // ['nested.bar']\n *     doc.modifiedPaths(); // ['nested', 'nested.bar']\n *\n * @return {String[]}\n * @api public\n */\n\nDocument.prototype.directModifiedPaths = function () {\n  return Object.keys(this.$__.activePaths.getStatePaths('modify'));\n};\n\n/**\n * Returns true if the given path is nullish or only contains empty objects.\n * Useful for determining whether this subdoc will get stripped out by the\n * [minimize option](https://mongoosejs.com/docs/guide.html#minimize).\n *\n * #### Example:\n *\n *     const schema = new Schema({ nested: { foo: String } });\n *     const Model = mongoose.model('Test', schema);\n *     const doc = new Model({});\n *     doc.$isEmpty('nested'); // true\n *     doc.nested.$isEmpty(); // true\n *\n *     doc.nested.foo = 'bar';\n *     doc.$isEmpty('nested'); // false\n *     doc.nested.$isEmpty(); // false\n *\n * @param {String} [path]\n * @memberOf Document\n * @instance\n * @api public\n * @method $isEmpty\n * @return {Boolean}\n */\n\nDocument.prototype.$isEmpty = function (path) {\n  const isEmptyOptions = {\n    minimize: true,\n    virtuals: false,\n    getters: false,\n    transform: false\n  };\n  if (arguments.length !== 0) {\n    const v = this.$get(path);\n    if (v == null) {\n      return true;\n    }\n    if (typeof v !== 'object') {\n      return false;\n    }\n    if (utils.isPOJO(v)) {\n      return _isEmpty(v);\n    }\n    return Object.keys(v.toObject(isEmptyOptions)).length === 0;\n  }\n  return Object.keys(this.toObject(isEmptyOptions)).length === 0;\n};\n\n/*!\n * ignore\n */\n\nfunction _isEmpty(v) {\n  if (v == null) {\n    return true;\n  }\n  if (typeof v !== 'object' || Array.isArray(v)) {\n    return false;\n  }\n  for (const key of Object.keys(v)) {\n    if (!_isEmpty(v[key])) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Returns the list of paths that have been modified.\n *\n * @param {Object} [options]\n * @param {Boolean} [options.includeChildren=false] if true, returns children of modified paths as well. For example, if false, the list of modified paths for `doc.colors = { primary: 'blue' };` will **not** contain `colors.primary`. If true, `modifiedPaths()` will return an array that contains `colors.primary`.\n * @return {String[]}\n * @api public\n */\n\nDocument.prototype.modifiedPaths = function (options) {\n  options = options || {};\n  const directModifiedPaths = Object.keys(this.$__.activePaths.getStatePaths('modify'));\n  const result = new Set();\n  let i = 0;\n  let j = 0;\n  const len = directModifiedPaths.length;\n  for (i = 0; i < len; ++i) {\n    const path = directModifiedPaths[i];\n    const parts = parentPaths(path);\n    const pLen = parts.length;\n    for (j = 0; j < pLen; ++j) {\n      result.add(parts[j]);\n    }\n    if (!options.includeChildren) {\n      continue;\n    }\n    let ii = 0;\n    let cur = this.$get(path);\n    if (typeof cur === 'object' && cur !== null) {\n      if (cur._doc) {\n        cur = cur._doc;\n      }\n      const len = cur.length;\n      if (Array.isArray(cur)) {\n        for (ii = 0; ii < len; ++ii) {\n          const subPath = path + '.' + ii;\n          if (!result.has(subPath)) {\n            result.add(subPath);\n            if (cur[ii] != null && cur[ii].$__) {\n              const modified = cur[ii].modifiedPaths();\n              let iii = 0;\n              const iiiLen = modified.length;\n              for (iii = 0; iii < iiiLen; ++iii) {\n                result.add(subPath + '.' + modified[iii]);\n              }\n            }\n          }\n        }\n      } else {\n        const keys = Object.keys(cur);\n        let ii = 0;\n        const len = keys.length;\n        for (ii = 0; ii < len; ++ii) {\n          result.add(path + '.' + keys[ii]);\n        }\n      }\n    }\n  }\n  return Array.from(result);\n};\nDocument.prototype[documentModifiedPaths] = Document.prototype.modifiedPaths;\n\n/**\n * Returns true if any of the given paths is modified, else false. If no arguments, returns `true` if any path\n * in this document is modified.\n *\n * If `path` is given, checks if a path or any full path containing `path` as part of its path chain has been modified.\n *\n * #### Example:\n *\n *     doc.set('documents.0.title', 'changed');\n *     doc.isModified()                      // true\n *     doc.isModified('documents')           // true\n *     doc.isModified('documents.0.title')   // true\n *     doc.isModified('documents otherProp') // true\n *     doc.isDirectModified('documents')     // false\n *\n * @param {String} [path] optional\n * @param {Object} [options]\n * @param {Boolean} [options.ignoreAtomics=false] If true, doesn't return true if path is underneath an array that was modified with atomic operations like `push()`\n * @return {Boolean}\n * @api public\n */\n\nDocument.prototype.isModified = function (paths, options, modifiedPaths) {\n  if (paths) {\n    const ignoreAtomics = options && options.ignoreAtomics;\n    const directModifiedPathsObj = this.$__.activePaths.states.modify;\n    if (directModifiedPathsObj == null) {\n      return false;\n    }\n    if (typeof paths === 'string') {\n      paths = paths.indexOf(' ') === -1 ? [paths] : paths.split(' ');\n    }\n    for (const path of paths) {\n      if (directModifiedPathsObj[path] != null) {\n        return true;\n      }\n    }\n    const modified = modifiedPaths || this[documentModifiedPaths]();\n    const isModifiedChild = paths.some(function (path) {\n      return !!~modified.indexOf(path);\n    });\n    let directModifiedPaths = Object.keys(directModifiedPathsObj);\n    if (ignoreAtomics) {\n      directModifiedPaths = directModifiedPaths.filter(path => {\n        const value = this.$__getValue(path);\n        if (value != null && value[arrayAtomicsSymbol] != null && value[arrayAtomicsSymbol].$set === undefined) {\n          return false;\n        }\n        return true;\n      });\n    }\n    return isModifiedChild || paths.some(function (path) {\n      return directModifiedPaths.some(function (mod) {\n        return mod === path || path.startsWith(mod + '.');\n      });\n    });\n  }\n  return this.$__.activePaths.some('modify');\n};\n\n/**\n * Alias of [`.isModified`](https://mongoosejs.com/docs/api/document.html#Document.prototype.isModified())\n *\n * @method $isModified\n * @memberOf Document\n * @api public\n */\n\nDocument.prototype.$isModified = Document.prototype.isModified;\nDocument.prototype[documentIsModified] = Document.prototype.isModified;\n\n/**\n * Checks if a path is set to its default.\n *\n * #### Example:\n *\n *     MyModel = mongoose.model('test', { name: { type: String, default: 'Val '} });\n *     const m = new MyModel();\n *     m.$isDefault('name'); // true\n *\n * @memberOf Document\n * @instance\n * @method $isDefault\n * @param {String} [path]\n * @return {Boolean}\n * @api public\n */\n\nDocument.prototype.$isDefault = function (path) {\n  if (path == null) {\n    return this.$__.activePaths.some('default');\n  }\n  if (typeof path === 'string' && path.indexOf(' ') === -1) {\n    return this.$__.activePaths.getStatePaths('default').hasOwnProperty(path);\n  }\n  let paths = path;\n  if (!Array.isArray(paths)) {\n    paths = paths.split(' ');\n  }\n  return paths.some(path => this.$__.activePaths.getStatePaths('default').hasOwnProperty(path));\n};\n\n/**\n * Getter/setter, determines whether the document was removed or not.\n *\n * #### Example:\n *\n *     const product = await product.remove();\n *     product.$isDeleted(); // true\n *     product.remove(); // no-op, doesn't send anything to the db\n *\n *     product.$isDeleted(false);\n *     product.$isDeleted(); // false\n *     product.remove(); // will execute a remove against the db\n *\n *\n * @param {Boolean} [val] optional, overrides whether mongoose thinks the doc is deleted\n * @return {Boolean|Document} whether mongoose thinks this doc is deleted.\n * @method $isDeleted\n * @memberOf Document\n * @instance\n * @api public\n */\n\nDocument.prototype.$isDeleted = function (val) {\n  if (arguments.length === 0) {\n    return !!this.$__.isDeleted;\n  }\n  this.$__.isDeleted = !!val;\n  return this;\n};\n\n/**\n * Returns true if `path` was directly set and modified, else false.\n *\n * #### Example:\n *\n *     doc.set('documents.0.title', 'changed');\n *     doc.isDirectModified('documents.0.title') // true\n *     doc.isDirectModified('documents') // false\n *\n * @param {String|String[]} [path]\n * @return {Boolean}\n * @api public\n */\n\nDocument.prototype.isDirectModified = function (path) {\n  if (path == null) {\n    return this.$__.activePaths.some('modify');\n  }\n  if (typeof path === 'string' && path.indexOf(' ') === -1) {\n    return this.$__.activePaths.getStatePaths('modify').hasOwnProperty(path);\n  }\n  let paths = path;\n  if (!Array.isArray(paths)) {\n    paths = paths.split(' ');\n  }\n  return paths.some(path => this.$__.activePaths.getStatePaths('modify').hasOwnProperty(path));\n};\n\n/**\n * Checks if `path` is in the `init` state, that is, it was set by `Document#init()` and not modified since.\n *\n * @param {String} [path]\n * @return {Boolean}\n * @api public\n */\n\nDocument.prototype.isInit = function (path) {\n  if (path == null) {\n    return this.$__.activePaths.some('init');\n  }\n  if (typeof path === 'string' && path.indexOf(' ') === -1) {\n    return this.$__.activePaths.getStatePaths('init').hasOwnProperty(path);\n  }\n  let paths = path;\n  if (!Array.isArray(paths)) {\n    paths = paths.split(' ');\n  }\n  return paths.some(path => this.$__.activePaths.getStatePaths('init').hasOwnProperty(path));\n};\n\n/**\n * Checks if `path` was selected in the source query which initialized this document.\n *\n * #### Example:\n *\n *     const doc = await Thing.findOne().select('name');\n *     doc.isSelected('name') // true\n *     doc.isSelected('age')  // false\n *\n * @param {String|String[]} path\n * @return {Boolean}\n * @api public\n */\n\nDocument.prototype.isSelected = function isSelected(path) {\n  if (this.$__.selected == null) {\n    return true;\n  }\n  if (!path) {\n    return false;\n  }\n  if (path === '_id') {\n    return this.$__.selected._id !== 0;\n  }\n  if (path.indexOf(' ') !== -1) {\n    path = path.split(' ');\n  }\n  if (Array.isArray(path)) {\n    return path.some(p => this.$__isSelected(p));\n  }\n  const paths = Object.keys(this.$__.selected);\n  let inclusive = null;\n  if (paths.length === 1 && paths[0] === '_id') {\n    // only _id was selected.\n    return this.$__.selected._id === 0;\n  }\n  for (const cur of paths) {\n    if (cur === '_id') {\n      continue;\n    }\n    if (!isDefiningProjection(this.$__.selected[cur])) {\n      continue;\n    }\n    inclusive = !!this.$__.selected[cur];\n    break;\n  }\n  if (inclusive === null) {\n    return true;\n  }\n  if (path in this.$__.selected) {\n    return inclusive;\n  }\n  const pathDot = path + '.';\n  for (const cur of paths) {\n    if (cur === '_id') {\n      continue;\n    }\n    if (cur.startsWith(pathDot)) {\n      return inclusive || cur !== pathDot;\n    }\n    if (pathDot.startsWith(cur + '.')) {\n      return inclusive;\n    }\n  }\n  return !inclusive;\n};\nDocument.prototype.$__isSelected = Document.prototype.isSelected;\n\n/**\n * Checks if `path` was explicitly selected. If no projection, always returns\n * true.\n *\n * #### Example:\n *\n *     Thing.findOne().select('nested.name').exec(function (err, doc) {\n *        doc.isDirectSelected('nested.name') // true\n *        doc.isDirectSelected('nested.otherName') // false\n *        doc.isDirectSelected('nested')  // false\n *     })\n *\n * @param {String} path\n * @return {Boolean}\n * @api public\n */\n\nDocument.prototype.isDirectSelected = function isDirectSelected(path) {\n  if (this.$__.selected == null) {\n    return true;\n  }\n  if (path === '_id') {\n    return this.$__.selected._id !== 0;\n  }\n  if (path.indexOf(' ') !== -1) {\n    path = path.split(' ');\n  }\n  if (Array.isArray(path)) {\n    return path.some(p => this.isDirectSelected(p));\n  }\n  const paths = Object.keys(this.$__.selected);\n  let inclusive = null;\n  if (paths.length === 1 && paths[0] === '_id') {\n    // only _id was selected.\n    return this.$__.selected._id === 0;\n  }\n  for (const cur of paths) {\n    if (cur === '_id') {\n      continue;\n    }\n    if (!isDefiningProjection(this.$__.selected[cur])) {\n      continue;\n    }\n    inclusive = !!this.$__.selected[cur];\n    break;\n  }\n  if (inclusive === null) {\n    return true;\n  }\n  if (this.$__.selected.hasOwnProperty(path)) {\n    return inclusive;\n  }\n  return !inclusive;\n};\n\n/**\n * Executes registered validation rules for this document.\n *\n * #### Note:\n *\n * This method is called `pre` save and if a validation rule is violated, [save](https://mongoosejs.com/docs/api/model.html#Model.prototype.save()) is aborted and the error is thrown.\n *\n * #### Example:\n *\n *     await doc.validate({ validateModifiedOnly: false, pathsToSkip: ['name', 'email']});\n *\n * @param {Array|String} [pathsToValidate] list of paths to validate. If set, Mongoose will validate only the modified paths that are in the given list.\n * @param {Object} [options] internal options\n * @param {Boolean} [options.validateModifiedOnly=false] if `true` mongoose validates only modified paths.\n * @param {Array|string} [options.pathsToSkip] list of paths to skip. If set, Mongoose will validate every modified path that is not in this list.\n * @return {Promise} Returns a Promise.\n * @api public\n */\n\nDocument.prototype.validate = async function validate(pathsToValidate, options) {\n  if (typeof pathsToValidate === 'function' || typeof options === 'function' || typeof arguments[2] === 'function') {\n    throw new MongooseError('Document.prototype.validate() no longer accepts a callback');\n  }\n  let parallelValidate;\n  this.$op = 'validate';\n  if (this.$isSubdocument != null) {\n    // Skip parallel validate check for subdocuments\n  } else if (this.$__.validating) {\n    parallelValidate = new ParallelValidateError(this, {\n      parentStack: options && options.parentStack,\n      conflictStack: this.$__.validating.stack\n    });\n  } else {\n    this.$__.validating = new ParallelValidateError(this, {\n      parentStack: options && options.parentStack\n    });\n  }\n  if (arguments.length === 1) {\n    if (typeof arguments[0] === 'object' && !Array.isArray(arguments[0])) {\n      options = arguments[0];\n      pathsToValidate = null;\n    }\n  }\n  if (options && typeof options.pathsToSkip === 'string') {\n    const isOnePathOnly = options.pathsToSkip.indexOf(' ') === -1;\n    options.pathsToSkip = isOnePathOnly ? [options.pathsToSkip] : options.pathsToSkip.split(' ');\n  }\n  if (parallelValidate != null) {\n    throw parallelValidate;\n  }\n  return new Promise((resolve, reject) => {\n    this.$__validate(pathsToValidate, options, error => {\n      this.$op = null;\n      this.$__.validating = null;\n      if (error != null) {\n        return reject(error);\n      }\n      resolve();\n    });\n  });\n};\n\n/**\n * Alias of [`.validate`](https://mongoosejs.com/docs/api/document.html#Document.prototype.validate())\n *\n * @method $validate\n * @memberOf Document\n * @api public\n */\n\nDocument.prototype.$validate = Document.prototype.validate;\n\n/*!\n * ignore\n */\n\nfunction _evaluateRequiredFunctions(doc) {\n  const requiredFields = Object.keys(doc.$__.activePaths.getStatePaths('require'));\n  let i = 0;\n  const len = requiredFields.length;\n  for (i = 0; i < len; ++i) {\n    const path = requiredFields[i];\n    const p = doc.$__schema.path(path);\n    if (p != null && typeof p.originalRequiredValue === 'function') {\n      doc.$__.cachedRequired = doc.$__.cachedRequired || {};\n      try {\n        doc.$__.cachedRequired[path] = p.originalRequiredValue.call(doc, doc);\n      } catch (err) {\n        doc.invalidate(path, err);\n      }\n    }\n  }\n}\n\n/*!\n * ignore\n */\n\nfunction _getPathsToValidate(doc, pathsToValidate, pathsToSkip) {\n  const doValidateOptions = {};\n  _evaluateRequiredFunctions(doc);\n  // only validate required fields when necessary\n  let paths = new Set(Object.keys(doc.$__.activePaths.getStatePaths('require')).filter(function (path) {\n    if (!doc.$__isSelected(path) && !doc.$isModified(path)) {\n      return false;\n    }\n    if (doc.$__.cachedRequired != null && path in doc.$__.cachedRequired) {\n      return doc.$__.cachedRequired[path];\n    }\n    return true;\n  }));\n  Object.keys(doc.$__.activePaths.getStatePaths('init')).forEach(addToPaths);\n  Object.keys(doc.$__.activePaths.getStatePaths('modify')).forEach(addToPaths);\n  Object.keys(doc.$__.activePaths.getStatePaths('default')).forEach(addToPaths);\n  function addToPaths(p) {\n    paths.add(p);\n  }\n  const subdocs = doc.$getAllSubdocs();\n  const modifiedPaths = doc.modifiedPaths();\n  for (const subdoc of subdocs) {\n    if (subdoc.$basePath) {\n      const fullPathToSubdoc = subdoc.$isSingleNested ? subdoc.$__pathRelativeToParent() : subdoc.$__fullPathWithIndexes();\n\n      // Remove child paths for now, because we'll be validating the whole\n      // subdoc.\n      // The following is a faster take on looping through every path in `paths`\n      // and checking if the path starts with `fullPathToSubdoc` re: gh-13191\n      for (const modifiedPath of subdoc.modifiedPaths()) {\n        paths.delete(fullPathToSubdoc + '.' + modifiedPath);\n      }\n      if (doc.$isModified(fullPathToSubdoc, null, modifiedPaths) && !doc.isDirectModified(fullPathToSubdoc) && !doc.$isDefault(fullPathToSubdoc)) {\n        paths.add(fullPathToSubdoc);\n        if (doc.$__.pathsToScopes == null) {\n          doc.$__.pathsToScopes = {};\n        }\n        doc.$__.pathsToScopes[fullPathToSubdoc] = subdoc.$isDocumentArrayElement ? subdoc.__parentArray : subdoc.$parent();\n        doValidateOptions[fullPathToSubdoc] = {\n          skipSchemaValidators: true\n        };\n        if (subdoc.$isDocumentArrayElement && subdoc.__index != null) {\n          doValidateOptions[fullPathToSubdoc].index = subdoc.__index;\n        }\n      }\n    }\n  }\n  for (const path of paths) {\n    const _pathType = doc.$__schema.path(path);\n    if (!_pathType) {\n      continue;\n    }\n    if (_pathType.$isMongooseDocumentArray) {\n      for (const p of paths) {\n        if (p == null || p.startsWith(_pathType.path + '.')) {\n          paths.delete(p);\n        }\n      }\n    }\n\n    // Optimization: if primitive path with no validators, or array of primitives\n    // with no validators, skip validating this path entirely.\n    if (!_pathType.caster && _pathType.validators.length === 0 && !_pathType.$parentSchemaDocArray) {\n      paths.delete(path);\n    } else if (_pathType.$isMongooseArray && !_pathType.$isMongooseDocumentArray &&\n    // Skip document arrays...\n    !_pathType.$embeddedSchemaType.$isMongooseArray &&\n    // and arrays of arrays\n    _pathType.validators.length === 0 &&\n    // and arrays with top-level validators\n    _pathType.$embeddedSchemaType.validators.length === 0) {\n      paths.delete(path);\n    }\n  }\n  for (const path of paths) {\n    // Single nested paths (paths embedded under single nested subdocs) will\n    // be validated on their own when we call `validate()` on the subdoc itself.\n    // Re: gh-8468\n    if (doc.$__schema.singleNestedPaths.hasOwnProperty(path)) {\n      paths.delete(path);\n      continue;\n    }\n  }\n  if (Array.isArray(pathsToValidate)) {\n    paths = _handlePathsToValidate(paths, pathsToValidate);\n  } else if (Array.isArray(pathsToSkip)) {\n    paths = _handlePathsToSkip(paths, pathsToSkip);\n  }\n\n  // from here on we're not removing items from paths\n\n  // gh-661: if a whole array is modified, make sure to run validation on all\n  // the children as well\n  for (const path of paths) {\n    const _pathType = doc.$__schema.path(path);\n    if (!_pathType) {\n      continue;\n    }\n    if (!_pathType.$isMongooseArray ||\n    // To avoid potential performance issues, skip doc arrays whose children\n    // are not required. `getPositionalPathType()` may be slow, so avoid\n    // it unless we have a case of #6364\n    !Array.isArray(_pathType) && _pathType.$isMongooseDocumentArray && !(_pathType && _pathType.schemaOptions && _pathType.schemaOptions.required)) {\n      continue;\n    }\n\n    // gh-11380: optimization. If the array isn't a document array and there's no validators\n    // on the array type, there's no need to run validation on the individual array elements.\n    if (_pathType.$isMongooseArray && !_pathType.$isMongooseDocumentArray &&\n    // Skip document arrays...\n    !_pathType.$embeddedSchemaType.$isMongooseArray &&\n    // and arrays of arrays\n    _pathType.$embeddedSchemaType.validators.length === 0) {\n      continue;\n    }\n    const val = doc.$__getValue(path);\n    _pushNestedArrayPaths(val, paths, path);\n  }\n  function _pushNestedArrayPaths(val, paths, path) {\n    if (val != null) {\n      const numElements = val.length;\n      for (let j = 0; j < numElements; ++j) {\n        if (Array.isArray(val[j])) {\n          _pushNestedArrayPaths(val[j], paths, path + '.' + j);\n        } else {\n          paths.add(path + '.' + j);\n        }\n      }\n    }\n  }\n  const flattenOptions = {\n    skipArrays: true\n  };\n  for (const pathToCheck of paths) {\n    if (doc.$__schema.nested[pathToCheck]) {\n      let _v = doc.$__getValue(pathToCheck);\n      if (isMongooseObject(_v)) {\n        _v = _v.toObject({\n          transform: false\n        });\n      }\n      const flat = flatten(_v, pathToCheck, flattenOptions, doc.$__schema);\n      Object.keys(flat).forEach(addToPaths);\n    }\n  }\n  for (const path of paths) {\n    const _pathType = doc.$__schema.path(path);\n    if (!_pathType) {\n      continue;\n    }\n\n    // If underneath a document array, may need to re-validate the parent\n    // array re: gh-6818. Do this _after_ adding subpaths, because\n    // we don't want to add every array subpath.\n    if (_pathType.$parentSchemaDocArray && typeof _pathType.$parentSchemaDocArray.path === 'string') {\n      paths.add(_pathType.$parentSchemaDocArray.path);\n    }\n    if (!_pathType.$isSchemaMap) {\n      continue;\n    }\n    const val = doc.$__getValue(path);\n    if (val == null) {\n      continue;\n    }\n    for (const key of val.keys()) {\n      paths.add(path + '.' + key);\n    }\n  }\n  paths = Array.from(paths);\n  return [paths, doValidateOptions];\n}\n\n/*!\n * ignore\n */\n\nDocument.prototype.$__validate = function (pathsToValidate, options, callback) {\n  if (typeof pathsToValidate === 'function') {\n    callback = pathsToValidate;\n    options = null;\n    pathsToValidate = null;\n  } else if (typeof options === 'function') {\n    callback = options;\n    options = null;\n  }\n  const hasValidateModifiedOnlyOption = options && typeof options === 'object' && 'validateModifiedOnly' in options;\n  const pathsToSkip = options && options.pathsToSkip || null;\n  let shouldValidateModifiedOnly;\n  if (hasValidateModifiedOnlyOption) {\n    shouldValidateModifiedOnly = !!options.validateModifiedOnly;\n  } else {\n    shouldValidateModifiedOnly = this.$__schema.options.validateModifiedOnly;\n  }\n  const _this = this;\n  const _complete = () => {\n    let validationError = this.$__.validationError;\n    this.$__.validationError = null;\n    this.$__.validating = null;\n    if (shouldValidateModifiedOnly && validationError != null) {\n      // Remove any validation errors that aren't from modified paths\n      const errors = Object.keys(validationError.errors);\n      for (const errPath of errors) {\n        if (!this.$isModified(errPath)) {\n          delete validationError.errors[errPath];\n        }\n      }\n      if (Object.keys(validationError.errors).length === 0) {\n        validationError = void 0;\n      }\n    }\n    this.$__.cachedRequired = {};\n    this.$emit('validate', _this);\n    this.constructor.emit('validate', _this);\n    if (validationError) {\n      for (const key in validationError.errors) {\n        // Make sure cast errors persist\n        if (!this[documentArrayParent] && validationError.errors[key] instanceof MongooseError.CastError) {\n          this.invalidate(key, validationError.errors[key]);\n        }\n      }\n      return validationError;\n    }\n  };\n\n  // only validate required fields when necessary\n  const pathDetails = _getPathsToValidate(this, pathsToValidate, pathsToSkip);\n  const paths = shouldValidateModifiedOnly ? pathDetails[0].filter(path => this.$isModified(path)) : pathDetails[0];\n  const doValidateOptionsByPath = pathDetails[1];\n  if (typeof pathsToValidate === 'string') {\n    pathsToValidate = pathsToValidate.split(' ');\n  }\n  if (paths.length === 0) {\n    return immediate(function () {\n      const error = _complete();\n      if (error) {\n        return _this.$__schema.s.hooks.execPost('validate:error', _this, [_this], {\n          error: error\n        }, function (error) {\n          callback(error);\n        });\n      }\n      callback(null, _this);\n    });\n  }\n  const validated = {};\n  let total = 0;\n  for (const path of paths) {\n    validatePath(path);\n  }\n  function validatePath(path) {\n    if (path == null || validated[path]) {\n      return;\n    }\n    validated[path] = true;\n    total++;\n    immediate(function () {\n      const schemaType = _this.$__schema.path(path);\n      if (!schemaType) {\n        return --total || complete();\n      }\n\n      // If user marked as invalid or there was a cast error, don't validate\n      if (!_this.$isValid(path)) {\n        --total || complete();\n        return;\n      }\n\n      // If setting a path under a mixed path, avoid using the mixed path validator (gh-10141)\n      if (schemaType[schemaMixedSymbol] != null && path !== schemaType.path) {\n        return --total || complete();\n      }\n      let val = _this.$__getValue(path);\n\n      // If you `populate()` and get back a null value, required validators\n      // shouldn't fail (gh-8018). We should always fall back to the populated\n      // value.\n      let pop;\n      if (pop = _this.$populated(path)) {\n        val = pop;\n      } else if (val != null && val.$__ != null && val.$__.wasPopulated) {\n        // Array paths, like `somearray.1`, do not show up as populated with `$populated()`,\n        // so in that case pull out the document's id\n        val = val._id;\n      }\n      const scope = _this.$__.pathsToScopes != null && path in _this.$__.pathsToScopes ? _this.$__.pathsToScopes[path] : _this;\n      const doValidateOptions = {\n        ...doValidateOptionsByPath[path],\n        path: path,\n        validateModifiedOnly: shouldValidateModifiedOnly\n      };\n      schemaType.doValidate(val, function (err) {\n        if (err) {\n          const isSubdoc = schemaType.$isSingleNested || schemaType.$isArraySubdocument || schemaType.$isMongooseDocumentArray;\n          if (isSubdoc && err instanceof ValidationError) {\n            return --total || complete();\n          }\n          _this.invalidate(path, err, undefined, true);\n        }\n        --total || complete();\n      }, scope, doValidateOptions);\n    });\n  }\n  function complete() {\n    const error = _complete();\n    if (error) {\n      return _this.$__schema.s.hooks.execPost('validate:error', _this, [_this], {\n        error: error\n      }, function (error) {\n        callback(error);\n      });\n    }\n    callback(null, _this);\n  }\n};\n\n/*!\n * ignore\n */\n\nfunction _handlePathsToValidate(paths, pathsToValidate) {\n  const _pathsToValidate = new Set(pathsToValidate);\n  const parentPaths = new Map([]);\n  for (const path of pathsToValidate) {\n    if (path.indexOf('.') === -1) {\n      continue;\n    }\n    const pieces = path.split('.');\n    let cur = pieces[0];\n    for (let i = 1; i < pieces.length; ++i) {\n      // Since we skip subpaths under single nested subdocs to\n      // avoid double validation, we need to add back the\n      // single nested subpath if the user asked for it (gh-8626)\n      parentPaths.set(cur, path);\n      cur = cur + '.' + pieces[i];\n    }\n  }\n  const ret = new Set();\n  for (const path of paths) {\n    if (_pathsToValidate.has(path)) {\n      ret.add(path);\n    } else if (parentPaths.has(path)) {\n      ret.add(parentPaths.get(path));\n    }\n  }\n  return ret;\n}\n\n/*!\n * ignore\n */\n\nfunction _handlePathsToSkip(paths, pathsToSkip) {\n  pathsToSkip = new Set(pathsToSkip);\n  paths = Array.from(paths).filter(p => !pathsToSkip.has(p));\n  return new Set(paths);\n}\n\n/**\n * Executes registered validation rules (skipping asynchronous validators) for this document.\n *\n * #### Note:\n *\n * This method is useful if you need synchronous validation.\n *\n * #### Example:\n *\n *     const err = doc.validateSync();\n *     if (err) {\n *       handleError(err);\n *     } else {\n *       // validation passed\n *     }\n *\n * @param {Array|string} [pathsToValidate] only validate the given paths\n * @param {Object} [options] options for validation\n * @param {Boolean} [options.validateModifiedOnly=false] If `true`, Mongoose will only validate modified paths, as opposed to modified paths and `required` paths.\n * @param {Array|string} [options.pathsToSkip] list of paths to skip. If set, Mongoose will validate every modified path that is not in this list.\n * @return {ValidationError|undefined} ValidationError if there are errors during validation, or undefined if there is no error.\n * @api public\n */\n\nDocument.prototype.validateSync = function (pathsToValidate, options) {\n  const _this = this;\n  if (arguments.length === 1 && typeof arguments[0] === 'object' && !Array.isArray(arguments[0])) {\n    options = arguments[0];\n    pathsToValidate = null;\n  }\n  const hasValidateModifiedOnlyOption = options && typeof options === 'object' && 'validateModifiedOnly' in options;\n  let shouldValidateModifiedOnly;\n  if (hasValidateModifiedOnlyOption) {\n    shouldValidateModifiedOnly = !!options.validateModifiedOnly;\n  } else {\n    shouldValidateModifiedOnly = this.$__schema.options.validateModifiedOnly;\n  }\n  let pathsToSkip = options && options.pathsToSkip;\n  if (typeof pathsToValidate === 'string') {\n    const isOnePathOnly = pathsToValidate.indexOf(' ') === -1;\n    pathsToValidate = isOnePathOnly ? [pathsToValidate] : pathsToValidate.split(' ');\n  } else if (typeof pathsToSkip === 'string' && pathsToSkip.indexOf(' ') !== -1) {\n    pathsToSkip = pathsToSkip.split(' ');\n  }\n\n  // only validate required fields when necessary\n  const pathDetails = _getPathsToValidate(this, pathsToValidate, pathsToSkip);\n  const paths = shouldValidateModifiedOnly ? pathDetails[0].filter(path => this.$isModified(path)) : pathDetails[0];\n  const skipSchemaValidators = pathDetails[1];\n  const validating = {};\n  for (let i = 0, len = paths.length; i < len; ++i) {\n    const path = paths[i];\n    if (validating[path]) {\n      continue;\n    }\n    validating[path] = true;\n    const p = _this.$__schema.path(path);\n    if (!p) {\n      continue;\n    }\n    if (!_this.$isValid(path)) {\n      continue;\n    }\n    const val = _this.$__getValue(path);\n    const err = p.doValidateSync(val, _this, {\n      skipSchemaValidators: skipSchemaValidators[path],\n      path: path,\n      validateModifiedOnly: shouldValidateModifiedOnly\n    });\n    if (err) {\n      const isSubdoc = p.$isSingleNested || p.$isArraySubdocument || p.$isMongooseDocumentArray;\n      if (isSubdoc && err instanceof ValidationError) {\n        continue;\n      }\n      _this.invalidate(path, err, undefined, true);\n    }\n  }\n  const err = _this.$__.validationError;\n  _this.$__.validationError = undefined;\n  _this.$emit('validate', _this);\n  _this.constructor.emit('validate', _this);\n  if (err) {\n    for (const key in err.errors) {\n      // Make sure cast errors persist\n      if (err.errors[key] instanceof MongooseError.CastError) {\n        _this.invalidate(key, err.errors[key]);\n      }\n    }\n  }\n  return err;\n};\n\n/**\n * Marks a path as invalid, causing validation to fail.\n *\n * The `errorMsg` argument will become the message of the `ValidationError`.\n *\n * The `value` argument (if passed) will be available through the `ValidationError.value` property.\n *\n *     doc.invalidate('size', 'must be less than 20', 14);\n *\n *     doc.validate(function (err) {\n *       console.log(err)\n *       // prints\n *       { message: 'Validation failed',\n *         name: 'ValidationError',\n *         errors:\n *          { size:\n *             { message: 'must be less than 20',\n *               name: 'ValidatorError',\n *               path: 'size',\n *               type: 'user defined',\n *               value: 14 } } }\n *     })\n *\n * @param {String} path the field to invalidate. For array elements, use the `array.i.field` syntax, where `i` is the 0-based index in the array.\n * @param {String|Error} err the error which states the reason `path` was invalid\n * @param {Object|String|Number|any} val optional invalid value\n * @param {String} [kind] optional `kind` property for the error\n * @return {ValidationError} the current ValidationError, with all currently invalidated paths\n * @api public\n */\n\nDocument.prototype.invalidate = function (path, err, val, kind) {\n  if (!this.$__.validationError) {\n    this.$__.validationError = new ValidationError(this);\n  }\n  if (this.$__.validationError.errors[path]) {\n    return;\n  }\n  if (!err || typeof err === 'string') {\n    err = new ValidatorError({\n      path: path,\n      message: err,\n      type: kind || 'user defined',\n      value: val\n    });\n  }\n  if (this.$__.validationError === err) {\n    return this.$__.validationError;\n  }\n  this.$__.validationError.addError(path, err);\n  return this.$__.validationError;\n};\n\n/**\n * Marks a path as valid, removing existing validation errors.\n *\n * @param {String} path the field to mark as valid\n * @api public\n * @memberOf Document\n * @instance\n * @method $markValid\n */\n\nDocument.prototype.$markValid = function (path) {\n  if (!this.$__.validationError || !this.$__.validationError.errors[path]) {\n    return;\n  }\n  delete this.$__.validationError.errors[path];\n  if (Object.keys(this.$__.validationError.errors).length === 0) {\n    this.$__.validationError = null;\n  }\n};\n\n/*!\n * ignore\n */\n\nfunction _markValidSubpaths(doc, path) {\n  if (!doc.$__.validationError) {\n    return;\n  }\n  const keys = Object.keys(doc.$__.validationError.errors);\n  for (const key of keys) {\n    if (key.startsWith(path + '.')) {\n      delete doc.$__.validationError.errors[key];\n    }\n  }\n  if (Object.keys(doc.$__.validationError.errors).length === 0) {\n    doc.$__.validationError = null;\n  }\n}\n\n/*!\n * ignore\n */\n\nfunction _checkImmutableSubpaths(subdoc, schematype, priorVal) {\n  const schema = schematype.schema;\n  if (schema == null) {\n    return;\n  }\n  for (const key of Object.keys(schema.paths)) {\n    const path = schema.paths[key];\n    if (path.$immutableSetter == null) {\n      continue;\n    }\n    const oldVal = priorVal == null ? void 0 : priorVal.$__getValue(key);\n    // Calling immutableSetter with `oldVal` even though it expects `newVal`\n    // is intentional. That's because `$immutableSetter` compares its param\n    // to the current value.\n    path.$immutableSetter.call(subdoc, oldVal);\n  }\n}\n\n/**\n * Saves this document by inserting a new document into the database if [document.isNew](https://mongoosejs.com/docs/api/document.html#Document.prototype.isNew()) is `true`,\n * or sends an [updateOne](https://mongoosejs.com/docs/api/document.html#Document.prototype.updateOne()) operation **only** with the modifications to the database, it does not replace the whole document in the latter case.\n *\n * #### Example:\n *\n *     product.sold = Date.now();\n *     product = await product.save();\n *\n * If save is successful, the returned promise will fulfill with the document\n * saved.\n *\n * #### Example:\n *\n *     const newProduct = await product.save();\n *     newProduct === product; // true\n *\n * @param {Object} [options] options optional options\n * @param {Session} [options.session=null] the [session](https://www.mongodb.com/docs/manual/reference/server-sessions/) associated with this save operation. If not specified, defaults to the [document's associated session](https://mongoosejs.com/docs/api/document.html#Document.prototype.$session()).\n * @param {Object} [options.safe] (DEPRECATED) overrides [schema's safe option](https://mongoosejs.com/docs/guide.html#safe). Use the `w` option instead.\n * @param {Boolean} [options.validateBeforeSave] set to false to save without validating.\n * @param {Boolean} [options.validateModifiedOnly=false] If `true`, Mongoose will only validate modified paths, as opposed to modified paths and `required` paths.\n * @param {Number|String} [options.w] set the [write concern](https://www.mongodb.com/docs/manual/reference/write-concern/#w-option). Overrides the [schema-level `writeConcern` option](https://mongoosejs.com/docs/guide.html#writeConcern)\n * @param {Boolean} [options.j] set to true for MongoDB to wait until this `save()` has been [journaled before resolving the returned promise](https://www.mongodb.com/docs/manual/reference/write-concern/#j-option). Overrides the [schema-level `writeConcern` option](https://mongoosejs.com/docs/guide.html#writeConcern)\n * @param {Number} [options.wtimeout] sets a [timeout for the write concern](https://www.mongodb.com/docs/manual/reference/write-concern/#wtimeout). Overrides the [schema-level `writeConcern` option](https://mongoosejs.com/docs/guide.html#writeConcern).\n * @param {Boolean} [options.checkKeys=true] the MongoDB driver prevents you from saving keys that start with '$' or contain '.' by default. Set this option to `false` to skip that check. See [restrictions on field names](https://www.mongodb.com/docs/manual/reference/limits/#Restrictions-on-Field-Names)\n * @param {Boolean} [options.timestamps=true] if `false` and [timestamps](https://mongoosejs.com/docs/guide.html#timestamps) are enabled, skip timestamps for this `save()`.\n * @param {Function} [fn] optional callback\n * @method save\n * @memberOf Document\n * @instance\n * @throws {DocumentNotFoundError} if this [save updates an existing document](https://mongoosejs.com/docs/api/document.html#Document.prototype.isNew()) but the document doesn't exist in the database. For example, you will get this error if the document is [deleted between when you retrieved the document and when you saved it](documents.html#updating).\n * @return {Promise|undefined} Returns undefined if used with callback or a Promise otherwise.\n * @api public\n * @see middleware https://mongoosejs.com/docs/middleware.html\n */\n\n/**\n * Checks if a path is invalid\n *\n * @param {String|String[]} [path] the field to check. If unset will always return \"false\"\n * @method $isValid\n * @memberOf Document\n * @instance\n * @api private\n */\n\nDocument.prototype.$isValid = function (path) {\n  if (this.$__.validationError == null || Object.keys(this.$__.validationError.errors).length === 0) {\n    return true;\n  }\n  if (path == null) {\n    return false;\n  }\n  if (path.indexOf(' ') !== -1) {\n    path = path.split(' ');\n  }\n  if (Array.isArray(path)) {\n    return path.some(p => this.$__.validationError.errors[p] == null);\n  }\n  return this.$__.validationError.errors[path] == null;\n};\n\n/**\n * Resets the internal modified state of this document.\n *\n * @api private\n * @return {Document} this\n * @method $__reset\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.$__reset = function reset() {\n  let _this = this;\n\n  // Skip for subdocuments\n  const subdocs = this.$parent() === this ? this.$getAllSubdocs() : [];\n  const resetArrays = new Set();\n  for (const subdoc of subdocs) {\n    const fullPathWithIndexes = subdoc.$__fullPathWithIndexes();\n    subdoc.$__reset();\n    if (this.isModified(fullPathWithIndexes) || isParentInit(fullPathWithIndexes)) {\n      if (subdoc.$isDocumentArrayElement) {\n        resetArrays.add(subdoc.parentArray());\n      } else {\n        const parent = subdoc.$parent();\n        if (parent === this) {\n          this.$__.activePaths.clearPath(subdoc.$basePath);\n        } else if (parent != null && parent.$isSubdocument) {\n          // If map path underneath subdocument, may end up with a case where\n          // map path is modified but parent still needs to be reset. See gh-10295\n          parent.$__reset();\n        }\n      }\n    }\n  }\n  for (const array of resetArrays) {\n    this.$__.activePaths.clearPath(array.$path());\n    array[arrayAtomicsBackupSymbol] = array[arrayAtomicsSymbol];\n    array[arrayAtomicsSymbol] = {};\n  }\n  function isParentInit(path) {\n    path = path.indexOf('.') === -1 ? [path] : path.split('.');\n    let cur = '';\n    for (let i = 0; i < path.length; ++i) {\n      cur += (cur.length ? '.' : '') + path[i];\n      if (_this.$__.activePaths[cur] === 'init') {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  // clear atomics\n  this.$__dirty().forEach(function (dirt) {\n    const type = dirt.value;\n    if (type && type[arrayAtomicsSymbol]) {\n      type[arrayAtomicsBackupSymbol] = type[arrayAtomicsSymbol];\n      type[arrayAtomicsSymbol] = {};\n    }\n  });\n  this.$__.backup = {};\n  this.$__.backup.activePaths = {\n    modify: Object.assign({}, this.$__.activePaths.getStatePaths('modify')),\n    default: Object.assign({}, this.$__.activePaths.getStatePaths('default'))\n  };\n  this.$__.backup.validationError = this.$__.validationError;\n  this.$__.backup.errors = this.$errors;\n\n  // Clear 'dirty' cache\n  this.$__.activePaths.clear('modify');\n  this.$__.activePaths.clear('default');\n  this.$__.validationError = undefined;\n  this.$errors = undefined;\n  _this = this;\n  this.$__schema.requiredPaths().forEach(function (path) {\n    _this.$__.activePaths.require(path);\n  });\n  return this;\n};\n\n/*!\n * ignore\n */\n\nDocument.prototype.$__undoReset = function $__undoReset() {\n  if (this.$__.backup == null || this.$__.backup.activePaths == null) {\n    return;\n  }\n  this.$__.activePaths.states.modify = this.$__.backup.activePaths.modify;\n  this.$__.activePaths.states.default = this.$__.backup.activePaths.default;\n  this.$__.validationError = this.$__.backup.validationError;\n  this.$errors = this.$__.backup.errors;\n  for (const dirt of this.$__dirty()) {\n    const type = dirt.value;\n    if (type && type[arrayAtomicsSymbol] && type[arrayAtomicsBackupSymbol]) {\n      type[arrayAtomicsSymbol] = type[arrayAtomicsBackupSymbol];\n    }\n  }\n  for (const subdoc of this.$getAllSubdocs()) {\n    subdoc.$__undoReset();\n  }\n};\n\n/**\n * Returns this documents dirty paths / vals.\n *\n * @return {Array}\n * @api private\n * @method $__dirty\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.$__dirty = function () {\n  const _this = this;\n  let all = this.$__.activePaths.map('modify', function (path) {\n    return {\n      path: path,\n      value: _this.$__getValue(path),\n      schema: _this.$__path(path)\n    };\n  });\n\n  // gh-2558: if we had to set a default and the value is not undefined,\n  // we have to save as well\n  all = all.concat(this.$__.activePaths.map('default', function (path) {\n    if (path === '_id' || _this.$__getValue(path) == null) {\n      return;\n    }\n    return {\n      path: path,\n      value: _this.$__getValue(path),\n      schema: _this.$__path(path)\n    };\n  }));\n  const allPaths = new Map(all.filter(el => el != null).map(el => [el.path, el.value]));\n  // Ignore \"foo.a\" if \"foo\" is dirty already.\n  const minimal = [];\n  all.forEach(function (item) {\n    if (!item) {\n      return;\n    }\n    let top = null;\n    const array = parentPaths(item.path);\n    for (let i = 0; i < array.length - 1; i++) {\n      if (allPaths.has(array[i])) {\n        top = allPaths.get(array[i]);\n        break;\n      }\n    }\n    if (top == null) {\n      minimal.push(item);\n    } else if (top != null && top[arrayAtomicsSymbol] != null && top.hasAtomics()) {\n      // special case for top level MongooseArrays\n      // the `top` array itself and a sub path of `top` are being set.\n      // the only way to honor all of both modifications is through a $set\n      // of entire array.\n      top[arrayAtomicsSymbol] = {};\n      top[arrayAtomicsSymbol].$set = top;\n    }\n  });\n  return minimal;\n};\n\n/**\n * Assigns/compiles `schema` into this documents prototype.\n *\n * @param {Schema} schema\n * @api private\n * @method $__setSchema\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.$__setSchema = function (schema) {\n  compile(schema.tree, this, undefined, schema.options);\n\n  // Apply default getters if virtual doesn't have any (gh-6262)\n  for (const key of Object.keys(schema.virtuals)) {\n    schema.virtuals[key]._applyDefaultGetters();\n  }\n  if (schema.path('schema') == null) {\n    this.schema = schema;\n  }\n  this.$__schema = schema;\n  this[documentSchemaSymbol] = schema;\n};\n\n/**\n * Get active path that were changed and are arrays\n *\n * @return {Array}\n * @api private\n * @method $__getArrayPathsToValidate\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.$__getArrayPathsToValidate = function () {\n  DocumentArray || (DocumentArray = require('./types/documentArray'));\n\n  // validate all document arrays.\n  return this.$__.activePaths.map('init', 'modify', function (i) {\n    return this.$__getValue(i);\n  }.bind(this)).filter(function (val) {\n    return val && Array.isArray(val) && utils.isMongooseDocumentArray(val) && val.length;\n  }).reduce(function (seed, array) {\n    return seed.concat(array);\n  }, []).filter(function (doc) {\n    return doc;\n  });\n};\n\n/**\n * Get all subdocs (by bfs)\n *\n * @return {Array}\n * @api public\n * @method $getAllSubdocs\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.$getAllSubdocs = function () {\n  DocumentArray || (DocumentArray = require('./types/documentArray'));\n  Embedded = Embedded || require('./types/arraySubdocument');\n  function docReducer(doc, seed, path) {\n    let val = doc;\n    let isNested = false;\n    if (path) {\n      if (doc instanceof Document && doc[documentSchemaSymbol].paths[path]) {\n        val = doc._doc[path];\n      } else if (doc instanceof Document && doc[documentSchemaSymbol].nested[path]) {\n        val = doc._doc[path];\n        isNested = true;\n      } else {\n        val = doc[path];\n      }\n    }\n    if (val instanceof Embedded) {\n      seed.push(val);\n    } else if (val instanceof Map) {\n      seed = Array.from(val.keys()).reduce(function (seed, path) {\n        return docReducer(val.get(path), seed, null);\n      }, seed);\n    } else if (val && !Array.isArray(val) && val.$isSingleNested) {\n      seed = Object.keys(val._doc).reduce(function (seed, path) {\n        return docReducer(val, seed, path);\n      }, seed);\n      seed.push(val);\n    } else if (val && utils.isMongooseDocumentArray(val)) {\n      val.forEach(function _docReduce(doc) {\n        if (!doc || !doc._doc) {\n          return;\n        }\n        seed = Object.keys(doc._doc).reduce(function (seed, path) {\n          return docReducer(doc._doc, seed, path);\n        }, seed);\n        if (doc instanceof Embedded) {\n          seed.push(doc);\n        }\n      });\n    } else if (isNested && val != null) {\n      for (const path of Object.keys(val)) {\n        docReducer(val, seed, path);\n      }\n    }\n    return seed;\n  }\n  const subDocs = [];\n  for (const path of Object.keys(this._doc)) {\n    docReducer(this, subDocs, path);\n  }\n  return subDocs;\n};\n\n/*!\n * Runs queued functions\n */\n\nfunction applyQueue(doc) {\n  const q = doc.$__schema && doc.$__schema.callQueue;\n  if (!q.length) {\n    return;\n  }\n  for (const pair of q) {\n    if (pair[0] !== 'pre' && pair[0] !== 'post' && pair[0] !== 'on') {\n      doc[pair[0]].apply(doc, pair[1]);\n    }\n  }\n}\n\n/*!\n * ignore\n */\n\nDocument.prototype.$__handleReject = function handleReject(err) {\n  // emit on the Model if listening\n  if (this.$listeners('error').length) {\n    this.$emit('error', err);\n  } else if (this.constructor.listeners && this.constructor.listeners('error').length) {\n    this.constructor.emit('error', err);\n  }\n};\n\n/**\n * Internal helper for toObject() and toJSON() that doesn't manipulate options\n *\n * @return {Object}\n * @api private\n * @method $toObject\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.$toObject = function (options, json) {\n  let defaultOptions = {\n    transform: true,\n    flattenDecimals: true\n  };\n  const path = json ? 'toJSON' : 'toObject';\n  const baseOptions = this.constructor && this.constructor.base && this.constructor.base.options && get(this.constructor.base.options, path) || {};\n  const schemaOptions = this.$__schema && this.$__schema.options || {};\n  // merge base default options with Schema's set default options if available.\n  // `clone` is necessary here because `utils.options` directly modifies the second input.\n  defaultOptions = {\n    ...defaultOptions,\n    ...baseOptions,\n    ...schemaOptions[path]\n  };\n\n  // If options do not exist or is not an object, set it to empty object\n  options = utils.isPOJO(options) ? {\n    ...options\n  } : {};\n  options._calledWithOptions = options._calledWithOptions || {\n    ...options\n  };\n  let _minimize;\n  if (options._calledWithOptions.minimize != null) {\n    _minimize = options.minimize;\n  } else if (defaultOptions.minimize != null) {\n    _minimize = defaultOptions.minimize;\n  } else {\n    _minimize = schemaOptions.minimize;\n  }\n  let flattenMaps;\n  if (options._calledWithOptions.flattenMaps != null) {\n    flattenMaps = options.flattenMaps;\n  } else if (defaultOptions.flattenMaps != null) {\n    flattenMaps = defaultOptions.flattenMaps;\n  } else {\n    flattenMaps = schemaOptions.flattenMaps;\n  }\n  let flattenObjectIds;\n  if (options._calledWithOptions.flattenObjectIds != null) {\n    flattenObjectIds = options.flattenObjectIds;\n  } else if (defaultOptions.flattenObjectIds != null) {\n    flattenObjectIds = defaultOptions.flattenObjectIds;\n  } else {\n    flattenObjectIds = schemaOptions.flattenObjectIds;\n  }\n\n  // The original options that will be passed to `clone()`. Important because\n  // `clone()` will recursively call `$toObject()` on embedded docs, so we\n  // need the original options the user passed in, plus `_isNested` and\n  // `_parentOptions` for checking whether we need to depopulate.\n  const cloneOptions = Object.assign({}, options, {\n    _isNested: true,\n    json: json,\n    minimize: _minimize,\n    flattenMaps: flattenMaps,\n    flattenObjectIds: flattenObjectIds,\n    _seen: options && options._seen || new Map()\n  });\n  if (utils.hasUserDefinedProperty(options, 'getters')) {\n    cloneOptions.getters = options.getters;\n  }\n  if (utils.hasUserDefinedProperty(options, 'virtuals')) {\n    cloneOptions.virtuals = options.virtuals;\n  }\n  const depopulate = options.depopulate || options._parentOptions && options._parentOptions.depopulate || false;\n  // _isNested will only be true if this is not the top level document, we\n  // should never depopulate the top-level document\n  if (depopulate && options._isNested && this.$__.wasPopulated) {\n    return clone(this.$__.wasPopulated.value || this._id, cloneOptions);\n  }\n\n  // merge default options with input options.\n  options = {\n    ...defaultOptions,\n    ...options\n  };\n  options._isNested = true;\n  options.json = json;\n  options.minimize = _minimize;\n  cloneOptions._parentOptions = options;\n  cloneOptions._skipSingleNestedGetters = false;\n  const gettersOptions = Object.assign({}, cloneOptions);\n  gettersOptions._skipSingleNestedGetters = true;\n\n  // remember the root transform function\n  // to save it from being overwritten by sub-transform functions\n  const originalTransform = options.transform;\n  let ret = clone(this._doc, cloneOptions) || {};\n  if (options.getters) {\n    applyGetters(this, ret, gettersOptions);\n    if (options.minimize) {\n      ret = minimize(ret) || {};\n    }\n  }\n  if (options.virtuals || options.getters && options.virtuals !== false) {\n    applyVirtuals(this, ret, gettersOptions, options);\n  }\n  if (options.versionKey === false && this.$__schema.options.versionKey) {\n    delete ret[this.$__schema.options.versionKey];\n  }\n  let transform = options.transform;\n\n  // In the case where a subdocument has its own transform function, we need to\n  // check and see if the parent has a transform (options.transform) and if the\n  // child schema has a transform (this.schema.options.toObject) In this case,\n  // we need to adjust options.transform to be the child schema's transform and\n  // not the parent schema's\n  if (transform) {\n    applySchemaTypeTransforms(this, ret);\n  }\n  if (options.useProjection) {\n    omitDeselectedFields(this, ret);\n  }\n  if (transform === true || schemaOptions.toObject && transform) {\n    const opts = options.json ? schemaOptions.toJSON : schemaOptions.toObject;\n    if (opts) {\n      transform = typeof options.transform === 'function' ? options.transform : opts.transform;\n    }\n  } else {\n    options.transform = originalTransform;\n  }\n  if (typeof transform === 'function') {\n    const xformed = transform(this, ret, options);\n    if (typeof xformed !== 'undefined') {\n      ret = xformed;\n    }\n  }\n  return ret;\n};\n\n/**\n * Converts this document into a plain-old JavaScript object ([POJO](https://masteringjs.io/tutorials/fundamentals/pojo)).\n *\n * Buffers are converted to instances of [mongodb.Binary](https://mongodb.github.io/node-mongodb-native/4.9/classes/Binary.html) for proper storage.\n *\n * #### Getters/Virtuals\n *\n * Example of only applying path getters\n *\n *     doc.toObject({ getters: true, virtuals: false })\n *\n * Example of only applying virtual getters\n *\n *     doc.toObject({ virtuals: true })\n *\n * Example of applying both path and virtual getters\n *\n *     doc.toObject({ getters: true })\n *\n * To apply these options to every document of your schema by default, set your [schemas](https://mongoosejs.com/docs/api/schema.html#Schema()) `toObject` option to the same argument.\n *\n *     schema.set('toObject', { virtuals: true })\n *\n * #### Transform:\n *\n * We may need to perform a transformation of the resulting object based on some criteria, say to remove some sensitive information or return a custom object. In this case we set the optional `transform` function.\n *\n * Transform functions receive three arguments\n *\n *     function (doc, ret, options) {}\n *\n * - `doc` The mongoose document which is being converted\n * - `ret` The plain object representation which has been converted\n * - `options` The options in use (either schema options or the options passed inline)\n *\n * #### Example:\n *\n *     // specify the transform schema option\n *     if (!schema.options.toObject) schema.options.toObject = {};\n *     schema.options.toObject.transform = function (doc, ret, options) {\n *       // remove the _id of every document before returning the result\n *       delete ret._id;\n *       return ret;\n *     }\n *\n *     // without the transformation in the schema\n *     doc.toObject(); // { _id: 'anId', name: 'Wreck-it Ralph' }\n *\n *     // with the transformation\n *     doc.toObject(); // { name: 'Wreck-it Ralph' }\n *\n * With transformations we can do a lot more than remove properties. We can even return completely new customized objects:\n *\n *     if (!schema.options.toObject) schema.options.toObject = {};\n *     schema.options.toObject.transform = function (doc, ret, options) {\n *       return { movie: ret.name }\n *     }\n *\n *     // without the transformation in the schema\n *     doc.toObject(); // { _id: 'anId', name: 'Wreck-it Ralph' }\n *\n *     // with the transformation\n *     doc.toObject(); // { movie: 'Wreck-it Ralph' }\n *\n * _Note: if a transform function returns `undefined`, the return value will be ignored._\n *\n * Transformations may also be applied inline, overridding any transform set in the schema options.\n * Any transform function specified in `toObject` options also propagates to any subdocuments.\n *\n *     function deleteId(doc, ret, options) {\n *       delete ret._id;\n *       return ret;\n *     }\n *\n *     const schema = mongoose.Schema({ name: String, docArr: [{ name: String }] });\n *     const TestModel = mongoose.model('Test', schema);\n *\n *     const doc = new TestModel({ name: 'test', docArr: [{ name: 'test' }] });\n *\n *     // pass the transform as an inline option. Deletes `_id` property\n *     // from both the top-level document and the subdocument.\n *     const obj = doc.toObject({ transform: deleteId });\n *     obj._id; // undefined\n *     obj.docArr[0]._id; // undefined\n *\n * If you want to skip transformations, use `transform: false`:\n *\n *     schema.options.toObject.hide = '_id';\n *     schema.options.toObject.transform = function (doc, ret, options) {\n *       if (options.hide) {\n *         options.hide.split(' ').forEach(function (prop) {\n *           delete ret[prop];\n *         });\n *       }\n *       return ret;\n *     }\n *\n *     const doc = new Doc({ _id: 'anId', secret: 47, name: 'Wreck-it Ralph' });\n *     doc.toObject();                                        // { secret: 47, name: 'Wreck-it Ralph' }\n *     doc.toObject({ hide: 'secret _id', transform: false });// { _id: 'anId', secret: 47, name: 'Wreck-it Ralph' }\n *     doc.toObject({ hide: 'secret _id', transform: true }); // { name: 'Wreck-it Ralph' }\n *\n * If you pass a transform in `toObject()` options, Mongoose will apply the transform\n * to [subdocuments](https://mongoosejs.com/docs/subdocs.html) in addition to the top-level document.\n * Similarly, `transform: false` skips transforms for all subdocuments.\n * Note that this behavior is different for transforms defined in the schema:\n * if you define a transform in `schema.options.toObject.transform`, that transform\n * will **not** apply to subdocuments.\n *\n *     const memberSchema = new Schema({ name: String, email: String });\n *     const groupSchema = new Schema({ members: [memberSchema], name: String, email });\n *     const Group = mongoose.model('Group', groupSchema);\n *\n *     const doc = new Group({\n *       name: 'Engineering',\n *       email: 'dev@mongoosejs.io',\n *       members: [{ name: 'Val', email: 'val@mongoosejs.io' }]\n *     });\n *\n *     // Removes `email` from both top-level document **and** array elements\n *     // { name: 'Engineering', members: [{ name: 'Val' }] }\n *     doc.toObject({ transform: (doc, ret) => { delete ret.email; return ret; } });\n *\n * Transforms, like all of these options, are also available for `toJSON`. See [this guide to `JSON.stringify()`](https://thecodebarbarian.com/the-80-20-guide-to-json-stringify-in-javascript.html) to learn why `toJSON()` and `toObject()` are separate functions.\n *\n * See [schema options](https://mongoosejs.com/docs/guide.html#toObject) for some more details.\n *\n * _During save, no custom options are applied to the document before being sent to the database._\n *\n * @param {Object} [options]\n * @param {Boolean} [options.getters=false] if true, apply all getters, including virtuals\n * @param {Boolean|Object} [options.virtuals=false] if true, apply virtuals, including aliases. Use `{ getters: true, virtuals: false }` to just apply getters, not virtuals. An object of the form `{ pathsToSkip: ['someVirtual'] }` may also be used to omit specific virtuals.\n * @param {Boolean} [options.aliases=true] if `options.virtuals = true`, you can set `options.aliases = false` to skip applying aliases. This option is a no-op if `options.virtuals = false`.\n * @param {Boolean} [options.minimize=true] if true, omit any empty objects from the output\n * @param {Function|null} [options.transform=null] if set, mongoose will call this function to allow you to transform the returned object\n * @param {Boolean} [options.depopulate=false] if true, replace any conventionally populated paths with the original id in the output. Has no affect on virtual populated paths.\n * @param {Boolean} [options.versionKey=true] if false, exclude the version key (`__v` by default) from the output\n * @param {Boolean} [options.flattenMaps=false] if true, convert Maps to POJOs. Useful if you want to `JSON.stringify()` the result of `toObject()`.\n * @param {Boolean} [options.flattenObjectIds=false] if true, convert any ObjectIds in the result to 24 character hex strings.\n * @param {Boolean} [options.useProjection=false] - If true, omits fields that are excluded in this document's projection. Unless you specified a projection, this will omit any field that has `select: false` in the schema.\n * @return {Object} js object (not a POJO)\n * @see mongodb.Binary https://mongodb.github.io/node-mongodb-native/4.9/classes/Binary.html\n * @api public\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.toObject = function (options) {\n  return this.$toObject(options);\n};\n\n/*!\n * Applies virtuals properties to `json`.\n */\n\nfunction applyVirtuals(self, json, options, toObjectOptions) {\n  const schema = self.$__schema;\n  const paths = Object.keys(schema.virtuals);\n  let i = paths.length;\n  const numPaths = i;\n  let path;\n  let assignPath;\n  let cur = self._doc;\n  let v;\n  const aliases = typeof (toObjectOptions && toObjectOptions.aliases) === 'boolean' ? toObjectOptions.aliases : true;\n  let virtualsToApply = null;\n  if (Array.isArray(options.virtuals)) {\n    virtualsToApply = new Set(options.virtuals);\n  } else if (options.virtuals && options.virtuals.pathsToSkip) {\n    virtualsToApply = new Set(paths);\n    for (let i = 0; i < options.virtuals.pathsToSkip.length; i++) {\n      if (virtualsToApply.has(options.virtuals.pathsToSkip[i])) {\n        virtualsToApply.delete(options.virtuals.pathsToSkip[i]);\n      }\n    }\n  }\n  if (!cur) {\n    return json;\n  }\n  options = options || {};\n  for (i = 0; i < numPaths; ++i) {\n    path = paths[i];\n    if (virtualsToApply != null && !virtualsToApply.has(path)) {\n      continue;\n    }\n\n    // Allow skipping aliases with `toObject({ virtuals: true, aliases: false })`\n    if (!aliases && schema.aliases.hasOwnProperty(path)) {\n      continue;\n    }\n\n    // We may be applying virtuals to a nested object, for example if calling\n    // `doc.nestedProp.toJSON()`. If so, the path we assign to, `assignPath`,\n    // will be a trailing substring of the `path`.\n    assignPath = path;\n    if (options.path != null) {\n      if (!path.startsWith(options.path + '.')) {\n        continue;\n      }\n      assignPath = path.substring(options.path.length + 1);\n    }\n    const parts = assignPath.split('.');\n    v = clone(self.get(path), options);\n    if (v === void 0) {\n      continue;\n    }\n    const plen = parts.length;\n    cur = json;\n    for (let j = 0; j < plen - 1; ++j) {\n      cur[parts[j]] = cur[parts[j]] || {};\n      cur = cur[parts[j]];\n    }\n    cur[parts[plen - 1]] = v;\n  }\n  return json;\n}\n\n/**\n * Applies virtuals properties to `json`.\n *\n * @param {Document} self\n * @param {Object} json\n * @param {Object} [options]\n * @return {Object} `json`\n * @api private\n */\n\nfunction applyGetters(self, json, options) {\n  const schema = self.$__schema;\n  const paths = Object.keys(schema.paths);\n  let i = paths.length;\n  let path;\n  let cur = self._doc;\n  let v;\n  if (!cur) {\n    return json;\n  }\n  while (i--) {\n    path = paths[i];\n    const parts = path.split('.');\n    const plen = parts.length;\n    const last = plen - 1;\n    let branch = json;\n    let part;\n    cur = self._doc;\n    if (!self.$__isSelected(path)) {\n      continue;\n    }\n    for (let ii = 0; ii < plen; ++ii) {\n      part = parts[ii];\n      v = cur[part];\n      if (ii === last) {\n        const val = self.$get(path);\n        branch[part] = clone(val, options);\n        if (Array.isArray(branch[part]) && schema.paths[path].$embeddedSchemaType) {\n          for (let i = 0; i < branch[part].length; ++i) {\n            branch[part][i] = schema.paths[path].$embeddedSchemaType.applyGetters(branch[part][i], self);\n          }\n        }\n      } else if (v == null) {\n        if (part in cur) {\n          branch[part] = v;\n        }\n        break;\n      } else {\n        branch = branch[part] || (branch[part] = {});\n      }\n      cur = v;\n    }\n  }\n  return json;\n}\n\n/**\n * Applies schema type transforms to `json`.\n *\n * @param {Document} self\n * @param {Object} json\n * @return {Object} `json`\n * @api private\n */\n\nfunction applySchemaTypeTransforms(self, json) {\n  const schema = self.$__schema;\n  const paths = Object.keys(schema.paths || {});\n  const cur = self._doc;\n  if (!cur) {\n    return json;\n  }\n  for (const path of paths) {\n    const schematype = schema.paths[path];\n    if (typeof schematype.options.transform === 'function') {\n      const val = self.$get(path);\n      if (val === undefined) {\n        continue;\n      }\n      const transformedValue = schematype.options.transform.call(self, val);\n      throwErrorIfPromise(path, transformedValue);\n      utils.setValue(path, transformedValue, json);\n    } else if (schematype.$embeddedSchemaType != null && typeof schematype.$embeddedSchemaType.options.transform === 'function') {\n      const val = self.$get(path);\n      if (val === undefined) {\n        continue;\n      }\n      const vals = [].concat(val);\n      const transform = schematype.$embeddedSchemaType.options.transform;\n      for (let i = 0; i < vals.length; ++i) {\n        const transformedValue = transform.call(self, vals[i]);\n        vals[i] = transformedValue;\n        throwErrorIfPromise(path, transformedValue);\n      }\n      json[path] = vals;\n    }\n  }\n  return json;\n}\nfunction throwErrorIfPromise(path, transformedValue) {\n  if (isPromise(transformedValue)) {\n    throw new Error('`transform` function must be synchronous, but the transform on path `' + path + '` returned a promise.');\n  }\n}\n\n/*!\n * ignore\n */\n\nfunction omitDeselectedFields(self, json) {\n  const schema = self.$__schema;\n  const paths = Object.keys(schema.paths || {});\n  const cur = self._doc;\n  if (!cur) {\n    return json;\n  }\n  let selected = self.$__.selected;\n  if (selected === void 0) {\n    selected = {};\n    queryhelpers.applyPaths(selected, schema);\n  }\n  if (selected == null || Object.keys(selected).length === 0) {\n    return json;\n  }\n  for (const path of paths) {\n    if (selected[path] != null && !selected[path]) {\n      delete json[path];\n    }\n  }\n  return json;\n}\n\n/**\n * The return value of this method is used in calls to [`JSON.stringify(doc)`](https://thecodebarbarian.com/the-80-20-guide-to-json-stringify-in-javascript#the-tojson-function).\n *\n * This method accepts the same options as [Document#toObject](https://mongoosejs.com/docs/api/document.html#Document.prototype.toObject()). To apply the options to every document of your schema by default, set your [schemas](https://mongoosejs.com/docs/api/schema.html#Schema()) `toJSON` option to the same argument.\n *\n *     schema.set('toJSON', { virtuals: true });\n *\n * There is one difference between `toJSON()` and `toObject()` options.\n * When you call `toJSON()`, the [`flattenMaps` option](https://mongoosejs.com/docs/api/document.html#Document.prototype.toObject()) defaults to `true`, because `JSON.stringify()` doesn't convert maps to objects by default.\n * When you call `toObject()`, the `flattenMaps` option is `false` by default.\n *\n * See [schema options](https://mongoosejs.com/docs/guide.html#toJSON) for more information on setting `toJSON` option defaults.\n *\n * @param {Object} options\n * @param {Boolean} [options.flattenMaps=true] if true, convert Maps to [POJOs](https://masteringjs.io/tutorials/fundamentals/pojo). Useful if you want to `JSON.stringify()` the result.\n * @param {Boolean} [options.flattenObjectIds=false] if true, convert any ObjectIds in the result to 24 character hex strings.\n * @return {Object}\n * @see Document#toObject https://mongoosejs.com/docs/api/document.html#Document.prototype.toObject()\n * @see JSON.stringify() in JavaScript https://thecodebarbarian.com/the-80-20-guide-to-json-stringify-in-javascript.html\n * @api public\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.toJSON = function (options) {\n  return this.$toObject(options, true);\n};\n\n/*!\n * ignore\n */\n\nDocument.prototype.ownerDocument = function () {\n  return this;\n};\n\n/**\n * If this document is a subdocument or populated document, returns the document's\n * parent. Returns the original document if there is no parent.\n *\n * @return {Document}\n * @api public\n * @method parent\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.parent = function () {\n  if (this.$isSubdocument || this.$__.wasPopulated) {\n    return this.$__.parent;\n  }\n  return this;\n};\n\n/**\n * Alias for [`parent()`](https://mongoosejs.com/docs/api/document.html#Document.prototype.parent()). If this document is a subdocument or populated\n * document, returns the document's parent. Returns `undefined` otherwise.\n *\n * @return {Document}\n * @api public\n * @method $parent\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.$parent = Document.prototype.parent;\n\n/**\n * Helper for console.log\n *\n * @return {String}\n * @api public\n * @method inspect\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.inspect = function (options) {\n  const isPOJO = utils.isPOJO(options);\n  let opts;\n  if (isPOJO) {\n    opts = options;\n    opts.minimize = false;\n  }\n  const ret = arguments.length > 0 ? this.toObject(opts) : this.toObject();\n  if (ret == null) {\n    // If `toObject()` returns null, `this` is still an object, so if `inspect()`\n    // prints out null this can cause some serious confusion. See gh-7942.\n    return 'MongooseDocument { ' + ret + ' }';\n  }\n  return ret;\n};\nif (inspect.custom) {\n  // Avoid Node deprecation warning DEP0079\n  Document.prototype[inspect.custom] = Document.prototype.inspect;\n}\n\n/**\n * Helper for console.log\n *\n * @return {String}\n * @api public\n * @method toString\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.toString = function () {\n  const ret = this.inspect();\n  if (typeof ret === 'string') {\n    return ret;\n  }\n  return inspect(ret);\n};\n\n/**\n * Returns true if this document is equal to another document.\n *\n * Documents are considered equal when they have matching `_id`s, unless neither\n * document has an `_id`, in which case this function falls back to using\n * `deepEqual()`.\n *\n * @param {Document} [doc] a document to compare. If falsy, will always return \"false\".\n * @return {Boolean}\n * @api public\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.equals = function (doc) {\n  if (!doc) {\n    return false;\n  }\n  const tid = this.$__getValue('_id');\n  const docid = doc.$__ != null ? doc.$__getValue('_id') : doc;\n  if (!tid && !docid) {\n    return deepEqual(this, doc);\n  }\n  return tid && tid.equals ? tid.equals(docid) : tid === docid;\n};\n\n/**\n * Populates paths on an existing document.\n *\n * #### Example:\n *\n *     // Given a document, `populate()` lets you pull in referenced docs\n *     await doc.populate([\n *       'stories',\n *       { path: 'fans', sort: { name: -1 } }\n *     ]);\n *     doc.populated('stories'); // Array of ObjectIds\n *     doc.stories[0].title; // 'Casino Royale'\n *     doc.populated('fans'); // Array of ObjectIds\n *\n *     // If the referenced doc has been deleted, `populate()` will\n *     // remove that entry from the array.\n *     await Story.delete({ title: 'Casino Royale' });\n *     await doc.populate('stories'); // Empty array\n *\n *     // You can also pass additional query options to `populate()`,\n *     // like projections:\n *     await doc.populate('fans', '-email');\n *     doc.fans[0].email // undefined because of 2nd param `select`\n *\n * @param {String|Object|Array} path either the path to populate or an object specifying all parameters, or either an array of those\n * @param {Object|String} [select] Field selection for the population query\n * @param {Model} [model] The model you wish to use for population. If not specified, populate will look up the model by the name in the Schema's `ref` field.\n * @param {Object} [match] Conditions for the population query\n * @param {Object} [options] Options for the population query (sort, etc)\n * @param {String} [options.path=null] The path to populate.\n * @param {string|PopulateOptions} [options.populate=null] Recursively populate paths in the populated documents. See [deep populate docs](https://mongoosejs.com/docs/populate.html#deep-populate).\n * @param {boolean} [options.retainNullValues=false] by default, Mongoose removes null and undefined values from populated arrays. Use this option to make `populate()` retain `null` and `undefined` array entries.\n * @param {boolean} [options.getters=false] if true, Mongoose will call any getters defined on the `localField`. By default, Mongoose gets the raw value of `localField`. For example, you would need to set this option to `true` if you wanted to [add a `lowercase` getter to your `localField`](https://mongoosejs.com/docs/schematypes.html#schematype-options).\n * @param {boolean} [options.clone=false] When you do `BlogPost.find().populate('author')`, blog posts with the same author will share 1 copy of an `author` doc. Enable this option to make Mongoose clone populated docs before assigning them.\n * @param {Object|Function} [options.match=null] Add an additional filter to the populate query. Can be a filter object containing [MongoDB query syntax](https://www.mongodb.com/docs/manual/tutorial/query-documents/), or a function that returns a filter object.\n * @param {Function} [options.transform=null] Function that Mongoose will call on every populated document that allows you to transform the populated document.\n * @param {Object} [options.options=null] Additional options like `limit` and `lean`.\n * @param {Function} [callback] Callback\n * @see population https://mongoosejs.com/docs/populate.html\n * @see Query#select https://mongoosejs.com/docs/api/query.html#Query.prototype.select()\n * @see Model.populate https://mongoosejs.com/docs/api/model.html#Model.populate()\n * @memberOf Document\n * @instance\n * @return {Promise|null} Returns a Promise if no `callback` is given.\n * @api public\n */\n\nDocument.prototype.populate = async function populate() {\n  const pop = {};\n  const args = [...arguments];\n  if (typeof args[args.length - 1] === 'function') {\n    throw new MongooseError('Document.prototype.populate() no longer accepts a callback');\n  }\n  if (args.length !== 0) {\n    // use hash to remove duplicate paths\n    const res = utils.populate.apply(null, args);\n    for (const populateOptions of res) {\n      pop[populateOptions.path] = populateOptions;\n    }\n  }\n  const paths = utils.object.vals(pop);\n  let topLevelModel = this.constructor;\n  if (this.$__isNested) {\n    topLevelModel = this.$__[scopeSymbol].constructor;\n    const nestedPath = this.$__.nestedPath;\n    paths.forEach(function (populateOptions) {\n      populateOptions.path = nestedPath + '.' + populateOptions.path;\n    });\n  }\n\n  // Use `$session()` by default if the document has an associated session\n  // See gh-6754\n  if (this.$session() != null) {\n    const session = this.$session();\n    paths.forEach(path => {\n      if (path.options == null) {\n        path.options = {\n          session: session\n        };\n        return;\n      }\n      if (!('session' in path.options)) {\n        path.options.session = session;\n      }\n    });\n  }\n  paths.forEach(p => {\n    p._localModel = topLevelModel;\n  });\n  return topLevelModel.populate(this, paths);\n};\n\n/**\n * Gets all populated documents associated with this document.\n *\n * @api public\n * @return {Document[]} array of populated documents. Empty array if there are no populated documents associated with this document.\n * @memberOf Document\n * @method $getPopulatedDocs\n * @instance\n */\n\nDocument.prototype.$getPopulatedDocs = function $getPopulatedDocs() {\n  let keys = [];\n  if (this.$__.populated != null) {\n    keys = keys.concat(Object.keys(this.$__.populated));\n  }\n  let result = [];\n  for (const key of keys) {\n    const value = this.$get(key);\n    if (Array.isArray(value)) {\n      result = result.concat(value);\n    } else if (value instanceof Document) {\n      result.push(value);\n    }\n  }\n  return result;\n};\n\n/**\n * Gets _id(s) used during population of the given `path`.\n *\n * #### Example:\n *\n *     const doc = await Model.findOne().populate('author');\n *\n *     console.log(doc.author.name); // Dr.Seuss\n *     console.log(doc.populated('author')); // '5144cf8050f071d979c118a7'\n *\n * If the path was not populated, returns `undefined`.\n *\n * @param {String} path\n * @param {Any} [val]\n * @param {Object} [options]\n * @return {Array|ObjectId|Number|Buffer|String|undefined}\n * @memberOf Document\n * @instance\n * @api public\n */\n\nDocument.prototype.populated = function (path, val, options) {\n  // val and options are internal\n  if (val == null || val === true) {\n    if (!this.$__.populated) {\n      return undefined;\n    }\n    if (typeof path !== 'string') {\n      return undefined;\n    }\n\n    // Map paths can be populated with either `path.$*` or just `path`\n    const _path = path.endsWith('.$*') ? path.replace(/\\.\\$\\*$/, '') : path;\n    const v = this.$__.populated[_path];\n    if (v) {\n      return val === true ? v : v.value;\n    }\n    return undefined;\n  }\n  this.$__.populated || (this.$__.populated = {});\n  this.$__.populated[path] = {\n    value: val,\n    options: options\n  };\n\n  // If this was a nested populate, make sure each populated doc knows\n  // about its populated children (gh-7685)\n  const pieces = path.split('.');\n  for (let i = 0; i < pieces.length - 1; ++i) {\n    const subpath = pieces.slice(0, i + 1).join('.');\n    const subdoc = this.$get(subpath);\n    if (subdoc != null && subdoc.$__ != null && this.$populated(subpath)) {\n      const rest = pieces.slice(i + 1).join('.');\n      subdoc.$populated(rest, val, options);\n      // No need to continue because the above recursion should take care of\n      // marking the rest of the docs as populated\n      break;\n    }\n  }\n  return val;\n};\n\n/**\n * Alias of [`.populated`](https://mongoosejs.com/docs/api/document.html#Document.prototype.populated()).\n *\n * @method $populated\n * @memberOf Document\n * @api public\n */\n\nDocument.prototype.$populated = Document.prototype.populated;\n\n/**\n * Throws an error if a given path is not populated\n *\n * #### Example:\n *\n *     const doc = await Model.findOne().populate('author');\n *\n *     doc.$assertPopulated('author'); // does not throw\n *     doc.$assertPopulated('other path'); // throws an error\n *\n *     // Manually populate and assert in one call. The following does\n *     // `doc.$set({ likes })` before asserting.\n *     doc.$assertPopulated('likes', { likes });\n *\n *\n * @param {String|String[]} path path or array of paths to check. `$assertPopulated` throws if any of the given paths is not populated.\n * @param {Object} [values] optional values to `$set()`. Convenient if you want to manually populate a path and assert that the path was populated in 1 call.\n * @return {Document} this\n * @memberOf Document\n * @method $assertPopulated\n * @instance\n * @api public\n */\n\nDocument.prototype.$assertPopulated = function $assertPopulated(path, values) {\n  if (Array.isArray(path)) {\n    path.forEach(p => this.$assertPopulated(p, values));\n    return this;\n  }\n  if (arguments.length > 1) {\n    this.$set(values);\n  }\n  if (!this.$populated(path)) {\n    throw new MongooseError(`Expected path \"${path}\" to be populated`);\n  }\n  return this;\n};\n\n/**\n * Takes a populated field and returns it to its unpopulated state.\n *\n * #### Example:\n *\n *     Model.findOne().populate('author').exec(function (err, doc) {\n *       console.log(doc.author.name); // Dr.Seuss\n *       console.log(doc.depopulate('author'));\n *       console.log(doc.author); // '5144cf8050f071d979c118a7'\n *     })\n *\n * If the path was not provided, then all populated fields are returned to their unpopulated state.\n *\n * @param {String|String[]} [path] Specific Path to depopulate. If unset, will depopulate all paths on the Document. Or multiple space-delimited paths.\n * @return {Document} this\n * @see Document.populate https://mongoosejs.com/docs/api/document.html#Document.prototype.populate()\n * @api public\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.depopulate = function (path) {\n  if (typeof path === 'string') {\n    path = path.indexOf(' ') === -1 ? [path] : path.split(' ');\n  }\n  let populatedIds;\n  const virtualKeys = this.$$populatedVirtuals ? Object.keys(this.$$populatedVirtuals) : [];\n  const populated = this.$__ && this.$__.populated || {};\n  if (arguments.length === 0) {\n    // Depopulate all\n    for (const virtualKey of virtualKeys) {\n      delete this.$$populatedVirtuals[virtualKey];\n      delete this._doc[virtualKey];\n      delete populated[virtualKey];\n    }\n    const keys = Object.keys(populated);\n    for (const key of keys) {\n      populatedIds = this.$populated(key);\n      if (!populatedIds) {\n        continue;\n      }\n      delete populated[key];\n      utils.setValue(key, populatedIds, this._doc);\n    }\n    return this;\n  }\n  for (const singlePath of path) {\n    populatedIds = this.$populated(singlePath);\n    delete populated[singlePath];\n    if (virtualKeys.indexOf(singlePath) !== -1) {\n      delete this.$$populatedVirtuals[singlePath];\n      delete this._doc[singlePath];\n    } else if (populatedIds) {\n      utils.setValue(singlePath, populatedIds, this._doc);\n    }\n  }\n  return this;\n};\n\n/**\n * Returns the full path to this document.\n *\n * @param {String} [path]\n * @return {String}\n * @api private\n * @method $__fullPath\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.$__fullPath = function (path) {\n  // overridden in SubDocuments\n  return path || '';\n};\n\n/**\n * Returns the changes that happened to the document\n * in the format that will be sent to MongoDB.\n *\n * #### Example:\n *\n *     const userSchema = new Schema({\n *       name: String,\n *       age: Number,\n *       country: String\n *     });\n *     const User = mongoose.model('User', userSchema);\n *     const user = await User.create({\n *       name: 'Hafez',\n *       age: 25,\n *       country: 'Egypt'\n *     });\n *\n *     // returns an empty object, no changes happened yet\n *     user.getChanges(); // { }\n *\n *     user.country = undefined;\n *     user.age = 26;\n *\n *     user.getChanges(); // { $set: { age: 26 }, { $unset: { country: 1 } } }\n *\n *     await user.save();\n *\n *     user.getChanges(); // { }\n *\n * Modifying the object that `getChanges()` returns does not affect the document's\n * change tracking state. Even if you `delete user.getChanges().$set`, Mongoose\n * will still send a `$set` to the server.\n *\n * @return {Object}\n * @api public\n * @method getChanges\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.getChanges = function () {\n  const delta = this.$__delta();\n  const changes = delta ? delta[1] : {};\n  return changes;\n};\n\n/**\n * Returns a copy of this document with a deep clone of `_doc` and `$__`.\n *\n * @return {Document} a copy of this document\n * @api public\n * @method $clone\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.$clone = function () {\n  const Model = this.constructor;\n  const clonedDoc = new Model();\n  clonedDoc.$isNew = this.$isNew;\n  if (this._doc) {\n    clonedDoc._doc = clone(this._doc, {\n      retainDocuments: true\n    });\n  }\n  if (this.$__) {\n    const Cache = this.$__.constructor;\n    const clonedCache = new Cache();\n    for (const key of Object.getOwnPropertyNames(this.$__)) {\n      if (key === 'activePaths') {\n        continue;\n      }\n      clonedCache[key] = clone(this.$__[key]);\n    }\n    Object.assign(clonedCache.activePaths, clone({\n      ...this.$__.activePaths\n    }));\n    clonedDoc.$__ = clonedCache;\n  }\n  return clonedDoc;\n};\n\n/*!\n * Module exports.\n */\n\nDocument.ValidationError = ValidationError;\nmodule.exports = exports = Document;","map":{"version":3,"names":["EventEmitter","require","InternalCache","MongooseError","MixedSchema","ObjectExpectedError","ObjectParameterError","ParallelValidateError","Schema","StrictModeError","ValidationError","ValidatorError","$__hasIncludedChildren","applyDefaults","cleanModifiedSubpaths","clone","compile","defineKey","flatten","get","getEmbeddedDiscriminatorPath","getKeysInSchemaOrder","getSubdocumentStrictValue","handleSpreadDoc","immediate","isDefiningProjection","isExclusive","inspect","internalToObjectOptions","markArraySubdocsPopulated","minimize","mpath","queryhelpers","utils","isPromise","deepEqual","isMongooseObject","arrayAtomicsBackupSymbol","arrayAtomicsSymbol","documentArrayParent","documentIsModified","documentModifiedPaths","documentSchemaSymbol","getSymbol","populateModelSymbol","scopeSymbol","schemaMixedSymbol","parentPaths","getDeepestSubdocumentForPath","sessionNewDocuments","DocumentArray","MongooseArray","Embedded","specialProperties","Document","obj","fields","skipId","options","Object","assign","$__schema","_schema","isObject","instanceOfSchema","$__setSchema","arguments","$__","isNew","$isNew","priorDoc","defaults","undefined","schema","strictMode","strict","requiredPaths","path","activePaths","exclude","isPOJO","keys","length","selected","hasIncludedChildren","_doc","$__buildDoc","$__original_set","$set","willInit","skipDefaults","_this","forEach","key","tree","methods","virtuals","startsWith","prop","subprops","prototype","applyQueue","$isMongooseDocumentPrototype","defineProperty","set","value","$errors","each","emitterFn","emitter","setMaxListeners","apply","constructor","i","configurable","enumerable","locals","v","writable","id","op","$applyDefaultsToNested","val","doc","paths","plen","pathPieces","indexOf","split","curPath","p","type","pieces","splitPath","slice","len","defaultValue","cur","j","piece","def","getDefault","err","invalidate","filter","includes","ii","last","doc_","included","toBSON","toObject","init","opts","fn","$__init","$init","_id","populated","String","item","isVirtual","$populated","getValue","_docs","_childDocs","child","parent","$emit","emit","self","prefix","schemaType","index","docSchema","_init","$isRootDiscriminator","$__isSelected","hasOwnProperty","hydratedPopulatedDocs","_castNullish","wasPopulated","setters","overrideInit","applySetters","cast","e","message","reason","$isModified","updateOne","callback","query","pre","queryPreUpdateOne","cb","_middleware","execPre","post","queryPostUpdateOne","execPost","$session","session","exec","replaceOne","args","unshift","hasEnded","$isSubdocument","subdocs","$getAllSubdocs","$timestamps","timestamps","currentValue","overwrite","Array","from","Set","concat","versionKey","discriminatorKey","merge","adhoc","constructing","adhocs","pathtype","userSpecifiedStrict","adhocPaths","interpretAsType","$__isNested","_skipMinimizeTopLevel","pathName","pathType","valForKey","isNonBuiltinObject","_skipMarkModified","$get","typeOnly","transform","orderedDoc","orderedKeys","parts","subdocStrict","priorVal","$__getValue","CastError","wasModified","hasInitialVal","savedState","initialVal","$__setValue","unmarkModified","markModified","aliases","mixed","subpath","join","$isSchemaMap","$__schemaType","virtualpath","$__path","pathToMark","getters","$__set","$isSingleNested","$isMongooseArray","_markValidSubpaths","shouldSet","refMatches","model","ref","modelName","baseModelName","refPath","didPopulate","unpopulatedValue","popOpts","typeKey","isArray","_isManuallyPopulatedArray","map","setterContext","singleNestedPaths","overwriteImmutable","$isMongooseDocumentArray","populatedPaths","populatedPath","_checkImmutableSubpaths","$markValid","isImmutableError","$originalErrorPath","instance","savedStatePath","ownerDocument","fullPath","$__saveInitialState","isInTransaction","transaction","isModifiedWithinTransaction","has","modifiedPaths","isDirectModified","el","$__shouldModify","getStatePaths","shouldModify","primitiveAtomics","isMongooseArray","_registerAtomic","isMongooseDocumentArray","__parentArray","l","next","Map","isMap","$inc","valToSet","valToInc","setValue","noDottedPath","applyGetters","virtual","hasDot","nested","applyVirtuals","adhocType","scope","modify","pathsToScopes","$__pathsToScopes","firstDot","topLevelPath","$ignore","ignore","directModifiedPaths","$isEmpty","isEmptyOptions","_isEmpty","result","pLen","add","includeChildren","subPath","modified","iii","iiiLen","isModified","ignoreAtomics","directModifiedPathsObj","states","isModifiedChild","some","mod","$isDefault","$isDeleted","isDeleted","isInit","isSelected","inclusive","pathDot","isDirectSelected","validate","pathsToValidate","parallelValidate","$op","validating","parentStack","conflictStack","stack","pathsToSkip","isOnePathOnly","Promise","resolve","reject","$__validate","error","$validate","_evaluateRequiredFunctions","requiredFields","originalRequiredValue","cachedRequired","call","_getPathsToValidate","doValidateOptions","addToPaths","subdoc","$basePath","fullPathToSubdoc","$__pathRelativeToParent","$__fullPathWithIndexes","modifiedPath","delete","$isDocumentArrayElement","$parent","skipSchemaValidators","__index","_pathType","caster","validators","$parentSchemaDocArray","$embeddedSchemaType","_handlePathsToValidate","_handlePathsToSkip","schemaOptions","required","_pushNestedArrayPaths","numElements","flattenOptions","skipArrays","pathToCheck","_v","flat","hasValidateModifiedOnlyOption","shouldValidateModifiedOnly","validateModifiedOnly","_complete","validationError","errors","errPath","pathDetails","doValidateOptionsByPath","s","hooks","validated","total","validatePath","complete","$isValid","pop","doValidate","isSubdoc","$isArraySubdocument","_pathsToValidate","ret","validateSync","doValidateSync","kind","addError","schematype","$immutableSetter","oldVal","$__reset","reset","resetArrays","fullPathWithIndexes","isParentInit","parentArray","clearPath","array","$path","$__dirty","dirt","backup","default","clear","$__undoReset","all","allPaths","minimal","top","push","hasAtomics","_applyDefaultGetters","$__getArrayPathsToValidate","bind","reduce","seed","docReducer","isNested","_docReduce","subDocs","q","callQueue","pair","$__handleReject","handleReject","$listeners","listeners","$toObject","json","defaultOptions","flattenDecimals","baseOptions","base","_calledWithOptions","_minimize","flattenMaps","flattenObjectIds","cloneOptions","_isNested","_seen","hasUserDefinedProperty","depopulate","_parentOptions","_skipSingleNestedGetters","gettersOptions","originalTransform","applySchemaTypeTransforms","useProjection","omitDeselectedFields","toJSON","xformed","toObjectOptions","numPaths","assignPath","virtualsToApply","substring","branch","part","transformedValue","throwErrorIfPromise","vals","Error","applyPaths","custom","toString","equals","tid","docid","populate","res","populateOptions","object","topLevelModel","nestedPath","_localModel","$getPopulatedDocs","_path","endsWith","replace","rest","$assertPopulated","values","populatedIds","virtualKeys","$$populatedVirtuals","virtualKey","singlePath","$__fullPath","getChanges","delta","$__delta","changes","$clone","Model","clonedDoc","retainDocuments","Cache","clonedCache","getOwnPropertyNames","module","exports"],"sources":["C:/Users/lrmir/OneDrive/Desktop/cs35L/newFridayz/Fridayz/frontend/node_modules/mongoose/lib/document.js"],"sourcesContent":["'use strict';\n\n/*!\n * Module dependencies.\n */\n\nconst EventEmitter = require('events').EventEmitter;\nconst InternalCache = require('./internal');\nconst MongooseError = require('./error/index');\nconst MixedSchema = require('./schema/mixed');\nconst ObjectExpectedError = require('./error/objectExpected');\nconst ObjectParameterError = require('./error/objectParameter');\nconst ParallelValidateError = require('./error/parallelValidate');\nconst Schema = require('./schema');\nconst StrictModeError = require('./error/strict');\nconst ValidationError = require('./error/validation');\nconst ValidatorError = require('./error/validator');\nconst $__hasIncludedChildren = require('./helpers/projection/hasIncludedChildren');\nconst applyDefaults = require('./helpers/document/applyDefaults');\nconst cleanModifiedSubpaths = require('./helpers/document/cleanModifiedSubpaths');\nconst clone = require('./helpers/clone');\nconst compile = require('./helpers/document/compile').compile;\nconst defineKey = require('./helpers/document/compile').defineKey;\nconst flatten = require('./helpers/common').flatten;\nconst get = require('./helpers/get');\nconst getEmbeddedDiscriminatorPath = require('./helpers/document/getEmbeddedDiscriminatorPath');\nconst getKeysInSchemaOrder = require('./helpers/schema/getKeysInSchemaOrder');\nconst getSubdocumentStrictValue = require('./helpers/schema/getSubdocumentStrictValue');\nconst handleSpreadDoc = require('./helpers/document/handleSpreadDoc');\nconst immediate = require('./helpers/immediate');\nconst isDefiningProjection = require('./helpers/projection/isDefiningProjection');\nconst isExclusive = require('./helpers/projection/isExclusive');\nconst inspect = require('util').inspect;\nconst internalToObjectOptions = require('./options').internalToObjectOptions;\nconst markArraySubdocsPopulated = require('./helpers/populate/markArraySubdocsPopulated');\nconst minimize = require('./helpers/minimize');\nconst mpath = require('mpath');\nconst queryhelpers = require('./queryHelpers');\nconst utils = require('./utils');\nconst isPromise = require('./helpers/isPromise');\n\nconst deepEqual = utils.deepEqual;\nconst isMongooseObject = utils.isMongooseObject;\n\nconst arrayAtomicsBackupSymbol = require('./helpers/symbols').arrayAtomicsBackupSymbol;\nconst arrayAtomicsSymbol = require('./helpers/symbols').arrayAtomicsSymbol;\nconst documentArrayParent = require('./helpers/symbols').documentArrayParent;\nconst documentIsModified = require('./helpers/symbols').documentIsModified;\nconst documentModifiedPaths = require('./helpers/symbols').documentModifiedPaths;\nconst documentSchemaSymbol = require('./helpers/symbols').documentSchemaSymbol;\nconst getSymbol = require('./helpers/symbols').getSymbol;\nconst populateModelSymbol = require('./helpers/symbols').populateModelSymbol;\nconst scopeSymbol = require('./helpers/symbols').scopeSymbol;\nconst schemaMixedSymbol = require('./schema/symbols').schemaMixedSymbol;\nconst parentPaths = require('./helpers/path/parentPaths');\nconst getDeepestSubdocumentForPath = require('./helpers/document/getDeepestSubdocumentForPath');\nconst sessionNewDocuments = require('./helpers/symbols').sessionNewDocuments;\n\nlet DocumentArray;\nlet MongooseArray;\nlet Embedded;\n\nconst specialProperties = utils.specialProperties;\n\n/**\n * The core Mongoose document constructor. You should not call this directly,\n * the Mongoose [Model constructor](./api/model.html#Model) calls this for you.\n *\n * @param {Object} obj the values to set\n * @param {Object} [fields] optional object containing the fields which were selected in the query returning this document and any populated paths data\n * @param {Object} [options] various configuration options for the document\n * @param {Boolean} [options.defaults=true] if `false`, skip applying default values to this document.\n * @inherits NodeJS EventEmitter https://nodejs.org/api/events.html#class-eventemitter\n * @event `init`: Emitted on a document after it has been retrieved from the db and fully hydrated by Mongoose.\n * @event `save`: Emitted when the document is successfully saved\n * @api private\n */\n\nfunction Document(obj, fields, skipId, options) {\n  if (typeof skipId === 'object' && skipId != null) {\n    options = skipId;\n    skipId = options.skipId;\n  }\n  options = Object.assign({}, options);\n\n  // Support `browserDocument.js` syntax\n  if (this.$__schema == null) {\n    const _schema = utils.isObject(fields) && !fields.instanceOfSchema ?\n      new Schema(fields) :\n      fields;\n    this.$__setSchema(_schema);\n    fields = skipId;\n    skipId = options;\n    options = arguments[4] || {};\n  }\n\n  this.$__ = new InternalCache();\n\n  // Avoid setting `isNew` to `true`, because it is `true` by default\n  if (options.isNew != null && options.isNew !== true) {\n    this.$isNew = options.isNew;\n  }\n\n  if (options.priorDoc != null) {\n    this.$__.priorDoc = options.priorDoc;\n  }\n\n  if (skipId) {\n    this.$__.skipId = skipId;\n  }\n\n  if (obj != null && typeof obj !== 'object') {\n    throw new ObjectParameterError(obj, 'obj', 'Document');\n  }\n\n  let defaults = true;\n  if (options.defaults !== undefined) {\n    this.$__.defaults = options.defaults;\n    defaults = options.defaults;\n  }\n\n  const schema = this.$__schema;\n\n  if (typeof fields === 'boolean' || fields === 'throw') {\n    if (fields !== true) {\n      this.$__.strictMode = fields;\n    }\n    fields = undefined;\n  } else if (schema.options.strict !== true) {\n    this.$__.strictMode = schema.options.strict;\n  }\n\n  const requiredPaths = schema.requiredPaths(true);\n  for (const path of requiredPaths) {\n    this.$__.activePaths.require(path);\n  }\n\n  let exclude = null;\n\n  // determine if this doc is a result of a query with\n  // excluded fields\n  if (utils.isPOJO(fields) && Object.keys(fields).length > 0) {\n    exclude = isExclusive(fields);\n    this.$__.selected = fields;\n    this.$__.exclude = exclude;\n  }\n\n  const hasIncludedChildren = exclude === false && fields ?\n    $__hasIncludedChildren(fields) :\n    null;\n\n  if (this._doc == null) {\n    this.$__buildDoc(obj, fields, skipId, exclude, hasIncludedChildren, false);\n\n    // By default, defaults get applied **before** setting initial values\n    // Re: gh-6155\n    if (defaults) {\n      applyDefaults(this, fields, exclude, hasIncludedChildren, true, null);\n    }\n  }\n  if (obj) {\n    // Skip set hooks\n    if (this.$__original_set) {\n      this.$__original_set(obj, undefined, true, options);\n    } else {\n      this.$set(obj, undefined, true, options);\n    }\n\n    if (obj instanceof Document) {\n      this.$isNew = obj.$isNew;\n    }\n  }\n\n  // Function defaults get applied **after** setting initial values so they\n  // see the full doc rather than an empty one, unless they opt out.\n  // Re: gh-3781, gh-6155\n  if (options.willInit && defaults) {\n    if (options.skipDefaults) {\n      this.$__.skipDefaults = options.skipDefaults;\n    }\n  } else if (defaults) {\n    applyDefaults(this, fields, exclude, hasIncludedChildren, false, options.skipDefaults);\n  }\n\n  if (!this.$__.strictMode && obj) {\n    const _this = this;\n    const keys = Object.keys(this._doc);\n\n    keys.forEach(function(key) {\n      // Avoid methods, virtuals, existing fields, and `$` keys. The latter is to avoid overwriting\n      // Mongoose internals.\n      if (!(key in schema.tree) && !(key in schema.methods) && !(key in schema.virtuals) && !key.startsWith('$')) {\n        defineKey({ prop: key, subprops: null, prototype: _this });\n      }\n    });\n  }\n\n  applyQueue(this);\n}\n\nDocument.prototype.$isMongooseDocumentPrototype = true;\n\n/**\n * Boolean flag specifying if the document is new. If you create a document\n * using `new`, this document will be considered \"new\". `$isNew` is how\n * Mongoose determines whether `save()` should use `insertOne()` to create\n * a new document or `updateOne()` to update an existing document.\n *\n * #### Example:\n *\n *     const user = new User({ name: 'John Smith' });\n *     user.$isNew; // true\n *\n *     await user.save(); // Sends an `insertOne` to MongoDB\n *\n * On the other hand, if you load an existing document from the database\n * using `findOne()` or another [query operation](https://mongoosejs.com/docs/queries.html),\n * `$isNew` will be false.\n *\n * #### Example:\n *\n *     const user = await User.findOne({ name: 'John Smith' });\n *     user.$isNew; // false\n *\n * Mongoose sets `$isNew` to `false` immediately after `save()` succeeds.\n * That means Mongoose sets `$isNew` to false **before** `post('save')` hooks run.\n * In `post('save')` hooks, `$isNew` will be `false` if `save()` succeeded.\n *\n * #### Example:\n *\n *     userSchema.post('save', function() {\n *       this.$isNew; // false\n *     });\n *     await User.create({ name: 'John Smith' });\n *\n * For subdocuments, `$isNew` is true if either the parent has `$isNew` set,\n * or if you create a new subdocument.\n *\n * #### Example:\n *\n *     // Assume `Group` has a document array `users`\n *     const group = await Group.findOne();\n *     group.users[0].$isNew; // false\n *\n *     group.users.push({ name: 'John Smith' });\n *     group.users[1].$isNew; // true\n *\n * @api public\n * @property $isNew\n * @memberOf Document\n * @instance\n */\n\nObject.defineProperty(Document.prototype, 'isNew', {\n  get: function() {\n    return this.$isNew;\n  },\n  set: function(value) {\n    this.$isNew = value;\n  }\n});\n\n/**\n * Hash containing current validation errors.\n *\n * @api public\n * @property errors\n * @memberOf Document\n * @instance\n */\n\nObject.defineProperty(Document.prototype, 'errors', {\n  get: function() {\n    return this.$errors;\n  },\n  set: function(value) {\n    this.$errors = value;\n  }\n});\n\n/*!\n * ignore\n */\n\nDocument.prototype.$isNew = true;\n\n/*!\n * Document exposes the NodeJS event emitter API, so you can use\n * `on`, `once`, etc.\n */\nutils.each(\n  ['on', 'once', 'emit', 'listeners', 'removeListener', 'setMaxListeners',\n    'removeAllListeners', 'addListener'],\n  function(emitterFn) {\n    Document.prototype[emitterFn] = function() {\n      // Delay creating emitter until necessary because emitters take up a lot of memory,\n      // especially for subdocuments.\n      if (!this.$__.emitter) {\n        if (emitterFn === 'emit') {\n          return;\n        }\n        this.$__.emitter = new EventEmitter();\n        this.$__.emitter.setMaxListeners(0);\n      }\n      return this.$__.emitter[emitterFn].apply(this.$__.emitter, arguments);\n    };\n    Document.prototype[`$${emitterFn}`] = Document.prototype[emitterFn];\n  });\n\nDocument.prototype.constructor = Document;\n\nfor (const i in EventEmitter.prototype) {\n  Document[i] = EventEmitter.prototype[i];\n}\n\n/**\n * The document's internal schema.\n *\n * @api private\n * @property schema\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.$__schema;\n\n/**\n * The document's schema.\n *\n * @api public\n * @property schema\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.schema;\n\n/**\n * Empty object that you can use for storing properties on the document. This\n * is handy for passing data to middleware without conflicting with Mongoose\n * internals.\n *\n * #### Example:\n *\n *     schema.pre('save', function() {\n *       // Mongoose will set `isNew` to `false` if `save()` succeeds\n *       this.$locals.wasNew = this.isNew;\n *     });\n *\n *     schema.post('save', function() {\n *       // Prints true if `isNew` was set before `save()`\n *       console.log(this.$locals.wasNew);\n *     });\n *\n * @api public\n * @property $locals\n * @memberOf Document\n * @instance\n */\n\nObject.defineProperty(Document.prototype, '$locals', {\n  configurable: false,\n  enumerable: false,\n  get: function() {\n    if (this.$__.locals == null) {\n      this.$__.locals = {};\n    }\n    return this.$__.locals;\n  },\n  set: function(v) {\n    this.$__.locals = v;\n  }\n});\n\n/**\n * Legacy alias for `$isNew`.\n *\n * @api public\n * @property isNew\n * @memberOf Document\n * @see $isNew https://mongoosejs.com/docs/api/document.html#Document.prototype.$isNew\n * @instance\n */\n\nDocument.prototype.isNew;\n\n/**\n * Set this property to add additional query filters when Mongoose saves this document and `isNew` is false.\n *\n * #### Example:\n *\n *     // Make sure `save()` never updates a soft deleted document.\n *     schema.pre('save', function() {\n *       this.$where = { isDeleted: false };\n *     });\n *\n * @api public\n * @property $where\n * @memberOf Document\n * @instance\n */\n\nObject.defineProperty(Document.prototype, '$where', {\n  configurable: false,\n  enumerable: false,\n  writable: true\n});\n\n/**\n * The string version of this documents _id.\n *\n * #### Note:\n *\n * This getter exists on all documents by default. The getter can be disabled by setting the `id` [option](https://mongoosejs.com/docs/guide.html#id) of its `Schema` to false at construction time.\n *\n *     new Schema({ name: String }, { id: false });\n *\n * @api public\n * @see Schema options https://mongoosejs.com/docs/guide.html#options\n * @property id\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.id;\n\n/**\n * Hash containing current validation $errors.\n *\n * @api public\n * @property $errors\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.$errors;\n\n/**\n * A string containing the current operation that Mongoose is executing\n * on this document. May be `null`, `'save'`, `'validate'`, or `'remove'`.\n *\n * #### Example:\n *\n *     const doc = new Model({ name: 'test' });\n *     doc.$op; // null\n *\n *     const promise = doc.save();\n *     doc.$op; // 'save'\n *\n *     await promise;\n *     doc.$op; // null\n *\n * @api public\n * @property $op\n * @memberOf Document\n * @instance\n */\n\nObject.defineProperty(Document.prototype, '$op', {\n  get: function() {\n    return this.$__.op || null;\n  },\n  set: function(value) {\n    this.$__.op = value;\n  }\n});\n\n/*!\n * ignore\n */\n\nfunction $applyDefaultsToNested(val, path, doc) {\n  if (val == null) {\n    return;\n  }\n\n  const paths = Object.keys(doc.$__schema.paths);\n  const plen = paths.length;\n\n  const pathPieces = path.indexOf('.') === -1 ? [path] : path.split('.');\n\n  for (let i = 0; i < plen; ++i) {\n    let curPath = '';\n    const p = paths[i];\n\n    if (!p.startsWith(path + '.')) {\n      continue;\n    }\n\n    const type = doc.$__schema.paths[p];\n    const pieces = type.splitPath().slice(pathPieces.length);\n    const len = pieces.length;\n\n    if (type.defaultValue === void 0) {\n      continue;\n    }\n\n    let cur = val;\n\n    for (let j = 0; j < len; ++j) {\n      if (cur == null) {\n        break;\n      }\n\n      const piece = pieces[j];\n\n      if (j === len - 1) {\n        if (cur[piece] !== void 0) {\n          break;\n        }\n\n        try {\n          const def = type.getDefault(doc, false);\n          if (def !== void 0) {\n            cur[piece] = def;\n          }\n        } catch (err) {\n          doc.invalidate(path + '.' + curPath, err);\n          break;\n        }\n\n        break;\n      }\n\n      curPath += (!curPath.length ? '' : '.') + piece;\n\n      cur[piece] = cur[piece] || {};\n      cur = cur[piece];\n    }\n  }\n}\n\n/**\n * Builds the default doc structure\n *\n * @param {Object} obj\n * @param {Object} [fields]\n * @param {Boolean} [skipId]\n * @param {Boolean} [exclude]\n * @param {Object} [hasIncludedChildren]\n * @api private\n * @method $__buildDoc\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.$__buildDoc = function(obj, fields, skipId, exclude, hasIncludedChildren) {\n  const doc = {};\n\n  const paths = Object.keys(this.$__schema.paths).\n    // Don't build up any paths that are underneath a map, we don't know\n    // what the keys will be\n    filter(p => !p.includes('$*'));\n  const plen = paths.length;\n  let ii = 0;\n\n  for (; ii < plen; ++ii) {\n    const p = paths[ii];\n\n    if (p === '_id') {\n      if (skipId) {\n        continue;\n      }\n      if (obj && '_id' in obj) {\n        continue;\n      }\n    }\n\n    const path = this.$__schema.paths[p].splitPath();\n    const len = path.length;\n    const last = len - 1;\n    let curPath = '';\n    let doc_ = doc;\n    let included = false;\n\n    for (let i = 0; i < len; ++i) {\n      const piece = path[i];\n\n      if (!curPath.length) {\n        curPath = piece;\n      } else {\n        curPath += '.' + piece;\n      }\n\n      // support excluding intermediary levels\n      if (exclude === true) {\n        if (curPath in fields) {\n          break;\n        }\n      } else if (exclude === false && fields && !included) {\n        if (curPath in fields) {\n          included = true;\n        } else if (!hasIncludedChildren[curPath]) {\n          break;\n        }\n      }\n\n      if (i < last) {\n        doc_ = doc_[piece] || (doc_[piece] = {});\n      }\n    }\n  }\n\n  this._doc = doc;\n};\n\n/*!\n * Converts to POJO when you use the document for querying\n */\n\nDocument.prototype.toBSON = function() {\n  return this.toObject(internalToObjectOptions);\n};\n\n/**\n * Initializes the document without setters or marking anything modified.\n *\n * Called internally after a document is returned from mongodb. Normally,\n * you do **not** need to call this function on your own.\n *\n * This function triggers `init` [middleware](https://mongoosejs.com/docs/middleware.html).\n * Note that `init` hooks are [synchronous](https://mongoosejs.com/docs/middleware.html#synchronous).\n *\n * @param {Object} doc document returned by mongo\n * @param {Object} [opts]\n * @param {Function} [fn]\n * @api public\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.init = function(doc, opts, fn) {\n  if (typeof opts === 'function') {\n    fn = opts;\n    opts = null;\n  }\n\n  this.$__init(doc, opts);\n\n  if (fn) {\n    fn(null, this);\n  }\n\n  return this;\n};\n\n/**\n * Alias for [`.init`](https://mongoosejs.com/docs/api/document.html#Document.prototype.init())\n *\n * @api public\n */\n\nDocument.prototype.$init = function() {\n  return this.constructor.prototype.init.apply(this, arguments);\n};\n\n/**\n * Internal \"init\" function\n *\n * @param {Document} doc\n * @param {Object} [opts]\n * @returns {Document} this\n * @api private\n */\n\nDocument.prototype.$__init = function(doc, opts) {\n  this.$isNew = false;\n  opts = opts || {};\n\n  // handle docs with populated paths\n  // If doc._id is not null or undefined\n  if (doc._id != null && opts.populated && opts.populated.length) {\n    const id = String(doc._id);\n    for (const item of opts.populated) {\n      if (item.isVirtual) {\n        this.$populated(item.path, utils.getValue(item.path, doc), item);\n      } else {\n        this.$populated(item.path, item._docs[id], item);\n      }\n\n      if (item._childDocs == null) {\n        continue;\n      }\n      for (const child of item._childDocs) {\n        if (child == null || child.$__ == null) {\n          continue;\n        }\n        child.$__.parent = this;\n      }\n      item._childDocs = [];\n    }\n  }\n\n  init(this, doc, this._doc, opts);\n\n  markArraySubdocsPopulated(this, opts.populated);\n  this.$emit('init', this);\n  this.constructor.emit('init', this);\n\n  const hasIncludedChildren = this.$__.exclude === false && this.$__.selected ?\n    $__hasIncludedChildren(this.$__.selected) :\n    null;\n\n  applyDefaults(this, this.$__.selected, this.$__.exclude, hasIncludedChildren, false, this.$__.skipDefaults);\n  return this;\n};\n\n/**\n * Init helper.\n *\n * @param {Object} self document instance\n * @param {Object} obj raw mongodb doc\n * @param {Object} doc object we are initializing\n * @param {Object} [opts] Optional Options\n * @param {Boolean} [opts.setters] Call `applySetters` instead of `cast`\n * @param {String} [prefix] Prefix to add to each path\n * @api private\n */\n\nfunction init(self, obj, doc, opts, prefix) {\n  prefix = prefix || '';\n\n  if (obj.$__ != null) {\n    obj = obj._doc;\n  }\n  const keys = Object.keys(obj);\n  const len = keys.length;\n  let schemaType;\n  let path;\n  let i;\n  let index = 0;\n  const strict = self.$__.strictMode;\n  const docSchema = self.$__schema;\n\n  while (index < len) {\n    _init(index++);\n  }\n\n  function _init(index) {\n    i = keys[index];\n    // avoid prototype pollution\n    if (i === '__proto__' || i === 'constructor') {\n      return;\n    }\n    path = prefix + i;\n    schemaType = docSchema.path(path);\n    // Should still work if not a model-level discriminator, but should not be\n    // necessary. This is *only* to catch the case where we queried using the\n    // base model and the discriminated model has a projection\n    if (docSchema.$isRootDiscriminator && !self.$__isSelected(path)) {\n      return;\n    }\n\n    if (!schemaType && utils.isPOJO(obj[i])) {\n      // assume nested object\n      if (!doc[i]) {\n        doc[i] = {};\n        if (!strict && !(i in docSchema.tree) && !(i in docSchema.methods) && !(i in docSchema.virtuals)) {\n          self[i] = doc[i];\n        }\n      }\n      init(self, obj[i], doc[i], opts, path + '.');\n    } else if (!schemaType) {\n      doc[i] = obj[i];\n      if (!strict && !prefix) {\n        self[i] = obj[i];\n      }\n    } else {\n      // Retain order when overwriting defaults\n      if (doc.hasOwnProperty(i) && obj[i] !== void 0 && !opts.hydratedPopulatedDocs) {\n        delete doc[i];\n      }\n      if (obj[i] === null) {\n        doc[i] = schemaType._castNullish(null);\n      } else if (obj[i] !== undefined) {\n        const wasPopulated = obj[i].$__ == null ? null : obj[i].$__.wasPopulated;\n        if ((schemaType && !wasPopulated) && !opts.hydratedPopulatedDocs) {\n          try {\n            if (opts && opts.setters) {\n              // Call applySetters with `init = false` because otherwise setters are a noop\n              const overrideInit = false;\n              doc[i] = schemaType.applySetters(obj[i], self, overrideInit);\n            } else {\n              doc[i] = schemaType.cast(obj[i], self, true);\n            }\n          } catch (e) {\n            self.invalidate(e.path, new ValidatorError({\n              path: e.path,\n              message: e.message,\n              type: 'cast',\n              value: e.value,\n              reason: e\n            }));\n          }\n        } else {\n          doc[i] = obj[i];\n        }\n      }\n      // mark as hydrated\n      if (!self.$isModified(path)) {\n        self.$__.activePaths.init(path);\n      }\n    }\n  }\n}\n\n/**\n * Sends an updateOne command with this document `_id` as the query selector.\n *\n * #### Example:\n *\n *     weirdCar.updateOne({$inc: {wheels:1}}, { w: 1 }, callback);\n *\n * #### Valid options:\n *\n *  - same as in [Model.updateOne](https://mongoosejs.com/docs/api/model.html#Model.updateOne)\n *\n * @see Model.updateOne https://mongoosejs.com/docs/api/model.html#Model.updateOne\n * @param {Object} doc\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.setOptions())\n * @param {Object} [options.lean] if truthy, mongoose will return the document as a plain JavaScript object rather than a mongoose document. See [`Query.lean()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.lean()) and the [Mongoose lean tutorial](https://mongoosejs.com/docs/tutorials/lean.html).\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](https://mongoosejs.com/docs/guide.html#strict)\n * @param {Boolean} [options.timestamps=null] If set to `false` and [schema-level timestamps](https://mongoosejs.com/docs/guide.html#timestamps) are enabled, skip timestamps for this update. Note that this allows you to overwrite timestamps. Does nothing if schema-level timestamps are not set.\n * @param {Function} [callback]\n * @return {Query}\n * @api public\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.updateOne = function updateOne(doc, options, callback) {\n  const query = this.constructor.updateOne({ _id: this._id }, doc, options);\n  const self = this;\n  query.pre(function queryPreUpdateOne(cb) {\n    self.constructor._middleware.execPre('updateOne', self, [self], cb);\n  });\n  query.post(function queryPostUpdateOne(cb) {\n    self.constructor._middleware.execPost('updateOne', self, [self], {}, cb);\n  });\n\n  if (this.$session() != null) {\n    if (!('session' in query.options)) {\n      query.options.session = this.$session();\n    }\n  }\n\n  if (callback != null) {\n    return query.exec(callback);\n  }\n\n  return query;\n};\n\n/**\n * Sends a replaceOne command with this document `_id` as the query selector.\n *\n * #### Valid options:\n *\n *  - same as in [Model.replaceOne](https://mongoosejs.com/docs/api/model.html#Model.replaceOne())\n *\n * @see Model.replaceOne https://mongoosejs.com/docs/api/model.html#Model.replaceOne()\n * @param {Object} doc\n * @param {Object} [options]\n * @param {Function} [callback]\n * @return {Query}\n * @api public\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.replaceOne = function replaceOne() {\n  const args = [...arguments];\n  args.unshift({ _id: this._id });\n  return this.constructor.replaceOne.apply(this.constructor, args);\n};\n\n/**\n * Getter/setter around the session associated with this document. Used to\n * automatically set `session` if you `save()` a doc that you got from a\n * query with an associated session.\n *\n * #### Example:\n *\n *     const session = MyModel.startSession();\n *     const doc = await MyModel.findOne().session(session);\n *     doc.$session() === session; // true\n *     doc.$session(null);\n *     doc.$session() === null; // true\n *\n * If this is a top-level document, setting the session propagates to all child\n * docs.\n *\n * @param {ClientSession} [session] overwrite the current session\n * @return {ClientSession}\n * @method $session\n * @api public\n * @memberOf Document\n */\n\nDocument.prototype.$session = function $session(session) {\n  if (arguments.length === 0) {\n    if (this.$__.session != null && this.$__.session.hasEnded) {\n      this.$__.session = null;\n      return null;\n    }\n    return this.$__.session;\n  }\n\n  if (session != null && session.hasEnded) {\n    throw new MongooseError('Cannot set a document\\'s session to a session that has ended. Make sure you haven\\'t ' +\n      'called `endSession()` on the session you are passing to `$session()`.');\n  }\n\n  if (session == null && this.$__.session == null) {\n    return;\n  }\n\n  this.$__.session = session;\n\n  if (!this.$isSubdocument) {\n    const subdocs = this.$getAllSubdocs();\n    for (const child of subdocs) {\n      child.$session(session);\n    }\n  }\n\n  return session;\n};\n\n/**\n * Getter/setter around whether this document will apply timestamps by\n * default when using `save()` and `bulkSave()`.\n *\n * #### Example:\n *\n *     const TestModel = mongoose.model('Test', new Schema({ name: String }, { timestamps: true }));\n *     const doc = new TestModel({ name: 'John Smith' });\n *\n *     doc.$timestamps(); // true\n *\n *     doc.$timestamps(false);\n *     await doc.save(); // Does **not** apply timestamps\n *\n * @param {Boolean} [value] overwrite the current session\n * @return {Document|boolean|undefined} When used as a getter (no argument), a boolean will be returned indicating the timestamps option state or if unset \"undefined\" will be used, otherwise will return \"this\"\n * @method $timestamps\n * @api public\n * @memberOf Document\n */\n\nDocument.prototype.$timestamps = function $timestamps(value) {\n  if (arguments.length === 0) {\n    if (this.$__.timestamps != null) {\n      return this.$__.timestamps;\n    }\n\n    if (this.$__schema) {\n      return this.$__schema.options.timestamps;\n    }\n\n    return undefined;\n  }\n\n  const currentValue = this.$timestamps();\n  if (value !== currentValue) {\n    this.$__.timestamps = value;\n  }\n\n  return this;\n};\n\n/**\n * Overwrite all values in this document with the values of `obj`, except\n * for immutable properties. Behaves similarly to `set()`, except for it\n * unsets all properties that aren't in `obj`.\n *\n * @param {Object} obj the object to overwrite this document with\n * @method overwrite\n * @memberOf Document\n * @instance\n * @api public\n * @return {Document} this\n */\n\nDocument.prototype.overwrite = function overwrite(obj) {\n  const keys = Array.from(new Set(Object.keys(this._doc).concat(Object.keys(obj))));\n\n  for (const key of keys) {\n    if (key === '_id') {\n      continue;\n    }\n    // Explicitly skip version key\n    if (this.$__schema.options.versionKey && key === this.$__schema.options.versionKey) {\n      continue;\n    }\n    if (this.$__schema.options.discriminatorKey && key === this.$__schema.options.discriminatorKey) {\n      continue;\n    }\n    this.$set(key, obj[key]);\n  }\n\n  return this;\n};\n\n/**\n * Alias for `set()`, used internally to avoid conflicts\n *\n * @param {String|Object} path path or object of key/vals to set\n * @param {Any} val the value to set\n * @param {Schema|String|Number|Buffer|*} [type] optionally specify a type for \"on-the-fly\" attributes\n * @param {Object} [options] optionally specify options that modify the behavior of the set\n * @param {Boolean} [options.merge=false] if true, setting a [nested path](https://mongoosejs.com/docs/subdocs.html#subdocuments-versus-nested-paths) will merge existing values rather than overwrite the whole object. So `doc.set('nested', { a: 1, b: 2 })` becomes `doc.set('nested.a', 1); doc.set('nested.b', 2);`\n * @return {Document} this\n * @method $set\n * @memberOf Document\n * @instance\n * @api public\n */\n\nDocument.prototype.$set = function $set(path, val, type, options) {\n  if (utils.isPOJO(type)) {\n    options = type;\n    type = undefined;\n  }\n\n  const merge = options && options.merge;\n  const adhoc = type && type !== true;\n  const constructing = type === true;\n  let adhocs;\n  let keys;\n  let i = 0;\n  let pathtype;\n  let key;\n  let prefix;\n\n  const userSpecifiedStrict = options && 'strict' in options;\n  let strict = userSpecifiedStrict\n    ? options.strict\n    : this.$__.strictMode;\n\n  if (adhoc) {\n    adhocs = this.$__.adhocPaths || (this.$__.adhocPaths = {});\n    adhocs[path] = this.$__schema.interpretAsType(path, type, this.$__schema.options);\n  }\n\n  if (path == null) {\n    [path, val] = [val, path];\n  } else if (typeof path !== 'string') {\n    // new Document({ key: val })\n    if (path instanceof Document) {\n      if (path.$__isNested) {\n        path = path.toObject();\n      } else {\n        path = path._doc;\n      }\n    }\n    if (path == null) {\n      [path, val] = [val, path];\n    }\n\n    prefix = val ? val + '.' : '';\n    keys = getKeysInSchemaOrder(this.$__schema, path);\n\n    const len = keys.length;\n\n    // `_skipMinimizeTopLevel` is because we may have deleted the top-level\n    // nested key to ensure key order.\n    const _skipMinimizeTopLevel = options && options._skipMinimizeTopLevel || false;\n    if (len === 0 && _skipMinimizeTopLevel) {\n      delete options._skipMinimizeTopLevel;\n      if (val) {\n        this.$set(val, {});\n      }\n      return this;\n    }\n\n    options = Object.assign({}, options, { _skipMinimizeTopLevel: false });\n\n    for (let i = 0; i < len; ++i) {\n      key = keys[i];\n      const pathName = prefix ? prefix + key : key;\n      pathtype = this.$__schema.pathType(pathName);\n      const valForKey = path[key];\n\n      // On initial set, delete any nested keys if we're going to overwrite\n      // them to ensure we keep the user's key order.\n      if (type === true &&\n          !prefix &&\n          valForKey != null &&\n          pathtype === 'nested' &&\n          this._doc[key] != null) {\n        delete this._doc[key];\n      }\n\n      if (utils.isNonBuiltinObject(valForKey) && pathtype === 'nested') {\n        this.$set(pathName, valForKey, constructing, Object.assign({}, options, { _skipMarkModified: true }));\n        $applyDefaultsToNested(this.$get(pathName), pathName, this);\n        continue;\n      } else if (strict) {\n        // Don't overwrite defaults with undefined keys (gh-3981) (gh-9039)\n        if (constructing && valForKey === void 0 &&\n            this.$get(pathName) !== void 0) {\n          continue;\n        }\n\n        if (pathtype === 'adhocOrUndefined') {\n          pathtype = getEmbeddedDiscriminatorPath(this, pathName, { typeOnly: true });\n        }\n\n        if (pathtype === 'real' || pathtype === 'virtual') {\n          this.$set(pathName, valForKey, constructing, options);\n        } else if (pathtype === 'nested' && valForKey instanceof Document) {\n          this.$set(pathName,\n            valForKey.toObject({ transform: false }), constructing, options);\n        } else if (strict === 'throw') {\n          if (pathtype === 'nested') {\n            throw new ObjectExpectedError(key, valForKey);\n          } else {\n            throw new StrictModeError(key);\n          }\n        } else if (pathtype === 'nested' && valForKey == null) {\n          this.$set(pathName, valForKey, constructing, options);\n        }\n      } else if (valForKey !== void 0) {\n        this.$set(pathName, valForKey, constructing, options);\n      }\n    }\n\n    // Ensure all properties are in correct order\n    const orderedDoc = {};\n    const orderedKeys = Object.keys(this.$__schema.tree);\n    for (let i = 0, len = orderedKeys.length; i < len; ++i) {\n      (key = orderedKeys[i]) &&\n      (this._doc.hasOwnProperty(key)) &&\n      (orderedDoc[key] = undefined);\n    }\n    this._doc = Object.assign(orderedDoc, this._doc);\n\n    return this;\n  }\n\n  let pathType = this.$__schema.pathType(path);\n  let parts = null;\n  if (pathType === 'adhocOrUndefined') {\n    parts = path.indexOf('.') === -1 ? [path] : path.split('.');\n    pathType = getEmbeddedDiscriminatorPath(this, parts, { typeOnly: true });\n  }\n  if (pathType === 'adhocOrUndefined' && !userSpecifiedStrict) {\n    // May be path underneath non-strict schema\n    if (parts == null) {\n      parts = path.indexOf('.') === -1 ? [path] : path.split('.');\n    }\n    const subdocStrict = getSubdocumentStrictValue(this.$__schema, parts);\n    if (subdocStrict !== undefined) {\n      strict = subdocStrict;\n    }\n  }\n\n  // Assume this is a Mongoose document that was copied into a POJO using\n  // `Object.assign()` or `{...doc}`\n  val = handleSpreadDoc(val, true);\n\n  // if this doc is being constructed we should not trigger getters\n  const priorVal = (() => {\n    if (this.$__.priorDoc != null) {\n      return this.$__.priorDoc.$__getValue(path);\n    }\n    if (constructing) {\n      return void 0;\n    }\n    return this.$__getValue(path);\n  })();\n\n  if (pathType === 'nested' && val) {\n    if (typeof val === 'object' && val != null) {\n      if (val.$__ != null) {\n        val = val.toObject(internalToObjectOptions);\n      }\n      if (val == null) {\n        this.invalidate(path, new MongooseError.CastError('Object', val, path));\n        return this;\n      }\n      const wasModified = this.$isModified(path);\n      const hasInitialVal = this.$__.savedState != null && this.$__.savedState.hasOwnProperty(path);\n      if (this.$__.savedState != null && !this.$isNew && !this.$__.savedState.hasOwnProperty(path)) {\n        const initialVal = this.$__getValue(path);\n        this.$__.savedState[path] = initialVal;\n\n        const keys = Object.keys(initialVal || {});\n        for (const key of keys) {\n          this.$__.savedState[path + '.' + key] = initialVal[key];\n        }\n      }\n\n      if (!merge) {\n        this.$__setValue(path, null);\n        cleanModifiedSubpaths(this, path);\n      } else {\n        return this.$set(val, path, constructing);\n      }\n\n      const keys = getKeysInSchemaOrder(this.$__schema, val, path);\n\n      this.$__setValue(path, {});\n      for (const key of keys) {\n        this.$set(path + '.' + key, val[key], constructing, { ...options, _skipMarkModified: true });\n      }\n      if (priorVal != null &&\n          (!wasModified || hasInitialVal) &&\n          utils.deepEqual(hasInitialVal ? this.$__.savedState[path] : priorVal, val)) {\n        this.unmarkModified(path);\n      } else {\n        this.markModified(path);\n      }\n      return this;\n    }\n    this.invalidate(path, new MongooseError.CastError('Object', val, path));\n    return this;\n  }\n\n  let schema;\n  if (parts == null) {\n    parts = path.indexOf('.') === -1 ? [path] : path.split('.');\n  }\n\n  // Might need to change path for top-level alias\n  if (typeof this.$__schema.aliases[parts[0]] === 'string') {\n    parts[0] = this.$__schema.aliases[parts[0]];\n  }\n\n  if (pathType === 'adhocOrUndefined' && strict) {\n    // check for roots that are Mixed types\n    let mixed;\n\n    for (i = 0; i < parts.length; ++i) {\n      const subpath = parts.slice(0, i + 1).join('.');\n\n      // If path is underneath a virtual, bypass everything and just set it.\n      if (i + 1 < parts.length && this.$__schema.pathType(subpath) === 'virtual') {\n        mpath.set(path, val, this);\n        return this;\n      }\n\n      schema = this.$__schema.path(subpath);\n      if (schema == null) {\n        continue;\n      }\n\n      if (schema instanceof MixedSchema) {\n        // allow changes to sub paths of mixed types\n        mixed = true;\n        break;\n      } else if (schema.$isSchemaMap && schema.$__schemaType instanceof MixedSchema && i < parts.length - 1) {\n        // Map of mixed and not the last element in the path resolves to mixed\n        mixed = true;\n        schema = schema.$__schemaType;\n        break;\n      }\n    }\n\n    if (schema == null) {\n      // Check for embedded discriminators\n      schema = getEmbeddedDiscriminatorPath(this, path);\n    }\n\n    if (!mixed && !schema) {\n      if (strict === 'throw') {\n        throw new StrictModeError(path);\n      }\n      return this;\n    }\n  } else if (pathType === 'virtual') {\n    schema = this.$__schema.virtualpath(path);\n    schema.applySetters(val, this);\n    return this;\n  } else {\n    schema = this.$__path(path);\n  }\n\n  // gh-4578, if setting a deeply nested path that doesn't exist yet, create it\n  let cur = this._doc;\n  let curPath = '';\n  for (i = 0; i < parts.length - 1; ++i) {\n    cur = cur[parts[i]];\n    curPath += (curPath.length !== 0 ? '.' : '') + parts[i];\n    if (!cur) {\n      this.$set(curPath, {});\n      // Hack re: gh-5800. If nested field is not selected, it probably exists\n      // so `MongoServerError: cannot use the part (nested of nested.num) to\n      // traverse the element ({nested: null})` is not likely. If user gets\n      // that error, its their fault for now. We should reconsider disallowing\n      // modifying not selected paths for 6.x\n      if (!this.$__isSelected(curPath)) {\n        this.unmarkModified(curPath);\n      }\n      cur = this.$__getValue(curPath);\n    }\n  }\n\n  let pathToMark;\n\n  // When using the $set operator the path to the field must already exist.\n  // Else mongodb throws: \"LEFT_SUBFIELD only supports Object\"\n\n  if (parts.length <= 1) {\n    pathToMark = path;\n  } else {\n    const len = parts.length;\n    for (i = 0; i < len; ++i) {\n      const subpath = parts.slice(0, i + 1).join('.');\n      if (this.$get(subpath, null, { getters: false }) === null) {\n        pathToMark = subpath;\n        break;\n      }\n    }\n\n    if (!pathToMark) {\n      pathToMark = path;\n    }\n  }\n\n  if (!schema) {\n    this.$__set(pathToMark, path, options, constructing, parts, schema, val, priorVal);\n\n    if (pathType === 'nested' && val == null) {\n      cleanModifiedSubpaths(this, path);\n    }\n    return this;\n  }\n\n  // If overwriting a subdocument path, make sure to clear out\n  // any errors _before_ setting, so new errors that happen\n  // get persisted. Re: #9080\n  if (schema.$isSingleNested || schema.$isMongooseArray) {\n    _markValidSubpaths(this, path);\n  }\n\n  if (val != null && merge && schema.$isSingleNested) {\n    if (val instanceof Document) {\n      val = val.toObject({ virtuals: false, transform: false });\n    }\n    const keys = Object.keys(val);\n    for (const key of keys) {\n      this.$set(path + '.' + key, val[key], constructing, options);\n    }\n\n    return this;\n  }\n\n  let shouldSet = true;\n  try {\n    // If the user is trying to set a ref path to a document with\n    // the correct model name, treat it as populated\n    const refMatches = (() => {\n      if (schema.options == null) {\n        return false;\n      }\n      if (!(val instanceof Document)) {\n        return false;\n      }\n      const model = val.constructor;\n\n      // Check ref\n      const ref = schema.options.ref;\n      if (ref != null && (ref === model.modelName || ref === model.baseModelName)) {\n        return true;\n      }\n\n      // Check refPath\n      const refPath = schema.options.refPath;\n      if (refPath == null) {\n        return false;\n      }\n      const modelName = val.get(refPath);\n      return modelName === model.modelName || modelName === model.baseModelName;\n    })();\n\n    let didPopulate = false;\n    if (refMatches && val instanceof Document && (!val.$__.wasPopulated || utils.deepEqual(val.$__.wasPopulated.value, val._id))) {\n      const unpopulatedValue = (schema && schema.$isSingleNested) ? schema.cast(val, this) : val._id;\n      this.$populated(path, unpopulatedValue, { [populateModelSymbol]: val.constructor });\n      val.$__.wasPopulated = { value: unpopulatedValue };\n      didPopulate = true;\n    }\n\n    let popOpts;\n    const typeKey = this.$__schema.options.typeKey;\n    if (schema.options &&\n        Array.isArray(schema.options[typeKey]) &&\n        schema.options[typeKey].length &&\n        schema.options[typeKey][0].ref &&\n        _isManuallyPopulatedArray(val, schema.options[typeKey][0].ref)) {\n      popOpts = { [populateModelSymbol]: val[0].constructor };\n      this.$populated(path, val.map(function(v) { return v._id; }), popOpts);\n\n      for (const doc of val) {\n        doc.$__.wasPopulated = { value: doc._id };\n      }\n      didPopulate = true;\n    }\n\n    if (!refMatches || !schema.$isSingleNested || !val.$__) {\n      // If this path is underneath a single nested schema, we'll call the setter\n      // later in `$__set()` because we don't take `_doc` when we iterate through\n      // a single nested doc. That's to make sure we get the correct context.\n      // Otherwise we would double-call the setter, see gh-7196.\n      let setterContext = this;\n      if (this.$__schema.singleNestedPaths[path] != null && parts.length > 1) {\n        setterContext = getDeepestSubdocumentForPath(this, parts, this.schema);\n      }\n      if (options != null && options.overwriteImmutable) {\n        val = schema.applySetters(val, setterContext, false, priorVal, { overwriteImmutable: true });\n      } else {\n        val = schema.applySetters(val, setterContext, false, priorVal);\n      }\n    }\n\n    if (Array.isArray(val) &&\n        !Array.isArray(schema) &&\n        schema.$isMongooseDocumentArray &&\n        val.length !== 0 &&\n        val[0] != null &&\n        val[0].$__ != null &&\n        val[0].$__.populated != null) {\n      const populatedPaths = Object.keys(val[0].$__.populated);\n      for (const populatedPath of populatedPaths) {\n        this.$populated(path + '.' + populatedPath,\n          val.map(v => v.$populated(populatedPath)),\n          val[0].$__.populated[populatedPath].options);\n      }\n      didPopulate = true;\n    }\n\n    if (!didPopulate && this.$__.populated) {\n      // If this array partially contains populated documents, convert them\n      // all to ObjectIds re: #8443\n      if (Array.isArray(val) && this.$__.populated[path]) {\n        for (let i = 0; i < val.length; ++i) {\n          if (val[i] instanceof Document) {\n            val.set(i, val[i]._id, true);\n          }\n        }\n      }\n      delete this.$__.populated[path];\n    }\n\n    if (val != null && schema.$isSingleNested) {\n      _checkImmutableSubpaths(val, schema, priorVal);\n    }\n\n    this.$markValid(path);\n  } catch (e) {\n    if (e instanceof MongooseError.StrictModeError && e.isImmutableError) {\n      this.invalidate(path, e);\n    } else if (e instanceof MongooseError.CastError) {\n      this.invalidate(e.path, e);\n      if (e.$originalErrorPath) {\n        this.invalidate(path,\n          new MongooseError.CastError(schema.instance, val, path, e.$originalErrorPath));\n      }\n    } else {\n      this.invalidate(path,\n        new MongooseError.CastError(schema.instance, val, path, e));\n    }\n    shouldSet = false;\n  }\n\n  if (shouldSet) {\n    let savedState = null;\n    let savedStatePath = null;\n    if (!constructing) {\n      const doc = this.$isSubdocument ? this.ownerDocument() : this;\n      savedState = doc.$__.savedState;\n      savedStatePath = this.$isSubdocument ? this.$__.fullPath + '.' + path : path;\n      doc.$__saveInitialState(savedStatePath);\n    }\n\n    this.$__set(pathToMark, path, options, constructing, parts, schema, val, priorVal);\n\n    const isInTransaction = !!this.$__.session?.transaction;\n    const isModifiedWithinTransaction = this.$__.session &&\n      this.$__.session[sessionNewDocuments] &&\n      this.$__.session[sessionNewDocuments].has(this) &&\n      this.$__.session[sessionNewDocuments].get(this).modifiedPaths &&\n      !this.$__.session[sessionNewDocuments].get(this).modifiedPaths.has(savedStatePath);\n    if (savedState != null &&\n        savedState.hasOwnProperty(savedStatePath) &&\n        (!isInTransaction || isModifiedWithinTransaction) &&\n        utils.deepEqual(val, savedState[savedStatePath])) {\n      this.unmarkModified(path);\n    }\n  }\n\n  if (schema.$isSingleNested && (this.isDirectModified(path) || val == null)) {\n    cleanModifiedSubpaths(this, path);\n  }\n\n  return this;\n};\n\n/*!\n * ignore\n */\n\nfunction _isManuallyPopulatedArray(val, ref) {\n  if (!Array.isArray(val)) {\n    return false;\n  }\n  if (val.length === 0) {\n    return false;\n  }\n\n  for (const el of val) {\n    if (!(el instanceof Document)) {\n      return false;\n    }\n    const modelName = el.constructor.modelName;\n    if (modelName == null) {\n      return false;\n    }\n    if (el.constructor.modelName != ref && el.constructor.baseModelName != ref) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Sets the value of a path, or many paths.\n * Alias for [`.$set`](https://mongoosejs.com/docs/api/document.html#Document.prototype.$set()).\n *\n * #### Example:\n *\n *     // path, value\n *     doc.set(path, value)\n *\n *     // object\n *     doc.set({\n *         path  : value\n *       , path2 : {\n *            path  : value\n *         }\n *     })\n *\n *     // on-the-fly cast to number\n *     doc.set(path, value, Number)\n *\n *     // on-the-fly cast to string\n *     doc.set(path, value, String)\n *\n *     // changing strict mode behavior\n *     doc.set(path, value, { strict: false });\n *\n * @param {String|Object} path path or object of key/vals to set\n * @param {Any} val the value to set\n * @param {Schema|String|Number|Buffer|*} [type] optionally specify a type for \"on-the-fly\" attributes\n * @param {Object} [options] optionally specify options that modify the behavior of the set\n * @return {Document} this\n * @api public\n * @method set\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.set = Document.prototype.$set;\n\n/**\n * Determine if we should mark this change as modified.\n *\n * @param {never} pathToMark UNUSED\n * @param {String|Symbol} path\n * @param {Object} options\n * @param {Any} constructing\n * @param {never} parts UNUSED\n * @param {Schema} schema\n * @param {Any} val\n * @param {Any} priorVal\n * @return {Boolean}\n * @api private\n * @method $__shouldModify\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.$__shouldModify = function(pathToMark, path, options, constructing, parts, schema, val, priorVal) {\n  if (options && options._skipMarkModified) {\n    return false;\n  }\n  if (this.$isNew) {\n    return true;\n  }\n  // Is path already modified? If so, always modify. We may unmark modified later.\n  if (path in this.$__.activePaths.getStatePaths('modify')) {\n    return true;\n  }\n\n  if (val === void 0 && !this.$__isSelected(path)) {\n    // when a path is not selected in a query, its initial\n    // value will be undefined.\n    return true;\n  }\n\n  if (val === void 0 && path in this.$__.activePaths.getStatePaths('default')) {\n    // we're just unsetting the default value which was never saved\n    return false;\n  }\n\n  // gh-3992: if setting a populated field to a doc, don't mark modified\n  // if they have the same _id\n  if (this.$populated(path) &&\n      val instanceof Document &&\n      deepEqual(val._id, priorVal)) {\n    return false;\n  }\n\n  if (!deepEqual(val, priorVal !== undefined ? priorVal : utils.getValue(path, this))) {\n    return true;\n  }\n\n  if (!constructing &&\n      val !== null &&\n      val !== undefined &&\n      path in this.$__.activePaths.getStatePaths('default') &&\n      deepEqual(val, schema.getDefault(this, constructing))) {\n    // a path with a default was $unset on the server\n    // and the user is setting it to the same value again\n    return true;\n  }\n  return false;\n};\n\n/**\n * Handles the actual setting of the value and marking the path modified if appropriate.\n *\n * @param {String} pathToMark\n * @param {String|Symbol} path\n * @param {Object} options\n * @param {Any} constructing\n * @param {Array} parts\n * @param {Schema} schema\n * @param {Any} val\n * @param {Any} priorVal\n * @api private\n * @method $__set\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.$__set = function(pathToMark, path, options, constructing, parts, schema, val, priorVal) {\n  Embedded = Embedded || require('./types/arraySubdocument');\n\n  const shouldModify = this.$__shouldModify(pathToMark, path, options, constructing, parts,\n    schema, val, priorVal);\n\n  if (shouldModify) {\n    if (this.$__.primitiveAtomics && this.$__.primitiveAtomics[path]) {\n      delete this.$__.primitiveAtomics[path];\n      if (Object.keys(this.$__.primitiveAtomics).length === 0) {\n        delete this.$__.primitiveAtomics;\n      }\n    }\n    this.markModified(pathToMark);\n\n    // handle directly setting arrays (gh-1126)\n    MongooseArray || (MongooseArray = require('./types/array'));\n    if (val && utils.isMongooseArray(val)) {\n      val._registerAtomic('$set', val);\n\n      // Update embedded document parent references (gh-5189)\n      if (utils.isMongooseDocumentArray(val)) {\n        val.forEach(function(item) {\n          item && item.__parentArray && (item.__parentArray = val);\n        });\n      }\n    }\n  } else if (Array.isArray(val) && Array.isArray(priorVal) && utils.isMongooseArray(val) && utils.isMongooseArray(priorVal)) {\n    val[arrayAtomicsSymbol] = priorVal[arrayAtomicsSymbol];\n    val[arrayAtomicsBackupSymbol] = priorVal[arrayAtomicsBackupSymbol];\n    if (utils.isMongooseDocumentArray(val)) {\n      val.forEach(doc => {\n        if (doc != null) {\n          doc.$isNew = false;\n        }\n      });\n    }\n  }\n\n  let obj = this._doc;\n  let i = 0;\n  const l = parts.length;\n  let cur = '';\n\n  for (; i < l; i++) {\n    const next = i + 1;\n    const last = next === l;\n    cur += (cur ? '.' + parts[i] : parts[i]);\n    if (specialProperties.has(parts[i])) {\n      return;\n    }\n\n    if (last) {\n      if (obj instanceof Map) {\n        obj.set(parts[i], val);\n      } else if (obj.$isSingleNested) {\n        if (!(parts[i] in obj)) {\n          obj[parts[i]] = val;\n          obj._doc[parts[i]] = val;\n        } else {\n          obj._doc[parts[i]] = val;\n        }\n      } else {\n        obj[parts[i]] = val;\n      }\n    } else {\n      const isMap = obj instanceof Map;\n      let value = isMap ? obj.get(parts[i]) : obj[parts[i]];\n      if (utils.isPOJO(value)) {\n        obj = value;\n      } else if (value && value instanceof Embedded) {\n        obj = value;\n      } else if (value && !Array.isArray(value) && value.$isSingleNested) {\n        obj = value;\n      } else if (value && Array.isArray(value)) {\n        obj = value;\n      } else if (value == null) {\n        value = {};\n        if (isMap) {\n          obj.set(parts[i], value);\n        } else {\n          obj[parts[i]] = value;\n        }\n        obj = value;\n      } else {\n        obj = value;\n      }\n    }\n  }\n};\n\n/**\n * Gets a raw value from a path (no getters)\n *\n * @param {String} path\n * @return {Any} Returns the value from the given `path`.\n * @api private\n */\n\nDocument.prototype.$__getValue = function(path) {\n  return utils.getValue(path, this._doc);\n};\n\n/**\n * Increments the numeric value at `path` by the given `val`.\n * When you call `save()` on this document, Mongoose will send a\n * [`$inc`](https://www.mongodb.com/docs/manual/reference/operator/update/inc/)\n * as opposed to a `$set`.\n *\n * #### Example:\n *\n *     const schema = new Schema({ counter: Number });\n *     const Test = db.model('Test', schema);\n *\n *     const doc = await Test.create({ counter: 0 });\n *     doc.$inc('counter', 2);\n *     await doc.save(); // Sends a `{ $inc: { counter: 2 } }` to MongoDB\n *     doc.counter; // 2\n *\n *     doc.counter += 2;\n *     await doc.save(); // Sends a `{ $set: { counter: 2 } }` to MongoDB\n *\n * @param {String|Array} path path or paths to update\n * @param {Number} val increment `path` by this value\n * @return {Document} this\n */\n\nDocument.prototype.$inc = function $inc(path, val) {\n  if (val == null) {\n    val = 1;\n  }\n\n  if (Array.isArray(path)) {\n    path.forEach((p) => this.$inc(p, val));\n    return this;\n  }\n\n  const schemaType = this.$__path(path);\n  if (schemaType == null) {\n    if (this.$__.strictMode === 'throw') {\n      throw new StrictModeError(path);\n    } else if (this.$__.strictMode === true) {\n      return this;\n    }\n  } else if (schemaType.instance !== 'Number') {\n    this.invalidate(path, new MongooseError.CastError(schemaType.instance, val, path));\n    return this;\n  }\n\n  const currentValue = this.$__getValue(path) || 0;\n  let shouldSet = false;\n  let valToSet = null;\n  let valToInc = val;\n\n  try {\n    val = schemaType.cast(val);\n    valToSet = schemaType.applySetters(currentValue + val, this);\n    valToInc = valToSet - currentValue;\n    shouldSet = true;\n  } catch (err) {\n    this.invalidate(path, new MongooseError.CastError('number', val, path, err));\n  }\n\n  if (shouldSet) {\n    this.$__.primitiveAtomics = this.$__.primitiveAtomics || {};\n    if (this.$__.primitiveAtomics[path] == null) {\n      this.$__.primitiveAtomics[path] = { $inc: valToInc };\n    } else {\n      this.$__.primitiveAtomics[path].$inc += valToInc;\n    }\n    this.markModified(path);\n    this.$__setValue(path, valToSet);\n  }\n\n  return this;\n};\n\n/**\n * Sets a raw value for a path (no casting, setters, transformations)\n *\n * @param {String} path\n * @param {Object} value\n * @return {Document} this\n * @api private\n */\n\nDocument.prototype.$__setValue = function(path, val) {\n  utils.setValue(path, val, this._doc);\n  return this;\n};\n\n/**\n * Returns the value of a path.\n *\n * #### Example:\n *\n *     // path\n *     doc.get('age') // 47\n *\n *     // dynamic casting to a string\n *     doc.get('age', String) // \"47\"\n *\n * @param {String} path\n * @param {Schema|String|Number|Buffer|*} [type] optionally specify a type for on-the-fly attributes\n * @param {Object} [options]\n * @param {Boolean} [options.virtuals=false] Apply virtuals before getting this path\n * @param {Boolean} [options.getters=true] If false, skip applying getters and just get the raw value\n * @return {Any}\n * @api public\n */\n\nDocument.prototype.get = function(path, type, options) {\n  let adhoc;\n  if (options == null) {\n    options = {};\n  }\n  if (type) {\n    adhoc = this.$__schema.interpretAsType(path, type, this.$__schema.options);\n  }\n  const noDottedPath = options.noDottedPath;\n\n  // Fast path if we know we're just accessing top-level path on the document:\n  // just get the schema path, avoid `$__path()` because that does string manipulation\n  let schema = noDottedPath ? this.$__schema.paths[path] : this.$__path(path);\n  if (schema == null) {\n    schema = this.$__schema.virtualpath(path);\n\n    if (schema != null) {\n      return schema.applyGetters(void 0, this);\n    }\n  }\n\n  if (noDottedPath) {\n    let obj = this._doc[path];\n    if (adhoc) {\n      obj = adhoc.cast(obj);\n    }\n    if (schema != null && options.getters !== false) {\n      return schema.applyGetters(obj, this);\n    }\n    return obj;\n  }\n\n  if (schema != null && schema.instance === 'Mixed') {\n    const virtual = this.$__schema.virtualpath(path);\n    if (virtual != null) {\n      schema = virtual;\n    }\n  }\n\n  const hasDot = path.indexOf('.') !== -1;\n  let obj = this._doc;\n\n  const pieces = hasDot ? path.split('.') : [path];\n  // Might need to change path for top-level alias\n  if (typeof this.$__schema.aliases[pieces[0]] === 'string') {\n    pieces[0] = this.$__schema.aliases[pieces[0]];\n  }\n\n  for (let i = 0, l = pieces.length; i < l; i++) {\n    if (obj && obj._doc) {\n      obj = obj._doc;\n    }\n\n    if (obj == null) {\n      obj = void 0;\n    } else if (obj instanceof Map) {\n      obj = obj.get(pieces[i], { getters: false });\n    } else if (i === l - 1) {\n      obj = utils.getValue(pieces[i], obj);\n    } else {\n      obj = obj[pieces[i]];\n    }\n  }\n\n  if (adhoc) {\n    obj = adhoc.cast(obj);\n  }\n\n  if (schema != null && options.getters !== false) {\n    obj = schema.applyGetters(obj, this);\n  } else if (this.$__schema.nested[path] && options.virtuals) {\n    // Might need to apply virtuals if this is a nested path\n    return applyVirtuals(this, clone(obj) || {}, { path: path });\n  }\n\n  return obj;\n};\n\n/*!\n * ignore\n */\n\nDocument.prototype[getSymbol] = Document.prototype.get;\nDocument.prototype.$get = Document.prototype.get;\n\n/**\n * Returns the schematype for the given `path`.\n *\n * @param {String} path\n * @return {SchemaPath}\n * @api private\n * @method $__path\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.$__path = function(path) {\n  const adhocs = this.$__.adhocPaths;\n  const adhocType = adhocs && adhocs.hasOwnProperty(path) ? adhocs[path] : null;\n\n  if (adhocType) {\n    return adhocType;\n  }\n  return this.$__schema.path(path);\n};\n\n/**\n * Marks the path as having pending changes to write to the db.\n *\n * _Very helpful when using [Mixed](https://mongoosejs.com/docs/schematypes.html#mixed) types._\n *\n * #### Example:\n *\n *     doc.mixed.type = 'changed';\n *     doc.markModified('mixed.type');\n *     doc.save() // changes to mixed.type are now persisted\n *\n * @param {String} path the path to mark modified\n * @param {Document} [scope] the scope to run validators with\n * @api public\n */\n\nDocument.prototype.markModified = function(path, scope) {\n  this.$__saveInitialState(path);\n\n  this.$__.activePaths.modify(path);\n  if (scope != null && !this.$isSubdocument) {\n    this.$__.pathsToScopes = this.$__pathsToScopes || {};\n    this.$__.pathsToScopes[path] = scope;\n  }\n};\n\n/*!\n * ignore\n */\n\nDocument.prototype.$__saveInitialState = function $__saveInitialState(path) {\n  const savedState = this.$__.savedState;\n  const savedStatePath = path;\n  if (savedState != null) {\n    const firstDot = savedStatePath.indexOf('.');\n    const topLevelPath = firstDot === -1 ? savedStatePath : savedStatePath.slice(0, firstDot);\n    if (!savedState.hasOwnProperty(topLevelPath)) {\n      savedState[topLevelPath] = clone(this.$__getValue(topLevelPath));\n    }\n  }\n};\n\n/**\n * Clears the modified state on the specified path.\n *\n * #### Example:\n *\n *     doc.foo = 'bar';\n *     doc.unmarkModified('foo');\n *     doc.save(); // changes to foo will not be persisted\n *\n * @param {String} path the path to unmark modified\n * @api public\n */\n\nDocument.prototype.unmarkModified = function(path) {\n  this.$__.activePaths.init(path);\n  if (this.$__.pathsToScopes != null) {\n    delete this.$__.pathsToScopes[path];\n  }\n};\n\n/**\n * Don't run validation on this path or persist changes to this path.\n *\n * #### Example:\n *\n *     doc.foo = null;\n *     doc.$ignore('foo');\n *     doc.save(); // changes to foo will not be persisted and validators won't be run\n *\n * @memberOf Document\n * @instance\n * @method $ignore\n * @param {String} path the path to ignore\n * @api public\n */\n\nDocument.prototype.$ignore = function(path) {\n  this.$__.activePaths.ignore(path);\n};\n\n/**\n * Returns the list of paths that have been directly modified. A direct\n * modified path is a path that you explicitly set, whether via `doc.foo = 'bar'`,\n * `Object.assign(doc, { foo: 'bar' })`, or `doc.set('foo', 'bar')`.\n *\n * A path `a` may be in `modifiedPaths()` but not in `directModifiedPaths()`\n * because a child of `a` was directly modified.\n *\n * #### Example:\n *\n *     const schema = new Schema({ foo: String, nested: { bar: String } });\n *     const Model = mongoose.model('Test', schema);\n *     await Model.create({ foo: 'original', nested: { bar: 'original' } });\n *\n *     const doc = await Model.findOne();\n *     doc.nested.bar = 'modified';\n *     doc.directModifiedPaths(); // ['nested.bar']\n *     doc.modifiedPaths(); // ['nested', 'nested.bar']\n *\n * @return {String[]}\n * @api public\n */\n\nDocument.prototype.directModifiedPaths = function() {\n  return Object.keys(this.$__.activePaths.getStatePaths('modify'));\n};\n\n/**\n * Returns true if the given path is nullish or only contains empty objects.\n * Useful for determining whether this subdoc will get stripped out by the\n * [minimize option](https://mongoosejs.com/docs/guide.html#minimize).\n *\n * #### Example:\n *\n *     const schema = new Schema({ nested: { foo: String } });\n *     const Model = mongoose.model('Test', schema);\n *     const doc = new Model({});\n *     doc.$isEmpty('nested'); // true\n *     doc.nested.$isEmpty(); // true\n *\n *     doc.nested.foo = 'bar';\n *     doc.$isEmpty('nested'); // false\n *     doc.nested.$isEmpty(); // false\n *\n * @param {String} [path]\n * @memberOf Document\n * @instance\n * @api public\n * @method $isEmpty\n * @return {Boolean}\n */\n\nDocument.prototype.$isEmpty = function(path) {\n  const isEmptyOptions = {\n    minimize: true,\n    virtuals: false,\n    getters: false,\n    transform: false\n  };\n\n  if (arguments.length !== 0) {\n    const v = this.$get(path);\n    if (v == null) {\n      return true;\n    }\n    if (typeof v !== 'object') {\n      return false;\n    }\n    if (utils.isPOJO(v)) {\n      return _isEmpty(v);\n    }\n    return Object.keys(v.toObject(isEmptyOptions)).length === 0;\n  }\n\n  return Object.keys(this.toObject(isEmptyOptions)).length === 0;\n};\n\n/*!\n * ignore\n */\n\nfunction _isEmpty(v) {\n  if (v == null) {\n    return true;\n  }\n  if (typeof v !== 'object' || Array.isArray(v)) {\n    return false;\n  }\n  for (const key of Object.keys(v)) {\n    if (!_isEmpty(v[key])) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Returns the list of paths that have been modified.\n *\n * @param {Object} [options]\n * @param {Boolean} [options.includeChildren=false] if true, returns children of modified paths as well. For example, if false, the list of modified paths for `doc.colors = { primary: 'blue' };` will **not** contain `colors.primary`. If true, `modifiedPaths()` will return an array that contains `colors.primary`.\n * @return {String[]}\n * @api public\n */\n\nDocument.prototype.modifiedPaths = function(options) {\n  options = options || {};\n\n  const directModifiedPaths = Object.keys(this.$__.activePaths.getStatePaths('modify'));\n  const result = new Set();\n\n  let i = 0;\n  let j = 0;\n  const len = directModifiedPaths.length;\n\n  for (i = 0; i < len; ++i) {\n    const path = directModifiedPaths[i];\n    const parts = parentPaths(path);\n    const pLen = parts.length;\n\n    for (j = 0; j < pLen; ++j) {\n      result.add(parts[j]);\n    }\n\n    if (!options.includeChildren) {\n      continue;\n    }\n\n    let ii = 0;\n    let cur = this.$get(path);\n    if (typeof cur === 'object' && cur !== null) {\n      if (cur._doc) {\n        cur = cur._doc;\n      }\n      const len = cur.length;\n      if (Array.isArray(cur)) {\n        for (ii = 0; ii < len; ++ii) {\n          const subPath = path + '.' + ii;\n          if (!result.has(subPath)) {\n            result.add(subPath);\n            if (cur[ii] != null && cur[ii].$__) {\n              const modified = cur[ii].modifiedPaths();\n              let iii = 0;\n              const iiiLen = modified.length;\n              for (iii = 0; iii < iiiLen; ++iii) {\n                result.add(subPath + '.' + modified[iii]);\n              }\n            }\n          }\n        }\n      } else {\n        const keys = Object.keys(cur);\n        let ii = 0;\n        const len = keys.length;\n        for (ii = 0; ii < len; ++ii) {\n          result.add(path + '.' + keys[ii]);\n        }\n      }\n    }\n  }\n  return Array.from(result);\n};\n\nDocument.prototype[documentModifiedPaths] = Document.prototype.modifiedPaths;\n\n/**\n * Returns true if any of the given paths is modified, else false. If no arguments, returns `true` if any path\n * in this document is modified.\n *\n * If `path` is given, checks if a path or any full path containing `path` as part of its path chain has been modified.\n *\n * #### Example:\n *\n *     doc.set('documents.0.title', 'changed');\n *     doc.isModified()                      // true\n *     doc.isModified('documents')           // true\n *     doc.isModified('documents.0.title')   // true\n *     doc.isModified('documents otherProp') // true\n *     doc.isDirectModified('documents')     // false\n *\n * @param {String} [path] optional\n * @param {Object} [options]\n * @param {Boolean} [options.ignoreAtomics=false] If true, doesn't return true if path is underneath an array that was modified with atomic operations like `push()`\n * @return {Boolean}\n * @api public\n */\n\nDocument.prototype.isModified = function(paths, options, modifiedPaths) {\n  if (paths) {\n    const ignoreAtomics = options && options.ignoreAtomics;\n    const directModifiedPathsObj = this.$__.activePaths.states.modify;\n    if (directModifiedPathsObj == null) {\n      return false;\n    }\n\n    if (typeof paths === 'string') {\n      paths = paths.indexOf(' ') === -1 ? [paths] : paths.split(' ');\n    }\n\n    for (const path of paths) {\n      if (directModifiedPathsObj[path] != null) {\n        return true;\n      }\n    }\n\n    const modified = modifiedPaths || this[documentModifiedPaths]();\n    const isModifiedChild = paths.some(function(path) {\n      return !!~modified.indexOf(path);\n    });\n\n    let directModifiedPaths = Object.keys(directModifiedPathsObj);\n    if (ignoreAtomics) {\n      directModifiedPaths = directModifiedPaths.filter(path => {\n        const value = this.$__getValue(path);\n        if (value != null && value[arrayAtomicsSymbol] != null && value[arrayAtomicsSymbol].$set === undefined) {\n          return false;\n        }\n        return true;\n      });\n    }\n    return isModifiedChild || paths.some(function(path) {\n      return directModifiedPaths.some(function(mod) {\n        return mod === path || path.startsWith(mod + '.');\n      });\n    });\n  }\n\n  return this.$__.activePaths.some('modify');\n};\n\n/**\n * Alias of [`.isModified`](https://mongoosejs.com/docs/api/document.html#Document.prototype.isModified())\n *\n * @method $isModified\n * @memberOf Document\n * @api public\n */\n\nDocument.prototype.$isModified = Document.prototype.isModified;\n\nDocument.prototype[documentIsModified] = Document.prototype.isModified;\n\n/**\n * Checks if a path is set to its default.\n *\n * #### Example:\n *\n *     MyModel = mongoose.model('test', { name: { type: String, default: 'Val '} });\n *     const m = new MyModel();\n *     m.$isDefault('name'); // true\n *\n * @memberOf Document\n * @instance\n * @method $isDefault\n * @param {String} [path]\n * @return {Boolean}\n * @api public\n */\n\nDocument.prototype.$isDefault = function(path) {\n  if (path == null) {\n    return this.$__.activePaths.some('default');\n  }\n\n  if (typeof path === 'string' && path.indexOf(' ') === -1) {\n    return this.$__.activePaths.getStatePaths('default').hasOwnProperty(path);\n  }\n\n  let paths = path;\n  if (!Array.isArray(paths)) {\n    paths = paths.split(' ');\n  }\n\n  return paths.some(path => this.$__.activePaths.getStatePaths('default').hasOwnProperty(path));\n};\n\n/**\n * Getter/setter, determines whether the document was removed or not.\n *\n * #### Example:\n *\n *     const product = await product.remove();\n *     product.$isDeleted(); // true\n *     product.remove(); // no-op, doesn't send anything to the db\n *\n *     product.$isDeleted(false);\n *     product.$isDeleted(); // false\n *     product.remove(); // will execute a remove against the db\n *\n *\n * @param {Boolean} [val] optional, overrides whether mongoose thinks the doc is deleted\n * @return {Boolean|Document} whether mongoose thinks this doc is deleted.\n * @method $isDeleted\n * @memberOf Document\n * @instance\n * @api public\n */\n\nDocument.prototype.$isDeleted = function(val) {\n  if (arguments.length === 0) {\n    return !!this.$__.isDeleted;\n  }\n\n  this.$__.isDeleted = !!val;\n  return this;\n};\n\n/**\n * Returns true if `path` was directly set and modified, else false.\n *\n * #### Example:\n *\n *     doc.set('documents.0.title', 'changed');\n *     doc.isDirectModified('documents.0.title') // true\n *     doc.isDirectModified('documents') // false\n *\n * @param {String|String[]} [path]\n * @return {Boolean}\n * @api public\n */\n\nDocument.prototype.isDirectModified = function(path) {\n  if (path == null) {\n    return this.$__.activePaths.some('modify');\n  }\n\n  if (typeof path === 'string' && path.indexOf(' ') === -1) {\n    return this.$__.activePaths.getStatePaths('modify').hasOwnProperty(path);\n  }\n\n  let paths = path;\n  if (!Array.isArray(paths)) {\n    paths = paths.split(' ');\n  }\n\n  return paths.some(path => this.$__.activePaths.getStatePaths('modify').hasOwnProperty(path));\n};\n\n/**\n * Checks if `path` is in the `init` state, that is, it was set by `Document#init()` and not modified since.\n *\n * @param {String} [path]\n * @return {Boolean}\n * @api public\n */\n\nDocument.prototype.isInit = function(path) {\n  if (path == null) {\n    return this.$__.activePaths.some('init');\n  }\n\n  if (typeof path === 'string' && path.indexOf(' ') === -1) {\n    return this.$__.activePaths.getStatePaths('init').hasOwnProperty(path);\n  }\n\n  let paths = path;\n  if (!Array.isArray(paths)) {\n    paths = paths.split(' ');\n  }\n\n  return paths.some(path => this.$__.activePaths.getStatePaths('init').hasOwnProperty(path));\n};\n\n/**\n * Checks if `path` was selected in the source query which initialized this document.\n *\n * #### Example:\n *\n *     const doc = await Thing.findOne().select('name');\n *     doc.isSelected('name') // true\n *     doc.isSelected('age')  // false\n *\n * @param {String|String[]} path\n * @return {Boolean}\n * @api public\n */\n\nDocument.prototype.isSelected = function isSelected(path) {\n  if (this.$__.selected == null) {\n    return true;\n  }\n  if (!path) {\n    return false;\n  }\n  if (path === '_id') {\n    return this.$__.selected._id !== 0;\n  }\n\n  if (path.indexOf(' ') !== -1) {\n    path = path.split(' ');\n  }\n  if (Array.isArray(path)) {\n    return path.some(p => this.$__isSelected(p));\n  }\n\n  const paths = Object.keys(this.$__.selected);\n  let inclusive = null;\n\n  if (paths.length === 1 && paths[0] === '_id') {\n    // only _id was selected.\n    return this.$__.selected._id === 0;\n  }\n\n  for (const cur of paths) {\n    if (cur === '_id') {\n      continue;\n    }\n    if (!isDefiningProjection(this.$__.selected[cur])) {\n      continue;\n    }\n    inclusive = !!this.$__.selected[cur];\n    break;\n  }\n\n  if (inclusive === null) {\n    return true;\n  }\n\n  if (path in this.$__.selected) {\n    return inclusive;\n  }\n\n  const pathDot = path + '.';\n\n  for (const cur of paths) {\n    if (cur === '_id') {\n      continue;\n    }\n\n    if (cur.startsWith(pathDot)) {\n      return inclusive || cur !== pathDot;\n    }\n\n    if (pathDot.startsWith(cur + '.')) {\n      return inclusive;\n    }\n  }\n  return !inclusive;\n};\n\nDocument.prototype.$__isSelected = Document.prototype.isSelected;\n\n/**\n * Checks if `path` was explicitly selected. If no projection, always returns\n * true.\n *\n * #### Example:\n *\n *     Thing.findOne().select('nested.name').exec(function (err, doc) {\n *        doc.isDirectSelected('nested.name') // true\n *        doc.isDirectSelected('nested.otherName') // false\n *        doc.isDirectSelected('nested')  // false\n *     })\n *\n * @param {String} path\n * @return {Boolean}\n * @api public\n */\n\nDocument.prototype.isDirectSelected = function isDirectSelected(path) {\n  if (this.$__.selected == null) {\n    return true;\n  }\n\n  if (path === '_id') {\n    return this.$__.selected._id !== 0;\n  }\n\n  if (path.indexOf(' ') !== -1) {\n    path = path.split(' ');\n  }\n  if (Array.isArray(path)) {\n    return path.some(p => this.isDirectSelected(p));\n  }\n\n  const paths = Object.keys(this.$__.selected);\n  let inclusive = null;\n\n  if (paths.length === 1 && paths[0] === '_id') {\n    // only _id was selected.\n    return this.$__.selected._id === 0;\n  }\n\n  for (const cur of paths) {\n    if (cur === '_id') {\n      continue;\n    }\n    if (!isDefiningProjection(this.$__.selected[cur])) {\n      continue;\n    }\n    inclusive = !!this.$__.selected[cur];\n    break;\n  }\n\n  if (inclusive === null) {\n    return true;\n  }\n\n  if (this.$__.selected.hasOwnProperty(path)) {\n    return inclusive;\n  }\n\n  return !inclusive;\n};\n\n/**\n * Executes registered validation rules for this document.\n *\n * #### Note:\n *\n * This method is called `pre` save and if a validation rule is violated, [save](https://mongoosejs.com/docs/api/model.html#Model.prototype.save()) is aborted and the error is thrown.\n *\n * #### Example:\n *\n *     await doc.validate({ validateModifiedOnly: false, pathsToSkip: ['name', 'email']});\n *\n * @param {Array|String} [pathsToValidate] list of paths to validate. If set, Mongoose will validate only the modified paths that are in the given list.\n * @param {Object} [options] internal options\n * @param {Boolean} [options.validateModifiedOnly=false] if `true` mongoose validates only modified paths.\n * @param {Array|string} [options.pathsToSkip] list of paths to skip. If set, Mongoose will validate every modified path that is not in this list.\n * @return {Promise} Returns a Promise.\n * @api public\n */\n\nDocument.prototype.validate = async function validate(pathsToValidate, options) {\n  if (typeof pathsToValidate === 'function' || typeof options === 'function' || typeof arguments[2] === 'function') {\n    throw new MongooseError('Document.prototype.validate() no longer accepts a callback');\n  }\n  let parallelValidate;\n  this.$op = 'validate';\n\n  if (this.$isSubdocument != null) {\n    // Skip parallel validate check for subdocuments\n  } else if (this.$__.validating) {\n    parallelValidate = new ParallelValidateError(this, {\n      parentStack: options && options.parentStack,\n      conflictStack: this.$__.validating.stack\n    });\n  } else {\n    this.$__.validating = new ParallelValidateError(this, { parentStack: options && options.parentStack });\n  }\n\n  if (arguments.length === 1) {\n    if (typeof arguments[0] === 'object' && !Array.isArray(arguments[0])) {\n      options = arguments[0];\n      pathsToValidate = null;\n    }\n  }\n  if (options && typeof options.pathsToSkip === 'string') {\n    const isOnePathOnly = options.pathsToSkip.indexOf(' ') === -1;\n    options.pathsToSkip = isOnePathOnly ? [options.pathsToSkip] : options.pathsToSkip.split(' ');\n  }\n\n  if (parallelValidate != null) {\n    throw parallelValidate;\n  }\n\n  return new Promise((resolve, reject) => {\n    this.$__validate(pathsToValidate, options, (error) => {\n      this.$op = null;\n      this.$__.validating = null;\n      if (error != null) {\n        return reject(error);\n      }\n      resolve();\n    });\n  });\n};\n\n/**\n * Alias of [`.validate`](https://mongoosejs.com/docs/api/document.html#Document.prototype.validate())\n *\n * @method $validate\n * @memberOf Document\n * @api public\n */\n\nDocument.prototype.$validate = Document.prototype.validate;\n\n/*!\n * ignore\n */\n\nfunction _evaluateRequiredFunctions(doc) {\n  const requiredFields = Object.keys(doc.$__.activePaths.getStatePaths('require'));\n  let i = 0;\n  const len = requiredFields.length;\n  for (i = 0; i < len; ++i) {\n    const path = requiredFields[i];\n\n    const p = doc.$__schema.path(path);\n\n    if (p != null && typeof p.originalRequiredValue === 'function') {\n      doc.$__.cachedRequired = doc.$__.cachedRequired || {};\n      try {\n        doc.$__.cachedRequired[path] = p.originalRequiredValue.call(doc, doc);\n      } catch (err) {\n        doc.invalidate(path, err);\n      }\n    }\n  }\n}\n\n/*!\n * ignore\n */\n\nfunction _getPathsToValidate(doc, pathsToValidate, pathsToSkip) {\n  const doValidateOptions = {};\n\n  _evaluateRequiredFunctions(doc);\n  // only validate required fields when necessary\n  let paths = new Set(Object.keys(doc.$__.activePaths.getStatePaths('require')).filter(function(path) {\n    if (!doc.$__isSelected(path) && !doc.$isModified(path)) {\n      return false;\n    }\n    if (doc.$__.cachedRequired != null && path in doc.$__.cachedRequired) {\n      return doc.$__.cachedRequired[path];\n    }\n    return true;\n  }));\n\n  Object.keys(doc.$__.activePaths.getStatePaths('init')).forEach(addToPaths);\n  Object.keys(doc.$__.activePaths.getStatePaths('modify')).forEach(addToPaths);\n  Object.keys(doc.$__.activePaths.getStatePaths('default')).forEach(addToPaths);\n  function addToPaths(p) { paths.add(p); }\n\n  const subdocs = doc.$getAllSubdocs();\n  const modifiedPaths = doc.modifiedPaths();\n  for (const subdoc of subdocs) {\n    if (subdoc.$basePath) {\n      const fullPathToSubdoc = subdoc.$isSingleNested ? subdoc.$__pathRelativeToParent() : subdoc.$__fullPathWithIndexes();\n\n      // Remove child paths for now, because we'll be validating the whole\n      // subdoc.\n      // The following is a faster take on looping through every path in `paths`\n      // and checking if the path starts with `fullPathToSubdoc` re: gh-13191\n      for (const modifiedPath of subdoc.modifiedPaths()) {\n        paths.delete(fullPathToSubdoc + '.' + modifiedPath);\n      }\n\n      if (doc.$isModified(fullPathToSubdoc, null, modifiedPaths) &&\n            !doc.isDirectModified(fullPathToSubdoc) &&\n            !doc.$isDefault(fullPathToSubdoc)) {\n        paths.add(fullPathToSubdoc);\n        if (doc.$__.pathsToScopes == null) {\n          doc.$__.pathsToScopes = {};\n        }\n        doc.$__.pathsToScopes[fullPathToSubdoc] = subdoc.$isDocumentArrayElement ?\n          subdoc.__parentArray :\n          subdoc.$parent();\n\n        doValidateOptions[fullPathToSubdoc] = { skipSchemaValidators: true };\n        if (subdoc.$isDocumentArrayElement && subdoc.__index != null) {\n          doValidateOptions[fullPathToSubdoc].index = subdoc.__index;\n        }\n      }\n    }\n  }\n\n  for (const path of paths) {\n    const _pathType = doc.$__schema.path(path);\n    if (!_pathType) {\n      continue;\n    }\n\n    if (_pathType.$isMongooseDocumentArray) {\n      for (const p of paths) {\n        if (p == null || p.startsWith(_pathType.path + '.')) {\n          paths.delete(p);\n        }\n      }\n    }\n\n    // Optimization: if primitive path with no validators, or array of primitives\n    // with no validators, skip validating this path entirely.\n    if (!_pathType.caster && _pathType.validators.length === 0 && !_pathType.$parentSchemaDocArray) {\n      paths.delete(path);\n    } else if (_pathType.$isMongooseArray &&\n      !_pathType.$isMongooseDocumentArray && // Skip document arrays...\n      !_pathType.$embeddedSchemaType.$isMongooseArray && // and arrays of arrays\n      _pathType.validators.length === 0 && // and arrays with top-level validators\n      _pathType.$embeddedSchemaType.validators.length === 0) {\n      paths.delete(path);\n    }\n  }\n\n  for (const path of paths) {\n    // Single nested paths (paths embedded under single nested subdocs) will\n    // be validated on their own when we call `validate()` on the subdoc itself.\n    // Re: gh-8468\n    if (doc.$__schema.singleNestedPaths.hasOwnProperty(path)) {\n      paths.delete(path);\n      continue;\n    }\n  }\n\n  if (Array.isArray(pathsToValidate)) {\n    paths = _handlePathsToValidate(paths, pathsToValidate);\n  } else if (Array.isArray(pathsToSkip)) {\n    paths = _handlePathsToSkip(paths, pathsToSkip);\n  }\n\n  // from here on we're not removing items from paths\n\n  // gh-661: if a whole array is modified, make sure to run validation on all\n  // the children as well\n  for (const path of paths) {\n    const _pathType = doc.$__schema.path(path);\n    if (!_pathType) {\n      continue;\n    }\n\n    if (!_pathType.$isMongooseArray ||\n        // To avoid potential performance issues, skip doc arrays whose children\n        // are not required. `getPositionalPathType()` may be slow, so avoid\n        // it unless we have a case of #6364\n        (!Array.isArray(_pathType) &&\n          _pathType.$isMongooseDocumentArray &&\n          !(_pathType && _pathType.schemaOptions && _pathType.schemaOptions.required))) {\n      continue;\n    }\n\n    // gh-11380: optimization. If the array isn't a document array and there's no validators\n    // on the array type, there's no need to run validation on the individual array elements.\n    if (_pathType.$isMongooseArray &&\n        !_pathType.$isMongooseDocumentArray && // Skip document arrays...\n        !_pathType.$embeddedSchemaType.$isMongooseArray && // and arrays of arrays\n        _pathType.$embeddedSchemaType.validators.length === 0) {\n      continue;\n    }\n\n    const val = doc.$__getValue(path);\n    _pushNestedArrayPaths(val, paths, path);\n  }\n\n  function _pushNestedArrayPaths(val, paths, path) {\n    if (val != null) {\n      const numElements = val.length;\n      for (let j = 0; j < numElements; ++j) {\n        if (Array.isArray(val[j])) {\n          _pushNestedArrayPaths(val[j], paths, path + '.' + j);\n        } else {\n          paths.add(path + '.' + j);\n        }\n      }\n    }\n  }\n\n  const flattenOptions = { skipArrays: true };\n  for (const pathToCheck of paths) {\n    if (doc.$__schema.nested[pathToCheck]) {\n      let _v = doc.$__getValue(pathToCheck);\n      if (isMongooseObject(_v)) {\n        _v = _v.toObject({ transform: false });\n      }\n      const flat = flatten(_v, pathToCheck, flattenOptions, doc.$__schema);\n      Object.keys(flat).forEach(addToPaths);\n    }\n  }\n\n  for (const path of paths) {\n    const _pathType = doc.$__schema.path(path);\n\n    if (!_pathType) {\n      continue;\n    }\n\n    // If underneath a document array, may need to re-validate the parent\n    // array re: gh-6818. Do this _after_ adding subpaths, because\n    // we don't want to add every array subpath.\n    if (_pathType.$parentSchemaDocArray && typeof _pathType.$parentSchemaDocArray.path === 'string') {\n      paths.add(_pathType.$parentSchemaDocArray.path);\n    }\n\n    if (!_pathType.$isSchemaMap) {\n      continue;\n    }\n\n    const val = doc.$__getValue(path);\n    if (val == null) {\n      continue;\n    }\n    for (const key of val.keys()) {\n      paths.add(path + '.' + key);\n    }\n  }\n\n  paths = Array.from(paths);\n  return [paths, doValidateOptions];\n}\n\n/*!\n * ignore\n */\n\nDocument.prototype.$__validate = function(pathsToValidate, options, callback) {\n  if (typeof pathsToValidate === 'function') {\n    callback = pathsToValidate;\n    options = null;\n    pathsToValidate = null;\n  } else if (typeof options === 'function') {\n    callback = options;\n    options = null;\n  }\n\n  const hasValidateModifiedOnlyOption = options &&\n      (typeof options === 'object') &&\n      ('validateModifiedOnly' in options);\n\n  const pathsToSkip = (options && options.pathsToSkip) || null;\n\n  let shouldValidateModifiedOnly;\n  if (hasValidateModifiedOnlyOption) {\n    shouldValidateModifiedOnly = !!options.validateModifiedOnly;\n  } else {\n    shouldValidateModifiedOnly = this.$__schema.options.validateModifiedOnly;\n  }\n\n  const _this = this;\n  const _complete = () => {\n    let validationError = this.$__.validationError;\n    this.$__.validationError = null;\n    this.$__.validating = null;\n\n    if (shouldValidateModifiedOnly && validationError != null) {\n      // Remove any validation errors that aren't from modified paths\n      const errors = Object.keys(validationError.errors);\n      for (const errPath of errors) {\n        if (!this.$isModified(errPath)) {\n          delete validationError.errors[errPath];\n        }\n      }\n      if (Object.keys(validationError.errors).length === 0) {\n        validationError = void 0;\n      }\n    }\n\n    this.$__.cachedRequired = {};\n    this.$emit('validate', _this);\n    this.constructor.emit('validate', _this);\n\n    if (validationError) {\n      for (const key in validationError.errors) {\n        // Make sure cast errors persist\n        if (!this[documentArrayParent] &&\n            validationError.errors[key] instanceof MongooseError.CastError) {\n          this.invalidate(key, validationError.errors[key]);\n        }\n      }\n\n      return validationError;\n    }\n  };\n\n  // only validate required fields when necessary\n  const pathDetails = _getPathsToValidate(this, pathsToValidate, pathsToSkip);\n  const paths = shouldValidateModifiedOnly ?\n    pathDetails[0].filter((path) => this.$isModified(path)) :\n    pathDetails[0];\n  const doValidateOptionsByPath = pathDetails[1];\n  if (typeof pathsToValidate === 'string') {\n    pathsToValidate = pathsToValidate.split(' ');\n  }\n\n  if (paths.length === 0) {\n    return immediate(function() {\n      const error = _complete();\n      if (error) {\n        return _this.$__schema.s.hooks.execPost('validate:error', _this, [_this], { error: error }, function(error) {\n          callback(error);\n        });\n      }\n      callback(null, _this);\n    });\n  }\n\n  const validated = {};\n  let total = 0;\n\n  for (const path of paths) {\n    validatePath(path);\n  }\n\n  function validatePath(path) {\n    if (path == null || validated[path]) {\n      return;\n    }\n\n    validated[path] = true;\n    total++;\n\n    immediate(function() {\n      const schemaType = _this.$__schema.path(path);\n\n      if (!schemaType) {\n        return --total || complete();\n      }\n\n      // If user marked as invalid or there was a cast error, don't validate\n      if (!_this.$isValid(path)) {\n        --total || complete();\n        return;\n      }\n\n      // If setting a path under a mixed path, avoid using the mixed path validator (gh-10141)\n      if (schemaType[schemaMixedSymbol] != null && path !== schemaType.path) {\n        return --total || complete();\n      }\n\n      let val = _this.$__getValue(path);\n\n      // If you `populate()` and get back a null value, required validators\n      // shouldn't fail (gh-8018). We should always fall back to the populated\n      // value.\n      let pop;\n      if ((pop = _this.$populated(path))) {\n        val = pop;\n      } else if (val != null && val.$__ != null && val.$__.wasPopulated) {\n        // Array paths, like `somearray.1`, do not show up as populated with `$populated()`,\n        // so in that case pull out the document's id\n        val = val._id;\n      }\n      const scope = _this.$__.pathsToScopes != null && path in _this.$__.pathsToScopes ?\n        _this.$__.pathsToScopes[path] :\n        _this;\n\n      const doValidateOptions = {\n        ...doValidateOptionsByPath[path],\n        path: path,\n        validateModifiedOnly: shouldValidateModifiedOnly\n      };\n\n      schemaType.doValidate(val, function(err) {\n        if (err) {\n          const isSubdoc = schemaType.$isSingleNested ||\n              schemaType.$isArraySubdocument ||\n              schemaType.$isMongooseDocumentArray;\n          if (isSubdoc && err instanceof ValidationError) {\n            return --total || complete();\n          }\n          _this.invalidate(path, err, undefined, true);\n        }\n        --total || complete();\n      }, scope, doValidateOptions);\n    });\n  }\n\n  function complete() {\n    const error = _complete();\n    if (error) {\n      return _this.$__schema.s.hooks.execPost('validate:error', _this, [_this], { error: error }, function(error) {\n        callback(error);\n      });\n    }\n    callback(null, _this);\n  }\n\n};\n\n/*!\n * ignore\n */\n\nfunction _handlePathsToValidate(paths, pathsToValidate) {\n  const _pathsToValidate = new Set(pathsToValidate);\n  const parentPaths = new Map([]);\n  for (const path of pathsToValidate) {\n    if (path.indexOf('.') === -1) {\n      continue;\n    }\n    const pieces = path.split('.');\n    let cur = pieces[0];\n    for (let i = 1; i < pieces.length; ++i) {\n      // Since we skip subpaths under single nested subdocs to\n      // avoid double validation, we need to add back the\n      // single nested subpath if the user asked for it (gh-8626)\n      parentPaths.set(cur, path);\n      cur = cur + '.' + pieces[i];\n    }\n  }\n\n  const ret = new Set();\n  for (const path of paths) {\n    if (_pathsToValidate.has(path)) {\n      ret.add(path);\n    } else if (parentPaths.has(path)) {\n      ret.add(parentPaths.get(path));\n    }\n  }\n  return ret;\n}\n\n/*!\n * ignore\n */\n\nfunction _handlePathsToSkip(paths, pathsToSkip) {\n  pathsToSkip = new Set(pathsToSkip);\n  paths = Array.from(paths).filter(p => !pathsToSkip.has(p));\n  return new Set(paths);\n}\n\n/**\n * Executes registered validation rules (skipping asynchronous validators) for this document.\n *\n * #### Note:\n *\n * This method is useful if you need synchronous validation.\n *\n * #### Example:\n *\n *     const err = doc.validateSync();\n *     if (err) {\n *       handleError(err);\n *     } else {\n *       // validation passed\n *     }\n *\n * @param {Array|string} [pathsToValidate] only validate the given paths\n * @param {Object} [options] options for validation\n * @param {Boolean} [options.validateModifiedOnly=false] If `true`, Mongoose will only validate modified paths, as opposed to modified paths and `required` paths.\n * @param {Array|string} [options.pathsToSkip] list of paths to skip. If set, Mongoose will validate every modified path that is not in this list.\n * @return {ValidationError|undefined} ValidationError if there are errors during validation, or undefined if there is no error.\n * @api public\n */\n\nDocument.prototype.validateSync = function(pathsToValidate, options) {\n  const _this = this;\n\n  if (arguments.length === 1 && typeof arguments[0] === 'object' && !Array.isArray(arguments[0])) {\n    options = arguments[0];\n    pathsToValidate = null;\n  }\n\n  const hasValidateModifiedOnlyOption = options &&\n      (typeof options === 'object') &&\n      ('validateModifiedOnly' in options);\n\n  let shouldValidateModifiedOnly;\n  if (hasValidateModifiedOnlyOption) {\n    shouldValidateModifiedOnly = !!options.validateModifiedOnly;\n  } else {\n    shouldValidateModifiedOnly = this.$__schema.options.validateModifiedOnly;\n  }\n\n  let pathsToSkip = options && options.pathsToSkip;\n\n  if (typeof pathsToValidate === 'string') {\n    const isOnePathOnly = pathsToValidate.indexOf(' ') === -1;\n    pathsToValidate = isOnePathOnly ? [pathsToValidate] : pathsToValidate.split(' ');\n  } else if (typeof pathsToSkip === 'string' && pathsToSkip.indexOf(' ') !== -1) {\n    pathsToSkip = pathsToSkip.split(' ');\n  }\n\n  // only validate required fields when necessary\n  const pathDetails = _getPathsToValidate(this, pathsToValidate, pathsToSkip);\n  const paths = shouldValidateModifiedOnly ?\n    pathDetails[0].filter((path) => this.$isModified(path)) :\n    pathDetails[0];\n  const skipSchemaValidators = pathDetails[1];\n\n  const validating = {};\n\n  for (let i = 0, len = paths.length; i < len; ++i) {\n    const path = paths[i];\n\n    if (validating[path]) {\n      continue;\n    }\n\n    validating[path] = true;\n\n    const p = _this.$__schema.path(path);\n    if (!p) {\n      continue;\n    }\n    if (!_this.$isValid(path)) {\n      continue;\n    }\n\n    const val = _this.$__getValue(path);\n    const err = p.doValidateSync(val, _this, {\n      skipSchemaValidators: skipSchemaValidators[path],\n      path: path,\n      validateModifiedOnly: shouldValidateModifiedOnly\n    });\n    if (err) {\n      const isSubdoc = p.$isSingleNested ||\n        p.$isArraySubdocument ||\n        p.$isMongooseDocumentArray;\n      if (isSubdoc && err instanceof ValidationError) {\n        continue;\n      }\n      _this.invalidate(path, err, undefined, true);\n    }\n  }\n\n  const err = _this.$__.validationError;\n  _this.$__.validationError = undefined;\n  _this.$emit('validate', _this);\n  _this.constructor.emit('validate', _this);\n\n  if (err) {\n    for (const key in err.errors) {\n      // Make sure cast errors persist\n      if (err.errors[key] instanceof MongooseError.CastError) {\n        _this.invalidate(key, err.errors[key]);\n      }\n    }\n  }\n\n  return err;\n};\n\n/**\n * Marks a path as invalid, causing validation to fail.\n *\n * The `errorMsg` argument will become the message of the `ValidationError`.\n *\n * The `value` argument (if passed) will be available through the `ValidationError.value` property.\n *\n *     doc.invalidate('size', 'must be less than 20', 14);\n *\n *     doc.validate(function (err) {\n *       console.log(err)\n *       // prints\n *       { message: 'Validation failed',\n *         name: 'ValidationError',\n *         errors:\n *          { size:\n *             { message: 'must be less than 20',\n *               name: 'ValidatorError',\n *               path: 'size',\n *               type: 'user defined',\n *               value: 14 } } }\n *     })\n *\n * @param {String} path the field to invalidate. For array elements, use the `array.i.field` syntax, where `i` is the 0-based index in the array.\n * @param {String|Error} err the error which states the reason `path` was invalid\n * @param {Object|String|Number|any} val optional invalid value\n * @param {String} [kind] optional `kind` property for the error\n * @return {ValidationError} the current ValidationError, with all currently invalidated paths\n * @api public\n */\n\nDocument.prototype.invalidate = function(path, err, val, kind) {\n  if (!this.$__.validationError) {\n    this.$__.validationError = new ValidationError(this);\n  }\n\n  if (this.$__.validationError.errors[path]) {\n    return;\n  }\n\n  if (!err || typeof err === 'string') {\n    err = new ValidatorError({\n      path: path,\n      message: err,\n      type: kind || 'user defined',\n      value: val\n    });\n  }\n\n  if (this.$__.validationError === err) {\n    return this.$__.validationError;\n  }\n\n  this.$__.validationError.addError(path, err);\n  return this.$__.validationError;\n};\n\n/**\n * Marks a path as valid, removing existing validation errors.\n *\n * @param {String} path the field to mark as valid\n * @api public\n * @memberOf Document\n * @instance\n * @method $markValid\n */\n\nDocument.prototype.$markValid = function(path) {\n  if (!this.$__.validationError || !this.$__.validationError.errors[path]) {\n    return;\n  }\n\n  delete this.$__.validationError.errors[path];\n  if (Object.keys(this.$__.validationError.errors).length === 0) {\n    this.$__.validationError = null;\n  }\n};\n\n/*!\n * ignore\n */\n\nfunction _markValidSubpaths(doc, path) {\n  if (!doc.$__.validationError) {\n    return;\n  }\n\n  const keys = Object.keys(doc.$__.validationError.errors);\n  for (const key of keys) {\n    if (key.startsWith(path + '.')) {\n      delete doc.$__.validationError.errors[key];\n    }\n  }\n  if (Object.keys(doc.$__.validationError.errors).length === 0) {\n    doc.$__.validationError = null;\n  }\n}\n\n/*!\n * ignore\n */\n\nfunction _checkImmutableSubpaths(subdoc, schematype, priorVal) {\n  const schema = schematype.schema;\n  if (schema == null) {\n    return;\n  }\n\n  for (const key of Object.keys(schema.paths)) {\n    const path = schema.paths[key];\n    if (path.$immutableSetter == null) {\n      continue;\n    }\n    const oldVal = priorVal == null ? void 0 : priorVal.$__getValue(key);\n    // Calling immutableSetter with `oldVal` even though it expects `newVal`\n    // is intentional. That's because `$immutableSetter` compares its param\n    // to the current value.\n    path.$immutableSetter.call(subdoc, oldVal);\n  }\n}\n\n/**\n * Saves this document by inserting a new document into the database if [document.isNew](https://mongoosejs.com/docs/api/document.html#Document.prototype.isNew()) is `true`,\n * or sends an [updateOne](https://mongoosejs.com/docs/api/document.html#Document.prototype.updateOne()) operation **only** with the modifications to the database, it does not replace the whole document in the latter case.\n *\n * #### Example:\n *\n *     product.sold = Date.now();\n *     product = await product.save();\n *\n * If save is successful, the returned promise will fulfill with the document\n * saved.\n *\n * #### Example:\n *\n *     const newProduct = await product.save();\n *     newProduct === product; // true\n *\n * @param {Object} [options] options optional options\n * @param {Session} [options.session=null] the [session](https://www.mongodb.com/docs/manual/reference/server-sessions/) associated with this save operation. If not specified, defaults to the [document's associated session](https://mongoosejs.com/docs/api/document.html#Document.prototype.$session()).\n * @param {Object} [options.safe] (DEPRECATED) overrides [schema's safe option](https://mongoosejs.com/docs/guide.html#safe). Use the `w` option instead.\n * @param {Boolean} [options.validateBeforeSave] set to false to save without validating.\n * @param {Boolean} [options.validateModifiedOnly=false] If `true`, Mongoose will only validate modified paths, as opposed to modified paths and `required` paths.\n * @param {Number|String} [options.w] set the [write concern](https://www.mongodb.com/docs/manual/reference/write-concern/#w-option). Overrides the [schema-level `writeConcern` option](https://mongoosejs.com/docs/guide.html#writeConcern)\n * @param {Boolean} [options.j] set to true for MongoDB to wait until this `save()` has been [journaled before resolving the returned promise](https://www.mongodb.com/docs/manual/reference/write-concern/#j-option). Overrides the [schema-level `writeConcern` option](https://mongoosejs.com/docs/guide.html#writeConcern)\n * @param {Number} [options.wtimeout] sets a [timeout for the write concern](https://www.mongodb.com/docs/manual/reference/write-concern/#wtimeout). Overrides the [schema-level `writeConcern` option](https://mongoosejs.com/docs/guide.html#writeConcern).\n * @param {Boolean} [options.checkKeys=true] the MongoDB driver prevents you from saving keys that start with '$' or contain '.' by default. Set this option to `false` to skip that check. See [restrictions on field names](https://www.mongodb.com/docs/manual/reference/limits/#Restrictions-on-Field-Names)\n * @param {Boolean} [options.timestamps=true] if `false` and [timestamps](https://mongoosejs.com/docs/guide.html#timestamps) are enabled, skip timestamps for this `save()`.\n * @param {Function} [fn] optional callback\n * @method save\n * @memberOf Document\n * @instance\n * @throws {DocumentNotFoundError} if this [save updates an existing document](https://mongoosejs.com/docs/api/document.html#Document.prototype.isNew()) but the document doesn't exist in the database. For example, you will get this error if the document is [deleted between when you retrieved the document and when you saved it](documents.html#updating).\n * @return {Promise|undefined} Returns undefined if used with callback or a Promise otherwise.\n * @api public\n * @see middleware https://mongoosejs.com/docs/middleware.html\n */\n\n/**\n * Checks if a path is invalid\n *\n * @param {String|String[]} [path] the field to check. If unset will always return \"false\"\n * @method $isValid\n * @memberOf Document\n * @instance\n * @api private\n */\n\nDocument.prototype.$isValid = function(path) {\n  if (this.$__.validationError == null || Object.keys(this.$__.validationError.errors).length === 0) {\n    return true;\n  }\n  if (path == null) {\n    return false;\n  }\n\n  if (path.indexOf(' ') !== -1) {\n    path = path.split(' ');\n  }\n  if (Array.isArray(path)) {\n    return path.some(p => this.$__.validationError.errors[p] == null);\n  }\n\n  return this.$__.validationError.errors[path] == null;\n};\n\n/**\n * Resets the internal modified state of this document.\n *\n * @api private\n * @return {Document} this\n * @method $__reset\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.$__reset = function reset() {\n  let _this = this;\n\n  // Skip for subdocuments\n  const subdocs = this.$parent() === this ? this.$getAllSubdocs() : [];\n  const resetArrays = new Set();\n  for (const subdoc of subdocs) {\n    const fullPathWithIndexes = subdoc.$__fullPathWithIndexes();\n    subdoc.$__reset();\n    if (this.isModified(fullPathWithIndexes) || isParentInit(fullPathWithIndexes)) {\n      if (subdoc.$isDocumentArrayElement) {\n        resetArrays.add(subdoc.parentArray());\n      } else {\n        const parent = subdoc.$parent();\n        if (parent === this) {\n          this.$__.activePaths.clearPath(subdoc.$basePath);\n        } else if (parent != null && parent.$isSubdocument) {\n          // If map path underneath subdocument, may end up with a case where\n          // map path is modified but parent still needs to be reset. See gh-10295\n          parent.$__reset();\n        }\n      }\n    }\n  }\n\n  for (const array of resetArrays) {\n    this.$__.activePaths.clearPath(array.$path());\n    array[arrayAtomicsBackupSymbol] = array[arrayAtomicsSymbol];\n    array[arrayAtomicsSymbol] = {};\n  }\n\n  function isParentInit(path) {\n    path = path.indexOf('.') === -1 ? [path] : path.split('.');\n    let cur = '';\n    for (let i = 0; i < path.length; ++i) {\n      cur += (cur.length ? '.' : '') + path[i];\n      if (_this.$__.activePaths[cur] === 'init') {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  // clear atomics\n  this.$__dirty().forEach(function(dirt) {\n    const type = dirt.value;\n\n    if (type && type[arrayAtomicsSymbol]) {\n      type[arrayAtomicsBackupSymbol] = type[arrayAtomicsSymbol];\n      type[arrayAtomicsSymbol] = {};\n    }\n  });\n\n  this.$__.backup = {};\n  this.$__.backup.activePaths = {\n    modify: Object.assign({}, this.$__.activePaths.getStatePaths('modify')),\n    default: Object.assign({}, this.$__.activePaths.getStatePaths('default'))\n  };\n  this.$__.backup.validationError = this.$__.validationError;\n  this.$__.backup.errors = this.$errors;\n\n  // Clear 'dirty' cache\n  this.$__.activePaths.clear('modify');\n  this.$__.activePaths.clear('default');\n  this.$__.validationError = undefined;\n  this.$errors = undefined;\n  _this = this;\n  this.$__schema.requiredPaths().forEach(function(path) {\n    _this.$__.activePaths.require(path);\n  });\n\n  return this;\n};\n\n/*!\n * ignore\n */\n\nDocument.prototype.$__undoReset = function $__undoReset() {\n  if (this.$__.backup == null || this.$__.backup.activePaths == null) {\n    return;\n  }\n\n  this.$__.activePaths.states.modify = this.$__.backup.activePaths.modify;\n  this.$__.activePaths.states.default = this.$__.backup.activePaths.default;\n\n  this.$__.validationError = this.$__.backup.validationError;\n  this.$errors = this.$__.backup.errors;\n\n  for (const dirt of this.$__dirty()) {\n    const type = dirt.value;\n\n    if (type && type[arrayAtomicsSymbol] && type[arrayAtomicsBackupSymbol]) {\n      type[arrayAtomicsSymbol] = type[arrayAtomicsBackupSymbol];\n    }\n  }\n\n  for (const subdoc of this.$getAllSubdocs()) {\n    subdoc.$__undoReset();\n  }\n};\n\n/**\n * Returns this documents dirty paths / vals.\n *\n * @return {Array}\n * @api private\n * @method $__dirty\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.$__dirty = function() {\n  const _this = this;\n  let all = this.$__.activePaths.map('modify', function(path) {\n    return {\n      path: path,\n      value: _this.$__getValue(path),\n      schema: _this.$__path(path)\n    };\n  });\n\n  // gh-2558: if we had to set a default and the value is not undefined,\n  // we have to save as well\n  all = all.concat(this.$__.activePaths.map('default', function(path) {\n    if (path === '_id' || _this.$__getValue(path) == null) {\n      return;\n    }\n    return {\n      path: path,\n      value: _this.$__getValue(path),\n      schema: _this.$__path(path)\n    };\n  }));\n\n  const allPaths = new Map(all.filter((el) => el != null).map((el) => [el.path, el.value]));\n  // Ignore \"foo.a\" if \"foo\" is dirty already.\n  const minimal = [];\n\n  all.forEach(function(item) {\n    if (!item) {\n      return;\n    }\n\n    let top = null;\n\n    const array = parentPaths(item.path);\n    for (let i = 0; i < array.length - 1; i++) {\n      if (allPaths.has(array[i])) {\n        top = allPaths.get(array[i]);\n        break;\n      }\n    }\n    if (top == null) {\n      minimal.push(item);\n    } else if (top != null &&\n        top[arrayAtomicsSymbol] != null &&\n        top.hasAtomics()) {\n      // special case for top level MongooseArrays\n      // the `top` array itself and a sub path of `top` are being set.\n      // the only way to honor all of both modifications is through a $set\n      // of entire array.\n      top[arrayAtomicsSymbol] = {};\n      top[arrayAtomicsSymbol].$set = top;\n    }\n  });\n  return minimal;\n};\n\n/**\n * Assigns/compiles `schema` into this documents prototype.\n *\n * @param {Schema} schema\n * @api private\n * @method $__setSchema\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.$__setSchema = function(schema) {\n  compile(schema.tree, this, undefined, schema.options);\n\n  // Apply default getters if virtual doesn't have any (gh-6262)\n  for (const key of Object.keys(schema.virtuals)) {\n    schema.virtuals[key]._applyDefaultGetters();\n  }\n  if (schema.path('schema') == null) {\n    this.schema = schema;\n  }\n  this.$__schema = schema;\n  this[documentSchemaSymbol] = schema;\n};\n\n\n/**\n * Get active path that were changed and are arrays\n *\n * @return {Array}\n * @api private\n * @method $__getArrayPathsToValidate\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.$__getArrayPathsToValidate = function() {\n  DocumentArray || (DocumentArray = require('./types/documentArray'));\n\n  // validate all document arrays.\n  return this.$__.activePaths\n    .map('init', 'modify', function(i) {\n      return this.$__getValue(i);\n    }.bind(this))\n    .filter(function(val) {\n      return val && Array.isArray(val) && utils.isMongooseDocumentArray(val) && val.length;\n    }).reduce(function(seed, array) {\n      return seed.concat(array);\n    }, [])\n    .filter(function(doc) {\n      return doc;\n    });\n};\n\n\n/**\n * Get all subdocs (by bfs)\n *\n * @return {Array}\n * @api public\n * @method $getAllSubdocs\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.$getAllSubdocs = function() {\n  DocumentArray || (DocumentArray = require('./types/documentArray'));\n  Embedded = Embedded || require('./types/arraySubdocument');\n\n  function docReducer(doc, seed, path) {\n    let val = doc;\n    let isNested = false;\n    if (path) {\n      if (doc instanceof Document && doc[documentSchemaSymbol].paths[path]) {\n        val = doc._doc[path];\n      } else if (doc instanceof Document && doc[documentSchemaSymbol].nested[path]) {\n        val = doc._doc[path];\n        isNested = true;\n      } else {\n        val = doc[path];\n      }\n    }\n    if (val instanceof Embedded) {\n      seed.push(val);\n    } else if (val instanceof Map) {\n      seed = Array.from(val.keys()).reduce(function(seed, path) {\n        return docReducer(val.get(path), seed, null);\n      }, seed);\n    } else if (val && !Array.isArray(val) && val.$isSingleNested) {\n      seed = Object.keys(val._doc).reduce(function(seed, path) {\n        return docReducer(val, seed, path);\n      }, seed);\n      seed.push(val);\n    } else if (val && utils.isMongooseDocumentArray(val)) {\n      val.forEach(function _docReduce(doc) {\n        if (!doc || !doc._doc) {\n          return;\n        }\n        seed = Object.keys(doc._doc).reduce(function(seed, path) {\n          return docReducer(doc._doc, seed, path);\n        }, seed);\n        if (doc instanceof Embedded) {\n          seed.push(doc);\n        }\n      });\n    } else if (isNested && val != null) {\n      for (const path of Object.keys(val)) {\n        docReducer(val, seed, path);\n      }\n    }\n    return seed;\n  }\n\n  const subDocs = [];\n  for (const path of Object.keys(this._doc)) {\n    docReducer(this, subDocs, path);\n  }\n\n  return subDocs;\n};\n\n/*!\n * Runs queued functions\n */\n\nfunction applyQueue(doc) {\n  const q = doc.$__schema && doc.$__schema.callQueue;\n  if (!q.length) {\n    return;\n  }\n\n  for (const pair of q) {\n    if (pair[0] !== 'pre' && pair[0] !== 'post' && pair[0] !== 'on') {\n      doc[pair[0]].apply(doc, pair[1]);\n    }\n  }\n}\n\n/*!\n * ignore\n */\n\nDocument.prototype.$__handleReject = function handleReject(err) {\n  // emit on the Model if listening\n  if (this.$listeners('error').length) {\n    this.$emit('error', err);\n  } else if (this.constructor.listeners && this.constructor.listeners('error').length) {\n    this.constructor.emit('error', err);\n  }\n};\n\n/**\n * Internal helper for toObject() and toJSON() that doesn't manipulate options\n *\n * @return {Object}\n * @api private\n * @method $toObject\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.$toObject = function(options, json) {\n  let defaultOptions = {\n    transform: true,\n    flattenDecimals: true\n  };\n\n  const path = json ? 'toJSON' : 'toObject';\n  const baseOptions = this.constructor &&\n    this.constructor.base &&\n    this.constructor.base.options &&\n    get(this.constructor.base.options, path) || {};\n  const schemaOptions = this.$__schema && this.$__schema.options || {};\n  // merge base default options with Schema's set default options if available.\n  // `clone` is necessary here because `utils.options` directly modifies the second input.\n  defaultOptions = { ...defaultOptions, ...baseOptions, ...schemaOptions[path] };\n\n  // If options do not exist or is not an object, set it to empty object\n  options = utils.isPOJO(options) ? { ...options } : {};\n  options._calledWithOptions = options._calledWithOptions || { ...options };\n\n  let _minimize;\n  if (options._calledWithOptions.minimize != null) {\n    _minimize = options.minimize;\n  } else if (defaultOptions.minimize != null) {\n    _minimize = defaultOptions.minimize;\n  } else {\n    _minimize = schemaOptions.minimize;\n  }\n\n  let flattenMaps;\n  if (options._calledWithOptions.flattenMaps != null) {\n    flattenMaps = options.flattenMaps;\n  } else if (defaultOptions.flattenMaps != null) {\n    flattenMaps = defaultOptions.flattenMaps;\n  } else {\n    flattenMaps = schemaOptions.flattenMaps;\n  }\n\n  let flattenObjectIds;\n  if (options._calledWithOptions.flattenObjectIds != null) {\n    flattenObjectIds = options.flattenObjectIds;\n  } else if (defaultOptions.flattenObjectIds != null) {\n    flattenObjectIds = defaultOptions.flattenObjectIds;\n  } else {\n    flattenObjectIds = schemaOptions.flattenObjectIds;\n  }\n\n  // The original options that will be passed to `clone()`. Important because\n  // `clone()` will recursively call `$toObject()` on embedded docs, so we\n  // need the original options the user passed in, plus `_isNested` and\n  // `_parentOptions` for checking whether we need to depopulate.\n  const cloneOptions = Object.assign({}, options, {\n    _isNested: true,\n    json: json,\n    minimize: _minimize,\n    flattenMaps: flattenMaps,\n    flattenObjectIds: flattenObjectIds,\n    _seen: (options && options._seen) || new Map()\n  });\n\n  if (utils.hasUserDefinedProperty(options, 'getters')) {\n    cloneOptions.getters = options.getters;\n  }\n  if (utils.hasUserDefinedProperty(options, 'virtuals')) {\n    cloneOptions.virtuals = options.virtuals;\n  }\n\n  const depopulate = options.depopulate ||\n    (options._parentOptions && options._parentOptions.depopulate || false);\n  // _isNested will only be true if this is not the top level document, we\n  // should never depopulate the top-level document\n  if (depopulate && options._isNested && this.$__.wasPopulated) {\n    return clone(this.$__.wasPopulated.value || this._id, cloneOptions);\n  }\n\n  // merge default options with input options.\n  options = { ...defaultOptions, ...options };\n  options._isNested = true;\n  options.json = json;\n  options.minimize = _minimize;\n\n  cloneOptions._parentOptions = options;\n  cloneOptions._skipSingleNestedGetters = false;\n\n  const gettersOptions = Object.assign({}, cloneOptions);\n  gettersOptions._skipSingleNestedGetters = true;\n\n  // remember the root transform function\n  // to save it from being overwritten by sub-transform functions\n  const originalTransform = options.transform;\n\n  let ret = clone(this._doc, cloneOptions) || {};\n\n  if (options.getters) {\n    applyGetters(this, ret, gettersOptions);\n\n    if (options.minimize) {\n      ret = minimize(ret) || {};\n    }\n  }\n\n  if (options.virtuals || (options.getters && options.virtuals !== false)) {\n    applyVirtuals(this, ret, gettersOptions, options);\n  }\n\n  if (options.versionKey === false && this.$__schema.options.versionKey) {\n    delete ret[this.$__schema.options.versionKey];\n  }\n\n  let transform = options.transform;\n\n  // In the case where a subdocument has its own transform function, we need to\n  // check and see if the parent has a transform (options.transform) and if the\n  // child schema has a transform (this.schema.options.toObject) In this case,\n  // we need to adjust options.transform to be the child schema's transform and\n  // not the parent schema's\n  if (transform) {\n    applySchemaTypeTransforms(this, ret);\n  }\n\n  if (options.useProjection) {\n    omitDeselectedFields(this, ret);\n  }\n\n  if (transform === true || (schemaOptions.toObject && transform)) {\n    const opts = options.json ? schemaOptions.toJSON : schemaOptions.toObject;\n\n    if (opts) {\n      transform = (typeof options.transform === 'function' ? options.transform : opts.transform);\n    }\n  } else {\n    options.transform = originalTransform;\n  }\n\n  if (typeof transform === 'function') {\n    const xformed = transform(this, ret, options);\n    if (typeof xformed !== 'undefined') {\n      ret = xformed;\n    }\n  }\n\n  return ret;\n};\n\n/**\n * Converts this document into a plain-old JavaScript object ([POJO](https://masteringjs.io/tutorials/fundamentals/pojo)).\n *\n * Buffers are converted to instances of [mongodb.Binary](https://mongodb.github.io/node-mongodb-native/4.9/classes/Binary.html) for proper storage.\n *\n * #### Getters/Virtuals\n *\n * Example of only applying path getters\n *\n *     doc.toObject({ getters: true, virtuals: false })\n *\n * Example of only applying virtual getters\n *\n *     doc.toObject({ virtuals: true })\n *\n * Example of applying both path and virtual getters\n *\n *     doc.toObject({ getters: true })\n *\n * To apply these options to every document of your schema by default, set your [schemas](https://mongoosejs.com/docs/api/schema.html#Schema()) `toObject` option to the same argument.\n *\n *     schema.set('toObject', { virtuals: true })\n *\n * #### Transform:\n *\n * We may need to perform a transformation of the resulting object based on some criteria, say to remove some sensitive information or return a custom object. In this case we set the optional `transform` function.\n *\n * Transform functions receive three arguments\n *\n *     function (doc, ret, options) {}\n *\n * - `doc` The mongoose document which is being converted\n * - `ret` The plain object representation which has been converted\n * - `options` The options in use (either schema options or the options passed inline)\n *\n * #### Example:\n *\n *     // specify the transform schema option\n *     if (!schema.options.toObject) schema.options.toObject = {};\n *     schema.options.toObject.transform = function (doc, ret, options) {\n *       // remove the _id of every document before returning the result\n *       delete ret._id;\n *       return ret;\n *     }\n *\n *     // without the transformation in the schema\n *     doc.toObject(); // { _id: 'anId', name: 'Wreck-it Ralph' }\n *\n *     // with the transformation\n *     doc.toObject(); // { name: 'Wreck-it Ralph' }\n *\n * With transformations we can do a lot more than remove properties. We can even return completely new customized objects:\n *\n *     if (!schema.options.toObject) schema.options.toObject = {};\n *     schema.options.toObject.transform = function (doc, ret, options) {\n *       return { movie: ret.name }\n *     }\n *\n *     // without the transformation in the schema\n *     doc.toObject(); // { _id: 'anId', name: 'Wreck-it Ralph' }\n *\n *     // with the transformation\n *     doc.toObject(); // { movie: 'Wreck-it Ralph' }\n *\n * _Note: if a transform function returns `undefined`, the return value will be ignored._\n *\n * Transformations may also be applied inline, overridding any transform set in the schema options.\n * Any transform function specified in `toObject` options also propagates to any subdocuments.\n *\n *     function deleteId(doc, ret, options) {\n *       delete ret._id;\n *       return ret;\n *     }\n *\n *     const schema = mongoose.Schema({ name: String, docArr: [{ name: String }] });\n *     const TestModel = mongoose.model('Test', schema);\n *\n *     const doc = new TestModel({ name: 'test', docArr: [{ name: 'test' }] });\n *\n *     // pass the transform as an inline option. Deletes `_id` property\n *     // from both the top-level document and the subdocument.\n *     const obj = doc.toObject({ transform: deleteId });\n *     obj._id; // undefined\n *     obj.docArr[0]._id; // undefined\n *\n * If you want to skip transformations, use `transform: false`:\n *\n *     schema.options.toObject.hide = '_id';\n *     schema.options.toObject.transform = function (doc, ret, options) {\n *       if (options.hide) {\n *         options.hide.split(' ').forEach(function (prop) {\n *           delete ret[prop];\n *         });\n *       }\n *       return ret;\n *     }\n *\n *     const doc = new Doc({ _id: 'anId', secret: 47, name: 'Wreck-it Ralph' });\n *     doc.toObject();                                        // { secret: 47, name: 'Wreck-it Ralph' }\n *     doc.toObject({ hide: 'secret _id', transform: false });// { _id: 'anId', secret: 47, name: 'Wreck-it Ralph' }\n *     doc.toObject({ hide: 'secret _id', transform: true }); // { name: 'Wreck-it Ralph' }\n *\n * If you pass a transform in `toObject()` options, Mongoose will apply the transform\n * to [subdocuments](https://mongoosejs.com/docs/subdocs.html) in addition to the top-level document.\n * Similarly, `transform: false` skips transforms for all subdocuments.\n * Note that this behavior is different for transforms defined in the schema:\n * if you define a transform in `schema.options.toObject.transform`, that transform\n * will **not** apply to subdocuments.\n *\n *     const memberSchema = new Schema({ name: String, email: String });\n *     const groupSchema = new Schema({ members: [memberSchema], name: String, email });\n *     const Group = mongoose.model('Group', groupSchema);\n *\n *     const doc = new Group({\n *       name: 'Engineering',\n *       email: 'dev@mongoosejs.io',\n *       members: [{ name: 'Val', email: 'val@mongoosejs.io' }]\n *     });\n *\n *     // Removes `email` from both top-level document **and** array elements\n *     // { name: 'Engineering', members: [{ name: 'Val' }] }\n *     doc.toObject({ transform: (doc, ret) => { delete ret.email; return ret; } });\n *\n * Transforms, like all of these options, are also available for `toJSON`. See [this guide to `JSON.stringify()`](https://thecodebarbarian.com/the-80-20-guide-to-json-stringify-in-javascript.html) to learn why `toJSON()` and `toObject()` are separate functions.\n *\n * See [schema options](https://mongoosejs.com/docs/guide.html#toObject) for some more details.\n *\n * _During save, no custom options are applied to the document before being sent to the database._\n *\n * @param {Object} [options]\n * @param {Boolean} [options.getters=false] if true, apply all getters, including virtuals\n * @param {Boolean|Object} [options.virtuals=false] if true, apply virtuals, including aliases. Use `{ getters: true, virtuals: false }` to just apply getters, not virtuals. An object of the form `{ pathsToSkip: ['someVirtual'] }` may also be used to omit specific virtuals.\n * @param {Boolean} [options.aliases=true] if `options.virtuals = true`, you can set `options.aliases = false` to skip applying aliases. This option is a no-op if `options.virtuals = false`.\n * @param {Boolean} [options.minimize=true] if true, omit any empty objects from the output\n * @param {Function|null} [options.transform=null] if set, mongoose will call this function to allow you to transform the returned object\n * @param {Boolean} [options.depopulate=false] if true, replace any conventionally populated paths with the original id in the output. Has no affect on virtual populated paths.\n * @param {Boolean} [options.versionKey=true] if false, exclude the version key (`__v` by default) from the output\n * @param {Boolean} [options.flattenMaps=false] if true, convert Maps to POJOs. Useful if you want to `JSON.stringify()` the result of `toObject()`.\n * @param {Boolean} [options.flattenObjectIds=false] if true, convert any ObjectIds in the result to 24 character hex strings.\n * @param {Boolean} [options.useProjection=false] - If true, omits fields that are excluded in this document's projection. Unless you specified a projection, this will omit any field that has `select: false` in the schema.\n * @return {Object} js object (not a POJO)\n * @see mongodb.Binary https://mongodb.github.io/node-mongodb-native/4.9/classes/Binary.html\n * @api public\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.toObject = function(options) {\n  return this.$toObject(options);\n};\n\n/*!\n * Applies virtuals properties to `json`.\n */\n\nfunction applyVirtuals(self, json, options, toObjectOptions) {\n  const schema = self.$__schema;\n  const paths = Object.keys(schema.virtuals);\n  let i = paths.length;\n  const numPaths = i;\n  let path;\n  let assignPath;\n  let cur = self._doc;\n  let v;\n  const aliases = typeof (toObjectOptions && toObjectOptions.aliases) === 'boolean'\n    ? toObjectOptions.aliases\n    : true;\n\n  let virtualsToApply = null;\n  if (Array.isArray(options.virtuals)) {\n    virtualsToApply = new Set(options.virtuals);\n  } else if (options.virtuals && options.virtuals.pathsToSkip) {\n    virtualsToApply = new Set(paths);\n    for (let i = 0; i < options.virtuals.pathsToSkip.length; i++) {\n      if (virtualsToApply.has(options.virtuals.pathsToSkip[i])) {\n        virtualsToApply.delete(options.virtuals.pathsToSkip[i]);\n      }\n    }\n  }\n\n  if (!cur) {\n    return json;\n  }\n\n  options = options || {};\n  for (i = 0; i < numPaths; ++i) {\n    path = paths[i];\n\n    if (virtualsToApply != null && !virtualsToApply.has(path)) {\n      continue;\n    }\n\n    // Allow skipping aliases with `toObject({ virtuals: true, aliases: false })`\n    if (!aliases && schema.aliases.hasOwnProperty(path)) {\n      continue;\n    }\n\n    // We may be applying virtuals to a nested object, for example if calling\n    // `doc.nestedProp.toJSON()`. If so, the path we assign to, `assignPath`,\n    // will be a trailing substring of the `path`.\n    assignPath = path;\n    if (options.path != null) {\n      if (!path.startsWith(options.path + '.')) {\n        continue;\n      }\n      assignPath = path.substring(options.path.length + 1);\n    }\n    const parts = assignPath.split('.');\n    v = clone(self.get(path), options);\n    if (v === void 0) {\n      continue;\n    }\n    const plen = parts.length;\n    cur = json;\n    for (let j = 0; j < plen - 1; ++j) {\n      cur[parts[j]] = cur[parts[j]] || {};\n      cur = cur[parts[j]];\n    }\n    cur[parts[plen - 1]] = v;\n  }\n\n  return json;\n}\n\n\n/**\n * Applies virtuals properties to `json`.\n *\n * @param {Document} self\n * @param {Object} json\n * @param {Object} [options]\n * @return {Object} `json`\n * @api private\n */\n\nfunction applyGetters(self, json, options) {\n  const schema = self.$__schema;\n  const paths = Object.keys(schema.paths);\n  let i = paths.length;\n  let path;\n  let cur = self._doc;\n  let v;\n\n  if (!cur) {\n    return json;\n  }\n\n  while (i--) {\n    path = paths[i];\n\n    const parts = path.split('.');\n\n    const plen = parts.length;\n    const last = plen - 1;\n    let branch = json;\n    let part;\n    cur = self._doc;\n\n    if (!self.$__isSelected(path)) {\n      continue;\n    }\n\n    for (let ii = 0; ii < plen; ++ii) {\n      part = parts[ii];\n      v = cur[part];\n      if (ii === last) {\n        const val = self.$get(path);\n        branch[part] = clone(val, options);\n        if (Array.isArray(branch[part]) && schema.paths[path].$embeddedSchemaType) {\n          for (let i = 0; i < branch[part].length; ++i) {\n            branch[part][i] = schema.paths[path].$embeddedSchemaType.applyGetters(\n              branch[part][i],\n              self\n            );\n          }\n        }\n      } else if (v == null) {\n        if (part in cur) {\n          branch[part] = v;\n        }\n        break;\n      } else {\n        branch = branch[part] || (branch[part] = {});\n      }\n      cur = v;\n    }\n  }\n\n  return json;\n}\n\n/**\n * Applies schema type transforms to `json`.\n *\n * @param {Document} self\n * @param {Object} json\n * @return {Object} `json`\n * @api private\n */\n\nfunction applySchemaTypeTransforms(self, json) {\n  const schema = self.$__schema;\n  const paths = Object.keys(schema.paths || {});\n  const cur = self._doc;\n\n  if (!cur) {\n    return json;\n  }\n\n  for (const path of paths) {\n    const schematype = schema.paths[path];\n    if (typeof schematype.options.transform === 'function') {\n      const val = self.$get(path);\n      if (val === undefined) {\n        continue;\n      }\n      const transformedValue = schematype.options.transform.call(self, val);\n      throwErrorIfPromise(path, transformedValue);\n      utils.setValue(path, transformedValue, json);\n    } else if (schematype.$embeddedSchemaType != null &&\n        typeof schematype.$embeddedSchemaType.options.transform === 'function') {\n      const val = self.$get(path);\n      if (val === undefined) {\n        continue;\n      }\n      const vals = [].concat(val);\n      const transform = schematype.$embeddedSchemaType.options.transform;\n      for (let i = 0; i < vals.length; ++i) {\n        const transformedValue = transform.call(self, vals[i]);\n        vals[i] = transformedValue;\n        throwErrorIfPromise(path, transformedValue);\n      }\n\n      json[path] = vals;\n    }\n  }\n\n  return json;\n}\n\nfunction throwErrorIfPromise(path, transformedValue) {\n  if (isPromise(transformedValue)) {\n    throw new Error('`transform` function must be synchronous, but the transform on path `' + path + '` returned a promise.');\n  }\n}\n\n/*!\n * ignore\n */\n\nfunction omitDeselectedFields(self, json) {\n  const schema = self.$__schema;\n  const paths = Object.keys(schema.paths || {});\n  const cur = self._doc;\n\n  if (!cur) {\n    return json;\n  }\n\n  let selected = self.$__.selected;\n  if (selected === void 0) {\n    selected = {};\n    queryhelpers.applyPaths(selected, schema);\n  }\n  if (selected == null || Object.keys(selected).length === 0) {\n    return json;\n  }\n\n  for (const path of paths) {\n    if (selected[path] != null && !selected[path]) {\n      delete json[path];\n    }\n  }\n\n  return json;\n}\n\n/**\n * The return value of this method is used in calls to [`JSON.stringify(doc)`](https://thecodebarbarian.com/the-80-20-guide-to-json-stringify-in-javascript#the-tojson-function).\n *\n * This method accepts the same options as [Document#toObject](https://mongoosejs.com/docs/api/document.html#Document.prototype.toObject()). To apply the options to every document of your schema by default, set your [schemas](https://mongoosejs.com/docs/api/schema.html#Schema()) `toJSON` option to the same argument.\n *\n *     schema.set('toJSON', { virtuals: true });\n *\n * There is one difference between `toJSON()` and `toObject()` options.\n * When you call `toJSON()`, the [`flattenMaps` option](https://mongoosejs.com/docs/api/document.html#Document.prototype.toObject()) defaults to `true`, because `JSON.stringify()` doesn't convert maps to objects by default.\n * When you call `toObject()`, the `flattenMaps` option is `false` by default.\n *\n * See [schema options](https://mongoosejs.com/docs/guide.html#toJSON) for more information on setting `toJSON` option defaults.\n *\n * @param {Object} options\n * @param {Boolean} [options.flattenMaps=true] if true, convert Maps to [POJOs](https://masteringjs.io/tutorials/fundamentals/pojo). Useful if you want to `JSON.stringify()` the result.\n * @param {Boolean} [options.flattenObjectIds=false] if true, convert any ObjectIds in the result to 24 character hex strings.\n * @return {Object}\n * @see Document#toObject https://mongoosejs.com/docs/api/document.html#Document.prototype.toObject()\n * @see JSON.stringify() in JavaScript https://thecodebarbarian.com/the-80-20-guide-to-json-stringify-in-javascript.html\n * @api public\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.toJSON = function(options) {\n  return this.$toObject(options, true);\n};\n\n/*!\n * ignore\n */\n\nDocument.prototype.ownerDocument = function() {\n  return this;\n};\n\n\n/**\n * If this document is a subdocument or populated document, returns the document's\n * parent. Returns the original document if there is no parent.\n *\n * @return {Document}\n * @api public\n * @method parent\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.parent = function() {\n  if (this.$isSubdocument || this.$__.wasPopulated) {\n    return this.$__.parent;\n  }\n  return this;\n};\n\n/**\n * Alias for [`parent()`](https://mongoosejs.com/docs/api/document.html#Document.prototype.parent()). If this document is a subdocument or populated\n * document, returns the document's parent. Returns `undefined` otherwise.\n *\n * @return {Document}\n * @api public\n * @method $parent\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.$parent = Document.prototype.parent;\n\n/**\n * Helper for console.log\n *\n * @return {String}\n * @api public\n * @method inspect\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.inspect = function(options) {\n  const isPOJO = utils.isPOJO(options);\n  let opts;\n  if (isPOJO) {\n    opts = options;\n    opts.minimize = false;\n  }\n\n  const ret = arguments.length > 0 ? this.toObject(opts) : this.toObject();\n\n  if (ret == null) {\n    // If `toObject()` returns null, `this` is still an object, so if `inspect()`\n    // prints out null this can cause some serious confusion. See gh-7942.\n    return 'MongooseDocument { ' + ret + ' }';\n  }\n\n  return ret;\n};\n\nif (inspect.custom) {\n  // Avoid Node deprecation warning DEP0079\n  Document.prototype[inspect.custom] = Document.prototype.inspect;\n}\n\n/**\n * Helper for console.log\n *\n * @return {String}\n * @api public\n * @method toString\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.toString = function() {\n  const ret = this.inspect();\n  if (typeof ret === 'string') {\n    return ret;\n  }\n  return inspect(ret);\n};\n\n/**\n * Returns true if this document is equal to another document.\n *\n * Documents are considered equal when they have matching `_id`s, unless neither\n * document has an `_id`, in which case this function falls back to using\n * `deepEqual()`.\n *\n * @param {Document} [doc] a document to compare. If falsy, will always return \"false\".\n * @return {Boolean}\n * @api public\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.equals = function(doc) {\n  if (!doc) {\n    return false;\n  }\n\n  const tid = this.$__getValue('_id');\n  const docid = doc.$__ != null ? doc.$__getValue('_id') : doc;\n  if (!tid && !docid) {\n    return deepEqual(this, doc);\n  }\n  return tid && tid.equals\n    ? tid.equals(docid)\n    : tid === docid;\n};\n\n/**\n * Populates paths on an existing document.\n *\n * #### Example:\n *\n *     // Given a document, `populate()` lets you pull in referenced docs\n *     await doc.populate([\n *       'stories',\n *       { path: 'fans', sort: { name: -1 } }\n *     ]);\n *     doc.populated('stories'); // Array of ObjectIds\n *     doc.stories[0].title; // 'Casino Royale'\n *     doc.populated('fans'); // Array of ObjectIds\n *\n *     // If the referenced doc has been deleted, `populate()` will\n *     // remove that entry from the array.\n *     await Story.delete({ title: 'Casino Royale' });\n *     await doc.populate('stories'); // Empty array\n *\n *     // You can also pass additional query options to `populate()`,\n *     // like projections:\n *     await doc.populate('fans', '-email');\n *     doc.fans[0].email // undefined because of 2nd param `select`\n *\n * @param {String|Object|Array} path either the path to populate or an object specifying all parameters, or either an array of those\n * @param {Object|String} [select] Field selection for the population query\n * @param {Model} [model] The model you wish to use for population. If not specified, populate will look up the model by the name in the Schema's `ref` field.\n * @param {Object} [match] Conditions for the population query\n * @param {Object} [options] Options for the population query (sort, etc)\n * @param {String} [options.path=null] The path to populate.\n * @param {string|PopulateOptions} [options.populate=null] Recursively populate paths in the populated documents. See [deep populate docs](https://mongoosejs.com/docs/populate.html#deep-populate).\n * @param {boolean} [options.retainNullValues=false] by default, Mongoose removes null and undefined values from populated arrays. Use this option to make `populate()` retain `null` and `undefined` array entries.\n * @param {boolean} [options.getters=false] if true, Mongoose will call any getters defined on the `localField`. By default, Mongoose gets the raw value of `localField`. For example, you would need to set this option to `true` if you wanted to [add a `lowercase` getter to your `localField`](https://mongoosejs.com/docs/schematypes.html#schematype-options).\n * @param {boolean} [options.clone=false] When you do `BlogPost.find().populate('author')`, blog posts with the same author will share 1 copy of an `author` doc. Enable this option to make Mongoose clone populated docs before assigning them.\n * @param {Object|Function} [options.match=null] Add an additional filter to the populate query. Can be a filter object containing [MongoDB query syntax](https://www.mongodb.com/docs/manual/tutorial/query-documents/), or a function that returns a filter object.\n * @param {Function} [options.transform=null] Function that Mongoose will call on every populated document that allows you to transform the populated document.\n * @param {Object} [options.options=null] Additional options like `limit` and `lean`.\n * @param {Function} [callback] Callback\n * @see population https://mongoosejs.com/docs/populate.html\n * @see Query#select https://mongoosejs.com/docs/api/query.html#Query.prototype.select()\n * @see Model.populate https://mongoosejs.com/docs/api/model.html#Model.populate()\n * @memberOf Document\n * @instance\n * @return {Promise|null} Returns a Promise if no `callback` is given.\n * @api public\n */\n\nDocument.prototype.populate = async function populate() {\n  const pop = {};\n  const args = [...arguments];\n  if (typeof args[args.length - 1] === 'function') {\n    throw new MongooseError('Document.prototype.populate() no longer accepts a callback');\n  }\n\n  if (args.length !== 0) {\n    // use hash to remove duplicate paths\n    const res = utils.populate.apply(null, args);\n    for (const populateOptions of res) {\n      pop[populateOptions.path] = populateOptions;\n    }\n  }\n\n  const paths = utils.object.vals(pop);\n  let topLevelModel = this.constructor;\n  if (this.$__isNested) {\n    topLevelModel = this.$__[scopeSymbol].constructor;\n    const nestedPath = this.$__.nestedPath;\n    paths.forEach(function(populateOptions) {\n      populateOptions.path = nestedPath + '.' + populateOptions.path;\n    });\n  }\n\n  // Use `$session()` by default if the document has an associated session\n  // See gh-6754\n  if (this.$session() != null) {\n    const session = this.$session();\n    paths.forEach(path => {\n      if (path.options == null) {\n        path.options = { session: session };\n        return;\n      }\n      if (!('session' in path.options)) {\n        path.options.session = session;\n      }\n    });\n  }\n\n  paths.forEach(p => {\n    p._localModel = topLevelModel;\n  });\n\n  return topLevelModel.populate(this, paths);\n};\n\n/**\n * Gets all populated documents associated with this document.\n *\n * @api public\n * @return {Document[]} array of populated documents. Empty array if there are no populated documents associated with this document.\n * @memberOf Document\n * @method $getPopulatedDocs\n * @instance\n */\n\nDocument.prototype.$getPopulatedDocs = function $getPopulatedDocs() {\n  let keys = [];\n  if (this.$__.populated != null) {\n    keys = keys.concat(Object.keys(this.$__.populated));\n  }\n  let result = [];\n  for (const key of keys) {\n    const value = this.$get(key);\n    if (Array.isArray(value)) {\n      result = result.concat(value);\n    } else if (value instanceof Document) {\n      result.push(value);\n    }\n  }\n  return result;\n};\n\n/**\n * Gets _id(s) used during population of the given `path`.\n *\n * #### Example:\n *\n *     const doc = await Model.findOne().populate('author');\n *\n *     console.log(doc.author.name); // Dr.Seuss\n *     console.log(doc.populated('author')); // '5144cf8050f071d979c118a7'\n *\n * If the path was not populated, returns `undefined`.\n *\n * @param {String} path\n * @param {Any} [val]\n * @param {Object} [options]\n * @return {Array|ObjectId|Number|Buffer|String|undefined}\n * @memberOf Document\n * @instance\n * @api public\n */\n\nDocument.prototype.populated = function(path, val, options) {\n  // val and options are internal\n  if (val == null || val === true) {\n    if (!this.$__.populated) {\n      return undefined;\n    }\n    if (typeof path !== 'string') {\n      return undefined;\n    }\n\n    // Map paths can be populated with either `path.$*` or just `path`\n    const _path = path.endsWith('.$*') ? path.replace(/\\.\\$\\*$/, '') : path;\n\n    const v = this.$__.populated[_path];\n    if (v) {\n      return val === true ? v : v.value;\n    }\n    return undefined;\n  }\n\n  this.$__.populated || (this.$__.populated = {});\n  this.$__.populated[path] = { value: val, options: options };\n\n  // If this was a nested populate, make sure each populated doc knows\n  // about its populated children (gh-7685)\n  const pieces = path.split('.');\n  for (let i = 0; i < pieces.length - 1; ++i) {\n    const subpath = pieces.slice(0, i + 1).join('.');\n    const subdoc = this.$get(subpath);\n    if (subdoc != null && subdoc.$__ != null && this.$populated(subpath)) {\n      const rest = pieces.slice(i + 1).join('.');\n      subdoc.$populated(rest, val, options);\n      // No need to continue because the above recursion should take care of\n      // marking the rest of the docs as populated\n      break;\n    }\n  }\n\n  return val;\n};\n\n/**\n * Alias of [`.populated`](https://mongoosejs.com/docs/api/document.html#Document.prototype.populated()).\n *\n * @method $populated\n * @memberOf Document\n * @api public\n */\n\nDocument.prototype.$populated = Document.prototype.populated;\n\n/**\n * Throws an error if a given path is not populated\n *\n * #### Example:\n *\n *     const doc = await Model.findOne().populate('author');\n *\n *     doc.$assertPopulated('author'); // does not throw\n *     doc.$assertPopulated('other path'); // throws an error\n *\n *     // Manually populate and assert in one call. The following does\n *     // `doc.$set({ likes })` before asserting.\n *     doc.$assertPopulated('likes', { likes });\n *\n *\n * @param {String|String[]} path path or array of paths to check. `$assertPopulated` throws if any of the given paths is not populated.\n * @param {Object} [values] optional values to `$set()`. Convenient if you want to manually populate a path and assert that the path was populated in 1 call.\n * @return {Document} this\n * @memberOf Document\n * @method $assertPopulated\n * @instance\n * @api public\n */\n\nDocument.prototype.$assertPopulated = function $assertPopulated(path, values) {\n  if (Array.isArray(path)) {\n    path.forEach(p => this.$assertPopulated(p, values));\n    return this;\n  }\n\n  if (arguments.length > 1) {\n    this.$set(values);\n  }\n\n  if (!this.$populated(path)) {\n    throw new MongooseError(`Expected path \"${path}\" to be populated`);\n  }\n\n  return this;\n};\n\n/**\n * Takes a populated field and returns it to its unpopulated state.\n *\n * #### Example:\n *\n *     Model.findOne().populate('author').exec(function (err, doc) {\n *       console.log(doc.author.name); // Dr.Seuss\n *       console.log(doc.depopulate('author'));\n *       console.log(doc.author); // '5144cf8050f071d979c118a7'\n *     })\n *\n * If the path was not provided, then all populated fields are returned to their unpopulated state.\n *\n * @param {String|String[]} [path] Specific Path to depopulate. If unset, will depopulate all paths on the Document. Or multiple space-delimited paths.\n * @return {Document} this\n * @see Document.populate https://mongoosejs.com/docs/api/document.html#Document.prototype.populate()\n * @api public\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.depopulate = function(path) {\n  if (typeof path === 'string') {\n    path = path.indexOf(' ') === -1 ? [path] : path.split(' ');\n  }\n\n  let populatedIds;\n  const virtualKeys = this.$$populatedVirtuals ? Object.keys(this.$$populatedVirtuals) : [];\n  const populated = this.$__ && this.$__.populated || {};\n\n  if (arguments.length === 0) {\n    // Depopulate all\n    for (const virtualKey of virtualKeys) {\n      delete this.$$populatedVirtuals[virtualKey];\n      delete this._doc[virtualKey];\n      delete populated[virtualKey];\n    }\n\n    const keys = Object.keys(populated);\n\n    for (const key of keys) {\n      populatedIds = this.$populated(key);\n      if (!populatedIds) {\n        continue;\n      }\n      delete populated[key];\n      utils.setValue(key, populatedIds, this._doc);\n    }\n    return this;\n  }\n\n  for (const singlePath of path) {\n    populatedIds = this.$populated(singlePath);\n    delete populated[singlePath];\n\n    if (virtualKeys.indexOf(singlePath) !== -1) {\n      delete this.$$populatedVirtuals[singlePath];\n      delete this._doc[singlePath];\n    } else if (populatedIds) {\n      utils.setValue(singlePath, populatedIds, this._doc);\n    }\n  }\n  return this;\n};\n\n\n/**\n * Returns the full path to this document.\n *\n * @param {String} [path]\n * @return {String}\n * @api private\n * @method $__fullPath\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.$__fullPath = function(path) {\n  // overridden in SubDocuments\n  return path || '';\n};\n\n/**\n * Returns the changes that happened to the document\n * in the format that will be sent to MongoDB.\n *\n * #### Example:\n *\n *     const userSchema = new Schema({\n *       name: String,\n *       age: Number,\n *       country: String\n *     });\n *     const User = mongoose.model('User', userSchema);\n *     const user = await User.create({\n *       name: 'Hafez',\n *       age: 25,\n *       country: 'Egypt'\n *     });\n *\n *     // returns an empty object, no changes happened yet\n *     user.getChanges(); // { }\n *\n *     user.country = undefined;\n *     user.age = 26;\n *\n *     user.getChanges(); // { $set: { age: 26 }, { $unset: { country: 1 } } }\n *\n *     await user.save();\n *\n *     user.getChanges(); // { }\n *\n * Modifying the object that `getChanges()` returns does not affect the document's\n * change tracking state. Even if you `delete user.getChanges().$set`, Mongoose\n * will still send a `$set` to the server.\n *\n * @return {Object}\n * @api public\n * @method getChanges\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.getChanges = function() {\n  const delta = this.$__delta();\n  const changes = delta ? delta[1] : {};\n  return changes;\n};\n\n/**\n * Returns a copy of this document with a deep clone of `_doc` and `$__`.\n *\n * @return {Document} a copy of this document\n * @api public\n * @method $clone\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.$clone = function() {\n  const Model = this.constructor;\n  const clonedDoc = new Model();\n  clonedDoc.$isNew = this.$isNew;\n  if (this._doc) {\n    clonedDoc._doc = clone(this._doc, { retainDocuments: true });\n  }\n  if (this.$__) {\n    const Cache = this.$__.constructor;\n    const clonedCache = new Cache();\n    for (const key of Object.getOwnPropertyNames(this.$__)) {\n      if (key === 'activePaths') {\n        continue;\n      }\n      clonedCache[key] = clone(this.$__[key]);\n    }\n    Object.assign(clonedCache.activePaths, clone({ ...this.$__.activePaths }));\n    clonedDoc.$__ = clonedCache;\n  }\n  return clonedDoc;\n};\n\n/*!\n * Module exports.\n */\n\nDocument.ValidationError = ValidationError;\nmodule.exports = exports = Document;\n"],"mappings":"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CA,IAAIA,SAAS,EAAE;IACbmQ,yBAAyB,CAAC,IAAI,EAAEhE,GAAG,CAAC;EACtC;EAEA,IAAIvX,OAAO,CAACwb,aAAa,EAAE;IACzBC,oBAAoB,CAAC,IAAI,EAAElE,GAAG,CAAC;EACjC;EAEA,IAAInM,SAAS,KAAK,IAAI,IAAKqK,aAAa,CAAC5P,QAAQ,IAAIuF,SAAU,EAAE;IAC/D,MAAMrF,IAAI,GAAG/F,OAAO,CAACqa,IAAI,GAAG5E,aAAa,CAACiG,MAAM,GAAGjG,aAAa,CAAC5P,QAAQ;IAEzE,IAAIE,IAAI,EAAE;MACRqF,SAAS,GAAI,OAAOpL,OAAO,CAACoL,SAAS,KAAK,UAAU,GAAGpL,OAAO,CAACoL,SAAS,GAAGrF,IAAI,CAACqF,SAAU;IAC5F;EACF,CAAC,MAAM;IACLpL,OAAO,CAACoL,SAAS,GAAGkQ,iBAAiB;EACvC;EAEA,IAAI,OAAOlQ,SAAS,KAAK,UAAU,EAAE;IACnC,MAAMuQ,OAAO,GAAGvQ,SAAS,CAAC,IAAI,EAAEmM,GAAG,EAAEvX,OAAO,CAAC;IAC7C,IAAI,OAAO2b,OAAO,KAAK,WAAW,EAAE;MAClCpE,GAAG,GAAGoE,OAAO;IACf;EACF;EAEA,OAAOpE,GAAG;AACZ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}