{"ast":null,"code":"/*!\n * Module dependencies.\n */\n\n'use strict';\n\nconst MongooseError = require('./mongooseError');\nconst allServersUnknown = require('../helpers/topology/allServersUnknown');\nconst isAtlas = require('../helpers/topology/isAtlas');\nconst isSSLError = require('../helpers/topology/isSSLError');\n\n/*!\n * ignore\n */\n\nconst atlasMessage = 'Could not connect to any servers in your MongoDB Atlas cluster. ' + 'One common reason is that you\\'re trying to access the database from ' + 'an IP that isn\\'t whitelisted. Make sure your current IP address is on your Atlas ' + 'cluster\\'s IP whitelist: https://www.mongodb.com/docs/atlas/security-whitelist/';\nconst sslMessage = 'Mongoose is connecting with SSL enabled, but the server is ' + 'not accepting SSL connections. Please ensure that the MongoDB server you are ' + 'connecting to is configured to accept SSL connections. Learn more: ' + 'https://mongoosejs.com/docs/tutorials/ssl.html';\nclass MongooseServerSelectionError extends MongooseError {\n  /**\n   * MongooseServerSelectionError constructor\n   *\n   * @api private\n   */\n  assimilateError(err) {\n    const reason = err.reason;\n    // Special message for a case that is likely due to IP whitelisting issues.\n    const isAtlasWhitelistError = isAtlas(reason) && allServersUnknown(reason) && err.message.indexOf('bad auth') === -1 && err.message.indexOf('Authentication failed') === -1;\n    if (isAtlasWhitelistError) {\n      this.message = atlasMessage;\n    } else if (isSSLError(reason)) {\n      this.message = sslMessage;\n    } else {\n      this.message = err.message;\n    }\n    for (const key in err) {\n      if (key !== 'name') {\n        this[key] = err[key];\n      }\n    }\n    return this;\n  }\n}\nObject.defineProperty(MongooseServerSelectionError.prototype, 'name', {\n  value: 'MongooseServerSelectionError'\n});\nmodule.exports = MongooseServerSelectionError;","map":{"version":3,"names":["MongooseError","require","allServersUnknown","isAtlas","isSSLError","atlasMessage","sslMessage","MongooseServerSelectionError","assimilateError","err","reason","isAtlasWhitelistError","message","indexOf","key","Object","defineProperty","prototype","value","module","exports"],"sources":["C:/Users/lrmir/OneDrive/Desktop/cs35L/newFridayz/Fridayz/frontend/node_modules/mongoose/lib/error/serverSelection.js"],"sourcesContent":["/*!\n * Module dependencies.\n */\n\n'use strict';\n\nconst MongooseError = require('./mongooseError');\nconst allServersUnknown = require('../helpers/topology/allServersUnknown');\nconst isAtlas = require('../helpers/topology/isAtlas');\nconst isSSLError = require('../helpers/topology/isSSLError');\n\n/*!\n * ignore\n */\n\nconst atlasMessage = 'Could not connect to any servers in your MongoDB Atlas cluster. ' +\n  'One common reason is that you\\'re trying to access the database from ' +\n  'an IP that isn\\'t whitelisted. Make sure your current IP address is on your Atlas ' +\n  'cluster\\'s IP whitelist: https://www.mongodb.com/docs/atlas/security-whitelist/';\n\nconst sslMessage = 'Mongoose is connecting with SSL enabled, but the server is ' +\n  'not accepting SSL connections. Please ensure that the MongoDB server you are ' +\n  'connecting to is configured to accept SSL connections. Learn more: ' +\n  'https://mongoosejs.com/docs/tutorials/ssl.html';\n\nclass MongooseServerSelectionError extends MongooseError {\n  /**\n   * MongooseServerSelectionError constructor\n   *\n   * @api private\n   */\n  assimilateError(err) {\n    const reason = err.reason;\n    // Special message for a case that is likely due to IP whitelisting issues.\n    const isAtlasWhitelistError = isAtlas(reason) &&\n      allServersUnknown(reason) &&\n      err.message.indexOf('bad auth') === -1 &&\n      err.message.indexOf('Authentication failed') === -1;\n\n    if (isAtlasWhitelistError) {\n      this.message = atlasMessage;\n    } else if (isSSLError(reason)) {\n      this.message = sslMessage;\n    } else {\n      this.message = err.message;\n    }\n    for (const key in err) {\n      if (key !== 'name') {\n        this[key] = err[key];\n      }\n    }\n\n    return this;\n  }\n}\n\nObject.defineProperty(MongooseServerSelectionError.prototype, 'name', {\n  value: 'MongooseServerSelectionError'\n});\n\nmodule.exports = MongooseServerSelectionError;\n"],"mappings":"AAAA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAMA,aAAa,GAAGC,OAAO,CAAC,iBAAiB,CAAC;AAChD,MAAMC,iBAAiB,GAAGD,OAAO,CAAC,uCAAuC,CAAC;AAC1E,MAAME,OAAO,GAAGF,OAAO,CAAC,6BAA6B,CAAC;AACtD,MAAMG,UAAU,GAAGH,OAAO,CAAC,gCAAgC,CAAC;;AAE5D;AACA;AACA;;AAEA,MAAMI,YAAY,GAAG,kEAAkE,GACrF,uEAAuE,GACvE,oFAAoF,GACpF,iFAAiF;AAEnF,MAAMC,UAAU,GAAG,6DAA6D,GAC9E,+EAA+E,GAC/E,qEAAqE,GACrE,gDAAgD;AAElD,MAAMC,4BAA4B,SAASP,aAAa,CAAC;EACvD;AACF;AACA;AACA;AACA;EACEQ,eAAeA,CAACC,GAAG,EAAE;IACnB,MAAMC,MAAM,GAAGD,GAAG,CAACC,MAAM;IACzB;IACA,MAAMC,qBAAqB,GAAGR,OAAO,CAACO,MAAM,CAAC,IAC3CR,iBAAiB,CAACQ,MAAM,CAAC,IACzBD,GAAG,CAACG,OAAO,CAACC,OAAO,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,IACtCJ,GAAG,CAACG,OAAO,CAACC,OAAO,CAAC,uBAAuB,CAAC,KAAK,CAAC,CAAC;IAErD,IAAIF,qBAAqB,EAAE;MACzB,IAAI,CAACC,OAAO,GAAGP,YAAY;IAC7B,CAAC,MAAM,IAAID,UAAU,CAACM,MAAM,CAAC,EAAE;MAC7B,IAAI,CAACE,OAAO,GAAGN,UAAU;IAC3B,CAAC,MAAM;MACL,IAAI,CAACM,OAAO,GAAGH,GAAG,CAACG,OAAO;IAC5B;IACA,KAAK,MAAME,GAAG,IAAIL,GAAG,EAAE;MACrB,IAAIK,GAAG,KAAK,MAAM,EAAE;QAClB,IAAI,CAACA,GAAG,CAAC,GAAGL,GAAG,CAACK,GAAG,CAAC;MACtB;IACF;IAEA,OAAO,IAAI;EACb;AACF;AAEAC,MAAM,CAACC,cAAc,CAACT,4BAA4B,CAACU,SAAS,EAAE,MAAM,EAAE;EACpEC,KAAK,EAAE;AACT,CAAC,CAAC;AAEFC,MAAM,CAACC,OAAO,GAAGb,4BAA4B","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}