{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MongoLogger = exports.stringifyWithMaxLen = exports.createStdioLogger = exports.MongoLoggableComponent = exports.SEVERITY_LEVEL_MAP = exports.DEFAULT_MAX_DOCUMENT_LENGTH = exports.SeverityLevel = void 0;\nconst bson_1 = require(\"bson\");\nconst util_1 = require(\"util\");\nconst constants_1 = require(\"./constants\");\nconst utils_1 = require(\"./utils\");\n/** @internal */\nexports.SeverityLevel = Object.freeze({\n  EMERGENCY: 'emergency',\n  ALERT: 'alert',\n  CRITICAL: 'critical',\n  ERROR: 'error',\n  WARNING: 'warn',\n  NOTICE: 'notice',\n  INFORMATIONAL: 'info',\n  DEBUG: 'debug',\n  TRACE: 'trace',\n  OFF: 'off'\n});\n/** @internal */\nexports.DEFAULT_MAX_DOCUMENT_LENGTH = 1000;\n/** @internal */\nclass SeverityLevelMap extends Map {\n  constructor(entries) {\n    const newEntries = [];\n    for (const [level, value] of entries) {\n      newEntries.push([value, level]);\n    }\n    newEntries.push(...entries);\n    super(newEntries);\n  }\n  getNumericSeverityLevel(severity) {\n    return this.get(severity);\n  }\n  getSeverityLevelName(level) {\n    return this.get(level);\n  }\n}\n/** @internal */\nexports.SEVERITY_LEVEL_MAP = new SeverityLevelMap([[exports.SeverityLevel.OFF, -Infinity], [exports.SeverityLevel.EMERGENCY, 0], [exports.SeverityLevel.ALERT, 1], [exports.SeverityLevel.CRITICAL, 2], [exports.SeverityLevel.ERROR, 3], [exports.SeverityLevel.WARNING, 4], [exports.SeverityLevel.NOTICE, 5], [exports.SeverityLevel.INFORMATIONAL, 6], [exports.SeverityLevel.DEBUG, 7], [exports.SeverityLevel.TRACE, 8]]);\n/** @internal */\nexports.MongoLoggableComponent = Object.freeze({\n  COMMAND: 'command',\n  TOPOLOGY: 'topology',\n  SERVER_SELECTION: 'serverSelection',\n  CONNECTION: 'connection',\n  CLIENT: 'client'\n});\n/**\n * Parses a string as one of SeverityLevel\n *\n * @param s - the value to be parsed\n * @returns one of SeverityLevel if value can be parsed as such, otherwise null\n */\nfunction parseSeverityFromString(s) {\n  const validSeverities = Object.values(exports.SeverityLevel);\n  const lowerSeverity = s?.toLowerCase();\n  if (lowerSeverity != null && validSeverities.includes(lowerSeverity)) {\n    return lowerSeverity;\n  }\n  return null;\n}\n/** @internal */\nfunction createStdioLogger(stream) {\n  return {\n    write: log => {\n      stream.write((0, util_1.inspect)(log, {\n        compact: true,\n        breakLength: Infinity\n      }), 'utf-8');\n      return;\n    }\n  };\n}\nexports.createStdioLogger = createStdioLogger;\n/**\n * resolves the MONGODB_LOG_PATH and mongodbLogPath options from the environment and the\n * mongo client options respectively. The mongodbLogPath can be either 'stdout', 'stderr', a NodeJS\n * Writable or an object which has a `write` method with the signature:\n * ```ts\n * write(log: Log): void\n * ```\n *\n * @returns the MongoDBLogWritable object to write logs to\n */\nfunction resolveLogPath({\n  MONGODB_LOG_PATH\n}, {\n  mongodbLogPath\n}) {\n  if (typeof mongodbLogPath === 'string' && /^stderr$/i.test(mongodbLogPath)) {\n    return createStdioLogger(process.stderr);\n  }\n  if (typeof mongodbLogPath === 'string' && /^stdout$/i.test(mongodbLogPath)) {\n    return createStdioLogger(process.stdout);\n  }\n  if (typeof mongodbLogPath === 'object' && typeof mongodbLogPath?.write === 'function') {\n    return mongodbLogPath;\n  }\n  if (MONGODB_LOG_PATH && /^stderr$/i.test(MONGODB_LOG_PATH)) {\n    return createStdioLogger(process.stderr);\n  }\n  if (MONGODB_LOG_PATH && /^stdout$/i.test(MONGODB_LOG_PATH)) {\n    return createStdioLogger(process.stdout);\n  }\n  return createStdioLogger(process.stderr);\n}\nfunction resolveSeverityConfiguration(clientOption, environmentOption, defaultSeverity) {\n  return parseSeverityFromString(clientOption) ?? parseSeverityFromString(environmentOption) ?? defaultSeverity;\n}\nfunction compareSeverity(s0, s1) {\n  const s0Num = exports.SEVERITY_LEVEL_MAP.getNumericSeverityLevel(s0);\n  const s1Num = exports.SEVERITY_LEVEL_MAP.getNumericSeverityLevel(s1);\n  return s0Num < s1Num ? -1 : s0Num > s1Num ? 1 : 0;\n}\n/** @internal */\nfunction stringifyWithMaxLen(value, maxDocumentLength) {\n  const ejson = bson_1.EJSON.stringify(value);\n  return maxDocumentLength !== 0 && ejson.length > maxDocumentLength ? `${ejson.slice(0, maxDocumentLength)}...` : ejson;\n}\nexports.stringifyWithMaxLen = stringifyWithMaxLen;\nfunction isLogConvertible(obj) {\n  const objAsLogConvertible = obj;\n  // eslint-disable-next-line no-restricted-syntax\n  return objAsLogConvertible.toLog !== undefined && typeof objAsLogConvertible.toLog === 'function';\n}\nfunction attachCommandFields(log, commandEvent) {\n  log.commandName = commandEvent.commandName;\n  log.requestId = commandEvent.requestId;\n  log.driverConnectionId = commandEvent?.connectionId;\n  const {\n    host,\n    port\n  } = utils_1.HostAddress.fromString(commandEvent.address).toHostPort();\n  log.serverHost = host;\n  log.serverPort = port;\n  if (commandEvent?.serviceId) {\n    log.serviceId = commandEvent.serviceId.toHexString();\n  }\n  return log;\n}\nfunction attachConnectionFields(log, connectionPoolEvent) {\n  const {\n    host,\n    port\n  } = utils_1.HostAddress.fromString(connectionPoolEvent.address).toHostPort();\n  log.serverHost = host;\n  log.serverPort = port;\n  return log;\n}\nfunction defaultLogTransform(logObject, maxDocumentLength = exports.DEFAULT_MAX_DOCUMENT_LENGTH) {\n  let log = Object.create(null);\n  switch (logObject.name) {\n    case constants_1.COMMAND_STARTED:\n      log = attachCommandFields(log, logObject);\n      log.message = 'Command started';\n      log.command = stringifyWithMaxLen(logObject.command, maxDocumentLength);\n      log.databaseName = logObject.databaseName;\n      return log;\n    case constants_1.COMMAND_SUCCEEDED:\n      log = attachCommandFields(log, logObject);\n      log.message = 'Command succeeded';\n      log.durationMS = logObject.duration;\n      log.reply = stringifyWithMaxLen(logObject.reply, maxDocumentLength);\n      return log;\n    case constants_1.COMMAND_FAILED:\n      log = attachCommandFields(log, logObject);\n      log.message = 'Command failed';\n      log.durationMS = logObject.duration;\n      log.failure = logObject.failure;\n      return log;\n    case constants_1.CONNECTION_POOL_CREATED:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection pool created';\n      if (logObject.options) {\n        const {\n          maxIdleTimeMS,\n          minPoolSize,\n          maxPoolSize,\n          maxConnecting,\n          waitQueueTimeoutMS\n        } = logObject.options;\n        log = {\n          ...log,\n          maxIdleTimeMS,\n          minPoolSize,\n          maxPoolSize,\n          maxConnecting,\n          waitQueueTimeoutMS\n        };\n      }\n      return log;\n    case constants_1.CONNECTION_POOL_READY:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection pool ready';\n      return log;\n    case constants_1.CONNECTION_POOL_CLEARED:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection pool cleared';\n      if (logObject.serviceId?._bsontype === 'ObjectId') {\n        log.serviceId = logObject.serviceId.toHexString();\n      }\n      return log;\n    case constants_1.CONNECTION_POOL_CLOSED:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection pool closed';\n      return log;\n    case constants_1.CONNECTION_CREATED:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection created';\n      log.driverConnectionId = logObject.connectionId;\n      return log;\n    case constants_1.CONNECTION_READY:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection ready';\n      log.driverConnectionId = logObject.connectionId;\n      return log;\n    case constants_1.CONNECTION_CLOSED:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection closed';\n      log.driverConnectionId = logObject.connectionId;\n      switch (logObject.reason) {\n        case 'stale':\n          log.reason = 'Connection became stale because the pool was cleared';\n          break;\n        case 'idle':\n          log.reason = 'Connection has been available but unused for longer than the configured max idle time';\n          break;\n        case 'error':\n          log.reason = 'An error occurred while using the connection';\n          if (logObject.error) {\n            log.error = logObject.error;\n          }\n          break;\n        case 'poolClosed':\n          log.reason = 'Connection pool was closed';\n          break;\n        default:\n          log.reason = `Unknown close reason: ${logObject.reason}`;\n      }\n      return log;\n    case constants_1.CONNECTION_CHECK_OUT_STARTED:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection checkout started';\n      return log;\n    case constants_1.CONNECTION_CHECK_OUT_FAILED:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection checkout failed';\n      switch (logObject.reason) {\n        case 'poolClosed':\n          log.reason = 'Connection pool was closed';\n          break;\n        case 'timeout':\n          log.reason = 'Wait queue timeout elapsed without a connection becoming available';\n          break;\n        case 'connectionError':\n          log.reason = 'An error occurred while trying to establish a new connection';\n          if (logObject.error) {\n            log.error = logObject.error;\n          }\n          break;\n        default:\n          log.reason = `Unknown close reason: ${logObject.reason}`;\n      }\n      return log;\n    case constants_1.CONNECTION_CHECKED_OUT:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection checked out';\n      log.driverConnectionId = logObject.connectionId;\n      return log;\n    case constants_1.CONNECTION_CHECKED_IN:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection checked in';\n      log.driverConnectionId = logObject.connectionId;\n      return log;\n    default:\n      for (const [key, value] of Object.entries(logObject)) {\n        if (value != null) log[key] = value;\n      }\n  }\n  return log;\n}\n/** @internal */\nclass MongoLogger {\n  constructor(options) {\n    /**\n     * This method should be used when logging errors that do not have a public driver API for\n     * reporting errors.\n     */\n    this.error = this.log.bind(this, 'error');\n    /**\n     * This method should be used to log situations where undesirable application behaviour might\n     * occur. For example, failing to end sessions on `MongoClient.close`.\n     */\n    this.warn = this.log.bind(this, 'warn');\n    /**\n     * This method should be used to report high-level information about normal driver behaviour.\n     * For example, the creation of a `MongoClient`.\n     */\n    this.info = this.log.bind(this, 'info');\n    /**\n     * This method should be used to report information that would be helpful when debugging an\n     * application. For example, a command starting, succeeding or failing.\n     */\n    this.debug = this.log.bind(this, 'debug');\n    /**\n     * This method should be used to report fine-grained details related to logic flow. For example,\n     * entering and exiting a function body.\n     */\n    this.trace = this.log.bind(this, 'trace');\n    this.componentSeverities = options.componentSeverities;\n    this.maxDocumentLength = options.maxDocumentLength;\n    this.logDestination = options.logDestination;\n  }\n  log(severity, component, message) {\n    if (compareSeverity(severity, this.componentSeverities[component]) > 0) return;\n    let logMessage = {\n      t: new Date(),\n      c: component,\n      s: severity\n    };\n    if (typeof message === 'string') {\n      logMessage.message = message;\n    } else if (typeof message === 'object') {\n      if (isLogConvertible(message)) {\n        logMessage = {\n          ...logMessage,\n          ...message.toLog()\n        };\n      } else {\n        logMessage = {\n          ...logMessage,\n          ...defaultLogTransform(message, this.maxDocumentLength)\n        };\n      }\n    }\n    this.logDestination.write(logMessage);\n  }\n  /**\n   * Merges options set through environment variables and the MongoClient, preferring environment\n   * variables when both are set, and substituting defaults for values not set. Options set in\n   * constructor take precedence over both environment variables and MongoClient options.\n   *\n   * @remarks\n   * When parsing component severity levels, invalid values are treated as unset and replaced with\n   * the default severity.\n   *\n   * @param envOptions - options set for the logger from the environment\n   * @param clientOptions - options set for the logger in the MongoClient options\n   * @returns a MongoLoggerOptions object to be used when instantiating a new MongoLogger\n   */\n  static resolveOptions(envOptions, clientOptions) {\n    // client options take precedence over env options\n    const combinedOptions = {\n      ...envOptions,\n      ...clientOptions,\n      mongodbLogPath: resolveLogPath(envOptions, clientOptions)\n    };\n    const defaultSeverity = resolveSeverityConfiguration(combinedOptions.mongodbLogComponentSeverities?.default, combinedOptions.MONGODB_LOG_ALL, exports.SeverityLevel.OFF);\n    return {\n      componentSeverities: {\n        command: resolveSeverityConfiguration(combinedOptions.mongodbLogComponentSeverities?.command, combinedOptions.MONGODB_LOG_COMMAND, defaultSeverity),\n        topology: resolveSeverityConfiguration(combinedOptions.mongodbLogComponentSeverities?.topology, combinedOptions.MONGODB_LOG_TOPOLOGY, defaultSeverity),\n        serverSelection: resolveSeverityConfiguration(combinedOptions.mongodbLogComponentSeverities?.serverSelection, combinedOptions.MONGODB_LOG_SERVER_SELECTION, defaultSeverity),\n        connection: resolveSeverityConfiguration(combinedOptions.mongodbLogComponentSeverities?.connection, combinedOptions.MONGODB_LOG_CONNECTION, defaultSeverity),\n        client: resolveSeverityConfiguration(combinedOptions.mongodbLogComponentSeverities?.client, combinedOptions.MONGODB_LOG_CLIENT, defaultSeverity),\n        default: defaultSeverity\n      },\n      maxDocumentLength: combinedOptions.mongodbLogMaxDocumentLength ?? (0, utils_1.parseUnsignedInteger)(combinedOptions.MONGODB_LOG_MAX_DOCUMENT_LENGTH) ?? 1000,\n      logDestination: combinedOptions.mongodbLogPath\n    };\n  }\n}\nexports.MongoLogger = MongoLogger;","map":{"version":3,"names":["bson_1","require","util_1","constants_1","utils_1","exports","SeverityLevel","Object","freeze","EMERGENCY","ALERT","CRITICAL","ERROR","WARNING","NOTICE","INFORMATIONAL","DEBUG","TRACE","OFF","DEFAULT_MAX_DOCUMENT_LENGTH","SeverityLevelMap","Map","constructor","entries","newEntries","level","value","push","getNumericSeverityLevel","severity","get","getSeverityLevelName","SEVERITY_LEVEL_MAP","Infinity","MongoLoggableComponent","COMMAND","TOPOLOGY","SERVER_SELECTION","CONNECTION","CLIENT","parseSeverityFromString","s","validSeverities","values","lowerSeverity","toLowerCase","includes","createStdioLogger","stream","write","log","inspect","compact","breakLength","resolveLogPath","MONGODB_LOG_PATH","mongodbLogPath","test","process","stderr","stdout","resolveSeverityConfiguration","clientOption","environmentOption","defaultSeverity","compareSeverity","s0","s1","s0Num","s1Num","stringifyWithMaxLen","maxDocumentLength","ejson","EJSON","stringify","length","slice","isLogConvertible","obj","objAsLogConvertible","toLog","undefined","attachCommandFields","commandEvent","commandName","requestId","driverConnectionId","connectionId","host","port","HostAddress","fromString","address","toHostPort","serverHost","serverPort","serviceId","toHexString","attachConnectionFields","connectionPoolEvent","defaultLogTransform","logObject","create","name","COMMAND_STARTED","message","command","databaseName","COMMAND_SUCCEEDED","durationMS","duration","reply","COMMAND_FAILED","failure","CONNECTION_POOL_CREATED","options","maxIdleTimeMS","minPoolSize","maxPoolSize","maxConnecting","waitQueueTimeoutMS","CONNECTION_POOL_READY","CONNECTION_POOL_CLEARED","_bsontype","CONNECTION_POOL_CLOSED","CONNECTION_CREATED","CONNECTION_READY","CONNECTION_CLOSED","reason","error","CONNECTION_CHECK_OUT_STARTED","CONNECTION_CHECK_OUT_FAILED","CONNECTION_CHECKED_OUT","CONNECTION_CHECKED_IN","key","MongoLogger","bind","warn","info","debug","trace","componentSeverities","logDestination","component","logMessage","t","Date","c","resolveOptions","envOptions","clientOptions","combinedOptions","mongodbLogComponentSeverities","default","MONGODB_LOG_ALL","MONGODB_LOG_COMMAND","topology","MONGODB_LOG_TOPOLOGY","serverSelection","MONGODB_LOG_SERVER_SELECTION","connection","MONGODB_LOG_CONNECTION","client","MONGODB_LOG_CLIENT","mongodbLogMaxDocumentLength","parseUnsignedInteger","MONGODB_LOG_MAX_DOCUMENT_LENGTH"],"sources":["C:\\Users\\lrmir\\OneDrive\\Desktop\\cs35L\\newFridayz\\Fridayz\\frontend\\node_modules\\mongodb\\src\\mongo_logger.ts"],"sourcesContent":["import { EJSON } from 'bson';\nimport type { Writable } from 'stream';\nimport { inspect } from 'util';\n\nimport type {\n  CommandFailedEvent,\n  CommandStartedEvent,\n  CommandSucceededEvent\n} from './cmap/command_monitoring_events';\nimport type {\n  ConnectionCheckedInEvent,\n  ConnectionCheckedOutEvent,\n  ConnectionCheckOutFailedEvent,\n  ConnectionCheckOutStartedEvent,\n  ConnectionClosedEvent,\n  ConnectionCreatedEvent,\n  ConnectionPoolClearedEvent,\n  ConnectionPoolClosedEvent,\n  ConnectionPoolCreatedEvent,\n  ConnectionPoolMonitoringEvent,\n  ConnectionPoolReadyEvent,\n  ConnectionReadyEvent\n} from './cmap/connection_pool_events';\nimport {\n  COMMAND_FAILED,\n  COMMAND_STARTED,\n  COMMAND_SUCCEEDED,\n  CONNECTION_CHECK_OUT_FAILED,\n  CONNECTION_CHECK_OUT_STARTED,\n  CONNECTION_CHECKED_IN,\n  CONNECTION_CHECKED_OUT,\n  CONNECTION_CLOSED,\n  CONNECTION_CREATED,\n  CONNECTION_POOL_CLEARED,\n  CONNECTION_POOL_CLOSED,\n  CONNECTION_POOL_CREATED,\n  CONNECTION_POOL_READY,\n  CONNECTION_READY\n} from './constants';\nimport { HostAddress, parseUnsignedInteger } from './utils';\n\n/** @internal */\nexport const SeverityLevel = Object.freeze({\n  EMERGENCY: 'emergency',\n  ALERT: 'alert',\n  CRITICAL: 'critical',\n  ERROR: 'error',\n  WARNING: 'warn',\n  NOTICE: 'notice',\n  INFORMATIONAL: 'info',\n  DEBUG: 'debug',\n  TRACE: 'trace',\n  OFF: 'off'\n} as const);\n\n/** @internal */\nexport const DEFAULT_MAX_DOCUMENT_LENGTH = 1000;\n/** @internal */\nexport type SeverityLevel = (typeof SeverityLevel)[keyof typeof SeverityLevel];\n\n/** @internal */\nclass SeverityLevelMap extends Map<SeverityLevel | number, SeverityLevel | number> {\n  constructor(entries: [SeverityLevel | number, SeverityLevel | number][]) {\n    const newEntries: [number | SeverityLevel, SeverityLevel | number][] = [];\n    for (const [level, value] of entries) {\n      newEntries.push([value, level]);\n    }\n\n    newEntries.push(...entries);\n    super(newEntries);\n  }\n\n  getNumericSeverityLevel(severity: SeverityLevel): number {\n    return this.get(severity) as number;\n  }\n\n  getSeverityLevelName(level: number): SeverityLevel | undefined {\n    return this.get(level) as SeverityLevel | undefined;\n  }\n}\n\n/** @internal */\nexport const SEVERITY_LEVEL_MAP = new SeverityLevelMap([\n  [SeverityLevel.OFF, -Infinity],\n  [SeverityLevel.EMERGENCY, 0],\n  [SeverityLevel.ALERT, 1],\n  [SeverityLevel.CRITICAL, 2],\n  [SeverityLevel.ERROR, 3],\n  [SeverityLevel.WARNING, 4],\n  [SeverityLevel.NOTICE, 5],\n  [SeverityLevel.INFORMATIONAL, 6],\n  [SeverityLevel.DEBUG, 7],\n  [SeverityLevel.TRACE, 8]\n]);\n\n/** @internal */\nexport const MongoLoggableComponent = Object.freeze({\n  COMMAND: 'command',\n  TOPOLOGY: 'topology',\n  SERVER_SELECTION: 'serverSelection',\n  CONNECTION: 'connection',\n  CLIENT: 'client'\n} as const);\n\n/** @internal */\nexport type MongoLoggableComponent =\n  (typeof MongoLoggableComponent)[keyof typeof MongoLoggableComponent];\n\n/** @internal */\nexport interface MongoLoggerEnvOptions {\n  /** Severity level for command component */\n  MONGODB_LOG_COMMAND?: string;\n  /** Severity level for topology component */\n  MONGODB_LOG_TOPOLOGY?: string;\n  /** Severity level for server selection component */\n  MONGODB_LOG_SERVER_SELECTION?: string;\n  /** Severity level for CMAP */\n  MONGODB_LOG_CONNECTION?: string;\n  /** Severity level for client */\n  MONGODB_LOG_CLIENT?: string;\n  /** Default severity level to be if any of the above are unset */\n  MONGODB_LOG_ALL?: string;\n  /** Max length of embedded EJSON docs. Setting to 0 disables truncation. Defaults to 1000. */\n  MONGODB_LOG_MAX_DOCUMENT_LENGTH?: string;\n  /** Destination for log messages. Must be 'stderr', 'stdout'. Defaults to 'stderr'. */\n  MONGODB_LOG_PATH?: string;\n}\n\n/** @internal */\nexport interface LogComponentSeveritiesClientOptions {\n  /** Optional severity level for command component */\n  command?: SeverityLevel;\n  /** Optional severity level for topology component */\n  topology?: SeverityLevel;\n  /** Optionsl severity level for server selection component */\n  serverSelection?: SeverityLevel;\n  /** Optional severity level for connection component */\n  connection?: SeverityLevel;\n  /** Optional severity level for client component */\n  client?: SeverityLevel;\n  /** Optional default severity level to be used if any of the above are unset */\n  default?: SeverityLevel;\n}\n\n/** @internal */\nexport interface MongoLoggerMongoClientOptions {\n  /** Destination for log messages */\n  mongodbLogPath?: 'stdout' | 'stderr' | MongoDBLogWritable;\n  /** Severity levels for logger components */\n  mongodbLogComponentSeverities?: LogComponentSeveritiesClientOptions;\n  /** Max length of embedded EJSON docs. Setting to 0 disables truncation. Defaults to 1000. */\n  mongodbLogMaxDocumentLength?: number;\n}\n\n/** @internal */\nexport interface MongoLoggerOptions {\n  componentSeverities: {\n    /** Severity level for command component */\n    command: SeverityLevel;\n    /** Severity level for topology component */\n    topology: SeverityLevel;\n    /** Severity level for server selection component */\n    serverSelection: SeverityLevel;\n    /** Severity level for connection component */\n    connection: SeverityLevel;\n    /** Severity level for client component */\n    client: SeverityLevel;\n    /** Default severity level to be used if any of the above are unset */\n    default: SeverityLevel;\n  };\n  /** Max length of embedded EJSON docs. Setting to 0 disables truncation. Defaults to 1000. */\n  maxDocumentLength: number;\n  /** Destination for log messages. */\n  logDestination: Writable | MongoDBLogWritable;\n}\n\n/**\n * Parses a string as one of SeverityLevel\n *\n * @param s - the value to be parsed\n * @returns one of SeverityLevel if value can be parsed as such, otherwise null\n */\nfunction parseSeverityFromString(s?: string): SeverityLevel | null {\n  const validSeverities: string[] = Object.values(SeverityLevel);\n  const lowerSeverity = s?.toLowerCase();\n\n  if (lowerSeverity != null && validSeverities.includes(lowerSeverity)) {\n    return lowerSeverity as SeverityLevel;\n  }\n\n  return null;\n}\n\n/** @internal */\nexport function createStdioLogger(stream: {\n  write: NodeJS.WriteStream['write'];\n}): MongoDBLogWritable {\n  return {\n    write: (log: Log): unknown => {\n      stream.write(inspect(log, { compact: true, breakLength: Infinity }), 'utf-8');\n      return;\n    }\n  };\n}\n\n/**\n * resolves the MONGODB_LOG_PATH and mongodbLogPath options from the environment and the\n * mongo client options respectively. The mongodbLogPath can be either 'stdout', 'stderr', a NodeJS\n * Writable or an object which has a `write` method with the signature:\n * ```ts\n * write(log: Log): void\n * ```\n *\n * @returns the MongoDBLogWritable object to write logs to\n */\nfunction resolveLogPath(\n  { MONGODB_LOG_PATH }: MongoLoggerEnvOptions,\n  { mongodbLogPath }: MongoLoggerMongoClientOptions\n): MongoDBLogWritable {\n  if (typeof mongodbLogPath === 'string' && /^stderr$/i.test(mongodbLogPath)) {\n    return createStdioLogger(process.stderr);\n  }\n  if (typeof mongodbLogPath === 'string' && /^stdout$/i.test(mongodbLogPath)) {\n    return createStdioLogger(process.stdout);\n  }\n\n  if (typeof mongodbLogPath === 'object' && typeof mongodbLogPath?.write === 'function') {\n    return mongodbLogPath;\n  }\n\n  if (MONGODB_LOG_PATH && /^stderr$/i.test(MONGODB_LOG_PATH)) {\n    return createStdioLogger(process.stderr);\n  }\n  if (MONGODB_LOG_PATH && /^stdout$/i.test(MONGODB_LOG_PATH)) {\n    return createStdioLogger(process.stdout);\n  }\n\n  return createStdioLogger(process.stderr);\n}\n\nfunction resolveSeverityConfiguration(\n  clientOption: string | undefined,\n  environmentOption: string | undefined,\n  defaultSeverity: SeverityLevel\n): SeverityLevel {\n  return (\n    parseSeverityFromString(clientOption) ??\n    parseSeverityFromString(environmentOption) ??\n    defaultSeverity\n  );\n}\n\n/** @internal */\nexport interface Log extends Record<string, any> {\n  t: Date;\n  c: MongoLoggableComponent;\n  s: SeverityLevel;\n  message?: string;\n}\n\n/** @internal */\nexport interface MongoDBLogWritable {\n  write(log: Log): void;\n}\n\nfunction compareSeverity(s0: SeverityLevel, s1: SeverityLevel): 1 | 0 | -1 {\n  const s0Num = SEVERITY_LEVEL_MAP.getNumericSeverityLevel(s0);\n  const s1Num = SEVERITY_LEVEL_MAP.getNumericSeverityLevel(s1);\n\n  return s0Num < s1Num ? -1 : s0Num > s1Num ? 1 : 0;\n}\n\n/** @internal */\nexport type LoggableEvent =\n  | CommandStartedEvent\n  | CommandSucceededEvent\n  | CommandFailedEvent\n  | ConnectionPoolCreatedEvent\n  | ConnectionPoolReadyEvent\n  | ConnectionPoolClosedEvent\n  | ConnectionPoolClearedEvent\n  | ConnectionCreatedEvent\n  | ConnectionReadyEvent\n  | ConnectionClosedEvent\n  | ConnectionCheckedInEvent\n  | ConnectionCheckedOutEvent\n  | ConnectionCheckOutStartedEvent\n  | ConnectionCheckOutFailedEvent;\n\n/** @internal */\nexport interface LogConvertible extends Record<string, any> {\n  toLog(): Record<string, any>;\n}\n\n/** @internal */\nexport function stringifyWithMaxLen(value: any, maxDocumentLength: number): string {\n  const ejson = EJSON.stringify(value);\n\n  return maxDocumentLength !== 0 && ejson.length > maxDocumentLength\n    ? `${ejson.slice(0, maxDocumentLength)}...`\n    : ejson;\n}\n\n/** @internal */\nexport type Loggable = LoggableEvent | LogConvertible;\n\nfunction isLogConvertible(obj: Loggable): obj is LogConvertible {\n  const objAsLogConvertible = obj as LogConvertible;\n  // eslint-disable-next-line no-restricted-syntax\n  return objAsLogConvertible.toLog !== undefined && typeof objAsLogConvertible.toLog === 'function';\n}\n\nfunction attachCommandFields(\n  log: Record<string, any>,\n  commandEvent: CommandStartedEvent | CommandSucceededEvent | CommandFailedEvent\n) {\n  log.commandName = commandEvent.commandName;\n  log.requestId = commandEvent.requestId;\n  log.driverConnectionId = commandEvent?.connectionId;\n  const { host, port } = HostAddress.fromString(commandEvent.address).toHostPort();\n  log.serverHost = host;\n  log.serverPort = port;\n  if (commandEvent?.serviceId) {\n    log.serviceId = commandEvent.serviceId.toHexString();\n  }\n\n  return log;\n}\n\nfunction attachConnectionFields(\n  log: Record<string, any>,\n  connectionPoolEvent: ConnectionPoolMonitoringEvent\n) {\n  const { host, port } = HostAddress.fromString(connectionPoolEvent.address).toHostPort();\n  log.serverHost = host;\n  log.serverPort = port;\n\n  return log;\n}\n\nfunction defaultLogTransform(\n  logObject: LoggableEvent | Record<string, any>,\n  maxDocumentLength: number = DEFAULT_MAX_DOCUMENT_LENGTH\n): Omit<Log, 's' | 't' | 'c'> {\n  let log: Omit<Log, 's' | 't' | 'c'> = Object.create(null);\n\n  switch (logObject.name) {\n    case COMMAND_STARTED:\n      log = attachCommandFields(log, logObject);\n      log.message = 'Command started';\n      log.command = stringifyWithMaxLen(logObject.command, maxDocumentLength);\n      log.databaseName = logObject.databaseName;\n      return log;\n    case COMMAND_SUCCEEDED:\n      log = attachCommandFields(log, logObject);\n      log.message = 'Command succeeded';\n      log.durationMS = logObject.duration;\n      log.reply = stringifyWithMaxLen(logObject.reply, maxDocumentLength);\n      return log;\n    case COMMAND_FAILED:\n      log = attachCommandFields(log, logObject);\n      log.message = 'Command failed';\n      log.durationMS = logObject.duration;\n      log.failure = logObject.failure;\n      return log;\n    case CONNECTION_POOL_CREATED:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection pool created';\n      if (logObject.options) {\n        const { maxIdleTimeMS, minPoolSize, maxPoolSize, maxConnecting, waitQueueTimeoutMS } =\n          logObject.options;\n        log = {\n          ...log,\n          maxIdleTimeMS,\n          minPoolSize,\n          maxPoolSize,\n          maxConnecting,\n          waitQueueTimeoutMS\n        };\n      }\n      return log;\n    case CONNECTION_POOL_READY:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection pool ready';\n      return log;\n    case CONNECTION_POOL_CLEARED:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection pool cleared';\n      if (logObject.serviceId?._bsontype === 'ObjectId') {\n        log.serviceId = logObject.serviceId.toHexString();\n      }\n      return log;\n    case CONNECTION_POOL_CLOSED:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection pool closed';\n      return log;\n    case CONNECTION_CREATED:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection created';\n      log.driverConnectionId = logObject.connectionId;\n      return log;\n    case CONNECTION_READY:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection ready';\n      log.driverConnectionId = logObject.connectionId;\n      return log;\n    case CONNECTION_CLOSED:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection closed';\n      log.driverConnectionId = logObject.connectionId;\n      switch (logObject.reason) {\n        case 'stale':\n          log.reason = 'Connection became stale because the pool was cleared';\n          break;\n        case 'idle':\n          log.reason =\n            'Connection has been available but unused for longer than the configured max idle time';\n          break;\n        case 'error':\n          log.reason = 'An error occurred while using the connection';\n          if (logObject.error) {\n            log.error = logObject.error;\n          }\n          break;\n        case 'poolClosed':\n          log.reason = 'Connection pool was closed';\n          break;\n        default:\n          log.reason = `Unknown close reason: ${logObject.reason}`;\n      }\n      return log;\n    case CONNECTION_CHECK_OUT_STARTED:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection checkout started';\n      return log;\n    case CONNECTION_CHECK_OUT_FAILED:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection checkout failed';\n      switch (logObject.reason) {\n        case 'poolClosed':\n          log.reason = 'Connection pool was closed';\n          break;\n        case 'timeout':\n          log.reason = 'Wait queue timeout elapsed without a connection becoming available';\n          break;\n        case 'connectionError':\n          log.reason = 'An error occurred while trying to establish a new connection';\n          if (logObject.error) {\n            log.error = logObject.error;\n          }\n          break;\n        default:\n          log.reason = `Unknown close reason: ${logObject.reason}`;\n      }\n      return log;\n    case CONNECTION_CHECKED_OUT:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection checked out';\n\n      log.driverConnectionId = logObject.connectionId;\n      return log;\n    case CONNECTION_CHECKED_IN:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection checked in';\n      log.driverConnectionId = logObject.connectionId;\n      return log;\n    default:\n      for (const [key, value] of Object.entries(logObject)) {\n        if (value != null) log[key] = value;\n      }\n  }\n  return log;\n}\n\n/** @internal */\nexport class MongoLogger {\n  componentSeverities: Record<MongoLoggableComponent, SeverityLevel>;\n  maxDocumentLength: number;\n  logDestination: MongoDBLogWritable | Writable;\n\n  /**\n   * This method should be used when logging errors that do not have a public driver API for\n   * reporting errors.\n   */\n  error = this.log.bind(this, 'error');\n  /**\n   * This method should be used to log situations where undesirable application behaviour might\n   * occur. For example, failing to end sessions on `MongoClient.close`.\n   */\n  warn = this.log.bind(this, 'warn');\n  /**\n   * This method should be used to report high-level information about normal driver behaviour.\n   * For example, the creation of a `MongoClient`.\n   */\n  info = this.log.bind(this, 'info');\n  /**\n   * This method should be used to report information that would be helpful when debugging an\n   * application. For example, a command starting, succeeding or failing.\n   */\n  debug = this.log.bind(this, 'debug');\n  /**\n   * This method should be used to report fine-grained details related to logic flow. For example,\n   * entering and exiting a function body.\n   */\n  trace = this.log.bind(this, 'trace');\n\n  constructor(options: MongoLoggerOptions) {\n    this.componentSeverities = options.componentSeverities;\n    this.maxDocumentLength = options.maxDocumentLength;\n    this.logDestination = options.logDestination;\n  }\n\n  private log(\n    severity: SeverityLevel,\n    component: MongoLoggableComponent,\n    message: Loggable | string\n  ): void {\n    if (compareSeverity(severity, this.componentSeverities[component]) > 0) return;\n\n    let logMessage: Log = { t: new Date(), c: component, s: severity };\n    if (typeof message === 'string') {\n      logMessage.message = message;\n    } else if (typeof message === 'object') {\n      if (isLogConvertible(message)) {\n        logMessage = { ...logMessage, ...message.toLog() };\n      } else {\n        logMessage = { ...logMessage, ...defaultLogTransform(message, this.maxDocumentLength) };\n      }\n    }\n    this.logDestination.write(logMessage);\n  }\n\n  /**\n   * Merges options set through environment variables and the MongoClient, preferring environment\n   * variables when both are set, and substituting defaults for values not set. Options set in\n   * constructor take precedence over both environment variables and MongoClient options.\n   *\n   * @remarks\n   * When parsing component severity levels, invalid values are treated as unset and replaced with\n   * the default severity.\n   *\n   * @param envOptions - options set for the logger from the environment\n   * @param clientOptions - options set for the logger in the MongoClient options\n   * @returns a MongoLoggerOptions object to be used when instantiating a new MongoLogger\n   */\n  static resolveOptions(\n    envOptions: MongoLoggerEnvOptions,\n    clientOptions: MongoLoggerMongoClientOptions\n  ): MongoLoggerOptions {\n    // client options take precedence over env options\n    const combinedOptions = {\n      ...envOptions,\n      ...clientOptions,\n      mongodbLogPath: resolveLogPath(envOptions, clientOptions)\n    };\n    const defaultSeverity = resolveSeverityConfiguration(\n      combinedOptions.mongodbLogComponentSeverities?.default,\n      combinedOptions.MONGODB_LOG_ALL,\n      SeverityLevel.OFF\n    );\n\n    return {\n      componentSeverities: {\n        command: resolveSeverityConfiguration(\n          combinedOptions.mongodbLogComponentSeverities?.command,\n          combinedOptions.MONGODB_LOG_COMMAND,\n          defaultSeverity\n        ),\n        topology: resolveSeverityConfiguration(\n          combinedOptions.mongodbLogComponentSeverities?.topology,\n          combinedOptions.MONGODB_LOG_TOPOLOGY,\n          defaultSeverity\n        ),\n        serverSelection: resolveSeverityConfiguration(\n          combinedOptions.mongodbLogComponentSeverities?.serverSelection,\n          combinedOptions.MONGODB_LOG_SERVER_SELECTION,\n          defaultSeverity\n        ),\n        connection: resolveSeverityConfiguration(\n          combinedOptions.mongodbLogComponentSeverities?.connection,\n          combinedOptions.MONGODB_LOG_CONNECTION,\n          defaultSeverity\n        ),\n        client: resolveSeverityConfiguration(\n          combinedOptions.mongodbLogComponentSeverities?.client,\n          combinedOptions.MONGODB_LOG_CLIENT,\n          defaultSeverity\n        ),\n        default: defaultSeverity\n      },\n      maxDocumentLength:\n        combinedOptions.mongodbLogMaxDocumentLength ??\n        parseUnsignedInteger(combinedOptions.MONGODB_LOG_MAX_DOCUMENT_LENGTH) ??\n        1000,\n      logDestination: combinedOptions.mongodbLogPath\n    };\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}