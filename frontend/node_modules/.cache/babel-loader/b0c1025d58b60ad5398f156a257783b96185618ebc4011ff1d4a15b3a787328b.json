{"ast":null,"code":"'use strict';\n\nconst getDiscriminatorByValue = require('./getDiscriminatorByValue');\n\n/**\n * Find the correct constructor, taking into account discriminators\n * @api private\n */\n\nmodule.exports = function getConstructor(Constructor, value, defaultDiscriminatorValue) {\n  const discriminatorKey = Constructor.schema.options.discriminatorKey;\n  let discriminatorValue = value != null && value[discriminatorKey];\n  if (discriminatorValue == null) {\n    discriminatorValue = defaultDiscriminatorValue;\n  }\n  if (Constructor.discriminators && discriminatorValue != null) {\n    if (Constructor.discriminators[discriminatorValue]) {\n      Constructor = Constructor.discriminators[discriminatorValue];\n    } else {\n      const constructorByValue = getDiscriminatorByValue(Constructor.discriminators, discriminatorValue);\n      if (constructorByValue) {\n        Constructor = constructorByValue;\n      }\n    }\n  }\n  return Constructor;\n};","map":{"version":3,"names":["getDiscriminatorByValue","require","module","exports","getConstructor","Constructor","value","defaultDiscriminatorValue","discriminatorKey","schema","options","discriminatorValue","discriminators","constructorByValue"],"sources":["C:/Users/lrmir/OneDrive/Desktop/cs35L/newFridayz/Fridayz/frontend/node_modules/mongoose/lib/helpers/discriminator/getConstructor.js"],"sourcesContent":["'use strict';\n\nconst getDiscriminatorByValue = require('./getDiscriminatorByValue');\n\n/**\n * Find the correct constructor, taking into account discriminators\n * @api private\n */\n\nmodule.exports = function getConstructor(Constructor, value, defaultDiscriminatorValue) {\n  const discriminatorKey = Constructor.schema.options.discriminatorKey;\n  let discriminatorValue = (value != null && value[discriminatorKey]);\n  if (discriminatorValue == null) {\n    discriminatorValue = defaultDiscriminatorValue;\n  }\n  if (Constructor.discriminators &&\n      discriminatorValue != null) {\n    if (Constructor.discriminators[discriminatorValue]) {\n      Constructor = Constructor.discriminators[discriminatorValue];\n    } else {\n      const constructorByValue = getDiscriminatorByValue(Constructor.discriminators, discriminatorValue);\n      if (constructorByValue) {\n        Constructor = constructorByValue;\n      }\n    }\n  }\n\n  return Constructor;\n};\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,uBAAuB,GAAGC,OAAO,CAAC,2BAA2B,CAAC;;AAEpE;AACA;AACA;AACA;;AAEAC,MAAM,CAACC,OAAO,GAAG,SAASC,cAAcA,CAACC,WAAW,EAAEC,KAAK,EAAEC,yBAAyB,EAAE;EACtF,MAAMC,gBAAgB,GAAGH,WAAW,CAACI,MAAM,CAACC,OAAO,CAACF,gBAAgB;EACpE,IAAIG,kBAAkB,GAAIL,KAAK,IAAI,IAAI,IAAIA,KAAK,CAACE,gBAAgB,CAAE;EACnE,IAAIG,kBAAkB,IAAI,IAAI,EAAE;IAC9BA,kBAAkB,GAAGJ,yBAAyB;EAChD;EACA,IAAIF,WAAW,CAACO,cAAc,IAC1BD,kBAAkB,IAAI,IAAI,EAAE;IAC9B,IAAIN,WAAW,CAACO,cAAc,CAACD,kBAAkB,CAAC,EAAE;MAClDN,WAAW,GAAGA,WAAW,CAACO,cAAc,CAACD,kBAAkB,CAAC;IAC9D,CAAC,MAAM;MACL,MAAME,kBAAkB,GAAGb,uBAAuB,CAACK,WAAW,CAACO,cAAc,EAAED,kBAAkB,CAAC;MAClG,IAAIE,kBAAkB,EAAE;QACtBR,WAAW,GAAGQ,kBAAkB;MAClC;IACF;EACF;EAEA,OAAOR,WAAW;AACpB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}