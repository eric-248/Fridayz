{"ast":null,"code":"'use strict';\n\nconst CastError = require('../../error/cast');\nconst castBoolean = require('../../cast/boolean');\nconst castString = require('../../cast/string');\n\n/**\n * Casts val to an object suitable for `$text`. Throws an error if the object\n * can't be casted.\n *\n * @param {Any} val value to cast\n * @param {String} [path] path to associate with any errors that occured\n * @return {Object} casted object\n * @see https://www.mongodb.com/docs/manual/reference/operator/query/text/\n * @api private\n */\n\nmodule.exports = function (val, path) {\n  if (val == null || typeof val !== 'object') {\n    throw new CastError('$text', val, path);\n  }\n  if (val.$search != null) {\n    val.$search = castString(val.$search, path + '.$search');\n  }\n  if (val.$language != null) {\n    val.$language = castString(val.$language, path + '.$language');\n  }\n  if (val.$caseSensitive != null) {\n    val.$caseSensitive = castBoolean(val.$caseSensitive, path + '.$castSensitive');\n  }\n  if (val.$diacriticSensitive != null) {\n    val.$diacriticSensitive = castBoolean(val.$diacriticSensitive, path + '.$diacriticSensitive');\n  }\n  return val;\n};","map":{"version":3,"names":["CastError","require","castBoolean","castString","module","exports","val","path","$search","$language","$caseSensitive","$diacriticSensitive"],"sources":["C:/Users/lrmir/OneDrive/Desktop/cs35L/newFridayz/Fridayz/frontend/node_modules/mongoose/lib/schema/operators/text.js"],"sourcesContent":["'use strict';\n\nconst CastError = require('../../error/cast');\nconst castBoolean = require('../../cast/boolean');\nconst castString = require('../../cast/string');\n\n/**\n * Casts val to an object suitable for `$text`. Throws an error if the object\n * can't be casted.\n *\n * @param {Any} val value to cast\n * @param {String} [path] path to associate with any errors that occured\n * @return {Object} casted object\n * @see https://www.mongodb.com/docs/manual/reference/operator/query/text/\n * @api private\n */\n\nmodule.exports = function(val, path) {\n  if (val == null || typeof val !== 'object') {\n    throw new CastError('$text', val, path);\n  }\n\n  if (val.$search != null) {\n    val.$search = castString(val.$search, path + '.$search');\n  }\n  if (val.$language != null) {\n    val.$language = castString(val.$language, path + '.$language');\n  }\n  if (val.$caseSensitive != null) {\n    val.$caseSensitive = castBoolean(val.$caseSensitive,\n      path + '.$castSensitive');\n  }\n  if (val.$diacriticSensitive != null) {\n    val.$diacriticSensitive = castBoolean(val.$diacriticSensitive,\n      path + '.$diacriticSensitive');\n  }\n\n  return val;\n};\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,SAAS,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AAC7C,MAAMC,WAAW,GAAGD,OAAO,CAAC,oBAAoB,CAAC;AACjD,MAAME,UAAU,GAAGF,OAAO,CAAC,mBAAmB,CAAC;;AAE/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAG,MAAM,CAACC,OAAO,GAAG,UAASC,GAAG,EAAEC,IAAI,EAAE;EACnC,IAAID,GAAG,IAAI,IAAI,IAAI,OAAOA,GAAG,KAAK,QAAQ,EAAE;IAC1C,MAAM,IAAIN,SAAS,CAAC,OAAO,EAAEM,GAAG,EAAEC,IAAI,CAAC;EACzC;EAEA,IAAID,GAAG,CAACE,OAAO,IAAI,IAAI,EAAE;IACvBF,GAAG,CAACE,OAAO,GAAGL,UAAU,CAACG,GAAG,CAACE,OAAO,EAAED,IAAI,GAAG,UAAU,CAAC;EAC1D;EACA,IAAID,GAAG,CAACG,SAAS,IAAI,IAAI,EAAE;IACzBH,GAAG,CAACG,SAAS,GAAGN,UAAU,CAACG,GAAG,CAACG,SAAS,EAAEF,IAAI,GAAG,YAAY,CAAC;EAChE;EACA,IAAID,GAAG,CAACI,cAAc,IAAI,IAAI,EAAE;IAC9BJ,GAAG,CAACI,cAAc,GAAGR,WAAW,CAACI,GAAG,CAACI,cAAc,EACjDH,IAAI,GAAG,iBAAiB,CAAC;EAC7B;EACA,IAAID,GAAG,CAACK,mBAAmB,IAAI,IAAI,EAAE;IACnCL,GAAG,CAACK,mBAAmB,GAAGT,WAAW,CAACI,GAAG,CAACK,mBAAmB,EAC3DJ,IAAI,GAAG,sBAAsB,CAAC;EAClC;EAEA,OAAOD,GAAG;AACZ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}