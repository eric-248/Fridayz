{"ast":null,"code":"/*!\n * Module requirements.\n */\n\n'use strict';\n\nconst castArraysOfNumbers = require('./helpers').castArraysOfNumbers;\nconst castToNumber = require('./helpers').castToNumber;\n\n/*!\n * ignore\n */\n\nexports.cast$geoIntersects = cast$geoIntersects;\nexports.cast$near = cast$near;\nexports.cast$within = cast$within;\nfunction cast$near(val) {\n  const SchemaArray = require('../array');\n  if (Array.isArray(val)) {\n    castArraysOfNumbers(val, this);\n    return val;\n  }\n  _castMinMaxDistance(this, val);\n  if (val && val.$geometry) {\n    return cast$geometry(val, this);\n  }\n  if (!Array.isArray(val)) {\n    throw new TypeError('$near must be either an array or an object ' + 'with a $geometry property');\n  }\n  return SchemaArray.prototype.castForQuery.call(this, null, val);\n}\nfunction cast$geometry(val, self) {\n  switch (val.$geometry.type) {\n    case 'Polygon':\n    case 'LineString':\n    case 'Point':\n      castArraysOfNumbers(val.$geometry.coordinates, self);\n      break;\n    default:\n      // ignore unknowns\n      break;\n  }\n  _castMinMaxDistance(self, val);\n  return val;\n}\nfunction cast$within(val) {\n  _castMinMaxDistance(this, val);\n  if (val.$box || val.$polygon) {\n    const type = val.$box ? '$box' : '$polygon';\n    val[type].forEach(arr => {\n      if (!Array.isArray(arr)) {\n        const msg = 'Invalid $within $box argument. ' + 'Expected an array, received ' + arr;\n        throw new TypeError(msg);\n      }\n      arr.forEach((v, i) => {\n        arr[i] = castToNumber.call(this, v);\n      });\n    });\n  } else if (val.$center || val.$centerSphere) {\n    const type = val.$center ? '$center' : '$centerSphere';\n    val[type].forEach((item, i) => {\n      if (Array.isArray(item)) {\n        item.forEach((v, j) => {\n          item[j] = castToNumber.call(this, v);\n        });\n      } else {\n        val[type][i] = castToNumber.call(this, item);\n      }\n    });\n  } else if (val.$geometry) {\n    cast$geometry(val, this);\n  }\n  return val;\n}\nfunction cast$geoIntersects(val) {\n  const geo = val.$geometry;\n  if (!geo) {\n    return;\n  }\n  cast$geometry(val, this);\n  return val;\n}\nfunction _castMinMaxDistance(self, val) {\n  if (val.$maxDistance) {\n    val.$maxDistance = castToNumber.call(self, val.$maxDistance);\n  }\n  if (val.$minDistance) {\n    val.$minDistance = castToNumber.call(self, val.$minDistance);\n  }\n}","map":{"version":3,"names":["castArraysOfNumbers","require","castToNumber","exports","cast$geoIntersects","cast$near","cast$within","val","SchemaArray","Array","isArray","_castMinMaxDistance","$geometry","cast$geometry","TypeError","prototype","castForQuery","call","self","type","coordinates","$box","$polygon","forEach","arr","msg","v","i","$center","$centerSphere","item","j","geo","$maxDistance","$minDistance"],"sources":["C:/Users/lrmir/OneDrive/Desktop/cs35L/newFridayz/Fridayz/frontend/node_modules/mongoose/lib/schema/operators/geospatial.js"],"sourcesContent":["/*!\n * Module requirements.\n */\n\n'use strict';\n\nconst castArraysOfNumbers = require('./helpers').castArraysOfNumbers;\nconst castToNumber = require('./helpers').castToNumber;\n\n/*!\n * ignore\n */\n\nexports.cast$geoIntersects = cast$geoIntersects;\nexports.cast$near = cast$near;\nexports.cast$within = cast$within;\n\nfunction cast$near(val) {\n  const SchemaArray = require('../array');\n\n  if (Array.isArray(val)) {\n    castArraysOfNumbers(val, this);\n    return val;\n  }\n\n  _castMinMaxDistance(this, val);\n\n  if (val && val.$geometry) {\n    return cast$geometry(val, this);\n  }\n\n  if (!Array.isArray(val)) {\n    throw new TypeError('$near must be either an array or an object ' +\n      'with a $geometry property');\n  }\n\n  return SchemaArray.prototype.castForQuery.call(this, null, val);\n}\n\nfunction cast$geometry(val, self) {\n  switch (val.$geometry.type) {\n    case 'Polygon':\n    case 'LineString':\n    case 'Point':\n      castArraysOfNumbers(val.$geometry.coordinates, self);\n      break;\n    default:\n      // ignore unknowns\n      break;\n  }\n\n  _castMinMaxDistance(self, val);\n\n  return val;\n}\n\nfunction cast$within(val) {\n  _castMinMaxDistance(this, val);\n\n  if (val.$box || val.$polygon) {\n    const type = val.$box ? '$box' : '$polygon';\n    val[type].forEach(arr => {\n      if (!Array.isArray(arr)) {\n        const msg = 'Invalid $within $box argument. '\n            + 'Expected an array, received ' + arr;\n        throw new TypeError(msg);\n      }\n      arr.forEach((v, i) => {\n        arr[i] = castToNumber.call(this, v);\n      });\n    });\n  } else if (val.$center || val.$centerSphere) {\n    const type = val.$center ? '$center' : '$centerSphere';\n    val[type].forEach((item, i) => {\n      if (Array.isArray(item)) {\n        item.forEach((v, j) => {\n          item[j] = castToNumber.call(this, v);\n        });\n      } else {\n        val[type][i] = castToNumber.call(this, item);\n      }\n    });\n  } else if (val.$geometry) {\n    cast$geometry(val, this);\n  }\n\n  return val;\n}\n\nfunction cast$geoIntersects(val) {\n  const geo = val.$geometry;\n  if (!geo) {\n    return;\n  }\n\n  cast$geometry(val, this);\n  return val;\n}\n\nfunction _castMinMaxDistance(self, val) {\n  if (val.$maxDistance) {\n    val.$maxDistance = castToNumber.call(self, val.$maxDistance);\n  }\n  if (val.$minDistance) {\n    val.$minDistance = castToNumber.call(self, val.$minDistance);\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAMA,mBAAmB,GAAGC,OAAO,CAAC,WAAW,CAAC,CAACD,mBAAmB;AACpE,MAAME,YAAY,GAAGD,OAAO,CAAC,WAAW,CAAC,CAACC,YAAY;;AAEtD;AACA;AACA;;AAEAC,OAAO,CAACC,kBAAkB,GAAGA,kBAAkB;AAC/CD,OAAO,CAACE,SAAS,GAAGA,SAAS;AAC7BF,OAAO,CAACG,WAAW,GAAGA,WAAW;AAEjC,SAASD,SAASA,CAACE,GAAG,EAAE;EACtB,MAAMC,WAAW,GAAGP,OAAO,CAAC,UAAU,CAAC;EAEvC,IAAIQ,KAAK,CAACC,OAAO,CAACH,GAAG,CAAC,EAAE;IACtBP,mBAAmB,CAACO,GAAG,EAAE,IAAI,CAAC;IAC9B,OAAOA,GAAG;EACZ;EAEAI,mBAAmB,CAAC,IAAI,EAAEJ,GAAG,CAAC;EAE9B,IAAIA,GAAG,IAAIA,GAAG,CAACK,SAAS,EAAE;IACxB,OAAOC,aAAa,CAACN,GAAG,EAAE,IAAI,CAAC;EACjC;EAEA,IAAI,CAACE,KAAK,CAACC,OAAO,CAACH,GAAG,CAAC,EAAE;IACvB,MAAM,IAAIO,SAAS,CAAC,6CAA6C,GAC/D,2BAA2B,CAAC;EAChC;EAEA,OAAON,WAAW,CAACO,SAAS,CAACC,YAAY,CAACC,IAAI,CAAC,IAAI,EAAE,IAAI,EAAEV,GAAG,CAAC;AACjE;AAEA,SAASM,aAAaA,CAACN,GAAG,EAAEW,IAAI,EAAE;EAChC,QAAQX,GAAG,CAACK,SAAS,CAACO,IAAI;IACxB,KAAK,SAAS;IACd,KAAK,YAAY;IACjB,KAAK,OAAO;MACVnB,mBAAmB,CAACO,GAAG,CAACK,SAAS,CAACQ,WAAW,EAAEF,IAAI,CAAC;MACpD;IACF;MACE;MACA;EACJ;EAEAP,mBAAmB,CAACO,IAAI,EAAEX,GAAG,CAAC;EAE9B,OAAOA,GAAG;AACZ;AAEA,SAASD,WAAWA,CAACC,GAAG,EAAE;EACxBI,mBAAmB,CAAC,IAAI,EAAEJ,GAAG,CAAC;EAE9B,IAAIA,GAAG,CAACc,IAAI,IAAId,GAAG,CAACe,QAAQ,EAAE;IAC5B,MAAMH,IAAI,GAAGZ,GAAG,CAACc,IAAI,GAAG,MAAM,GAAG,UAAU;IAC3Cd,GAAG,CAACY,IAAI,CAAC,CAACI,OAAO,CAACC,GAAG,IAAI;MACvB,IAAI,CAACf,KAAK,CAACC,OAAO,CAACc,GAAG,CAAC,EAAE;QACvB,MAAMC,GAAG,GAAG,iCAAiC,GACvC,8BAA8B,GAAGD,GAAG;QAC1C,MAAM,IAAIV,SAAS,CAACW,GAAG,CAAC;MAC1B;MACAD,GAAG,CAACD,OAAO,CAAC,CAACG,CAAC,EAAEC,CAAC,KAAK;QACpBH,GAAG,CAACG,CAAC,CAAC,GAAGzB,YAAY,CAACe,IAAI,CAAC,IAAI,EAAES,CAAC,CAAC;MACrC,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC,MAAM,IAAInB,GAAG,CAACqB,OAAO,IAAIrB,GAAG,CAACsB,aAAa,EAAE;IAC3C,MAAMV,IAAI,GAAGZ,GAAG,CAACqB,OAAO,GAAG,SAAS,GAAG,eAAe;IACtDrB,GAAG,CAACY,IAAI,CAAC,CAACI,OAAO,CAAC,CAACO,IAAI,EAAEH,CAAC,KAAK;MAC7B,IAAIlB,KAAK,CAACC,OAAO,CAACoB,IAAI,CAAC,EAAE;QACvBA,IAAI,CAACP,OAAO,CAAC,CAACG,CAAC,EAAEK,CAAC,KAAK;UACrBD,IAAI,CAACC,CAAC,CAAC,GAAG7B,YAAY,CAACe,IAAI,CAAC,IAAI,EAAES,CAAC,CAAC;QACtC,CAAC,CAAC;MACJ,CAAC,MAAM;QACLnB,GAAG,CAACY,IAAI,CAAC,CAACQ,CAAC,CAAC,GAAGzB,YAAY,CAACe,IAAI,CAAC,IAAI,EAAEa,IAAI,CAAC;MAC9C;IACF,CAAC,CAAC;EACJ,CAAC,MAAM,IAAIvB,GAAG,CAACK,SAAS,EAAE;IACxBC,aAAa,CAACN,GAAG,EAAE,IAAI,CAAC;EAC1B;EAEA,OAAOA,GAAG;AACZ;AAEA,SAASH,kBAAkBA,CAACG,GAAG,EAAE;EAC/B,MAAMyB,GAAG,GAAGzB,GAAG,CAACK,SAAS;EACzB,IAAI,CAACoB,GAAG,EAAE;IACR;EACF;EAEAnB,aAAa,CAACN,GAAG,EAAE,IAAI,CAAC;EACxB,OAAOA,GAAG;AACZ;AAEA,SAASI,mBAAmBA,CAACO,IAAI,EAAEX,GAAG,EAAE;EACtC,IAAIA,GAAG,CAAC0B,YAAY,EAAE;IACpB1B,GAAG,CAAC0B,YAAY,GAAG/B,YAAY,CAACe,IAAI,CAACC,IAAI,EAAEX,GAAG,CAAC0B,YAAY,CAAC;EAC9D;EACA,IAAI1B,GAAG,CAAC2B,YAAY,EAAE;IACpB3B,GAAG,CAAC2B,YAAY,GAAGhC,YAAY,CAACe,IAAI,CAACC,IAAI,EAAEX,GAAG,CAAC2B,YAAY,CAAC;EAC9D;AACF","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}