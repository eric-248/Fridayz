{"ast":null,"code":"/*!\n * Module dependencies.\n */\n\n'use strict';\n\nconst SchemaType = require('../schemaType');\nconst CastError = SchemaType.CastError;\nconst castDecimal128 = require('../cast/decimal128');\nconst isBsonType = require('../helpers/isBsonType');\n\n/**\n * Decimal128 SchemaType constructor.\n *\n * @param {String} key\n * @param {Object} options\n * @inherits SchemaType\n * @api public\n */\n\nfunction SchemaDecimal128(key, options) {\n  SchemaType.call(this, key, options, 'Decimal128');\n}\n\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api public\n */\nSchemaDecimal128.schemaName = 'Decimal128';\nSchemaDecimal128.defaultOptions = {};\n\n/*!\n * Inherits from SchemaType.\n */\nSchemaDecimal128.prototype = Object.create(SchemaType.prototype);\nSchemaDecimal128.prototype.constructor = SchemaDecimal128;\n\n/*!\n * ignore\n */\n\nSchemaDecimal128._cast = castDecimal128;\n\n/**\n * Sets a default option for all Decimal128 instances.\n *\n * #### Example:\n *\n *     // Make all decimal 128s have `required` of true by default.\n *     mongoose.Schema.Decimal128.set('required', true);\n *\n *     const User = mongoose.model('User', new Schema({ test: mongoose.Decimal128 }));\n *     new User({ }).validateSync().errors.test.message; // Path `test` is required.\n *\n * @param {String} option The option you'd like to set the value for\n * @param {Any} value value for option\n * @return {undefined}\n * @function set\n * @static\n * @api public\n */\n\nSchemaDecimal128.set = SchemaType.set;\nSchemaDecimal128.setters = [];\n\n/**\n * Attaches a getter for all Decimal128 instances\n *\n * #### Example:\n *\n *     // Automatically convert Decimal128s to Numbers\n *     mongoose.Schema.Decimal128.get(v => v == null ? v : Number(v));\n *\n * @param {Function} getter\n * @return {this}\n * @function get\n * @static\n * @api public\n */\n\nSchemaDecimal128.get = SchemaType.get;\n\n/**\n * Get/set the function used to cast arbitrary values to decimals.\n *\n * #### Example:\n *\n *     // Make Mongoose only refuse to cast numbers as decimal128\n *     const original = mongoose.Schema.Types.Decimal128.cast();\n *     mongoose.Decimal128.cast(v => {\n *       assert.ok(typeof v !== 'number');\n *       return original(v);\n *     });\n *\n *     // Or disable casting entirely\n *     mongoose.Decimal128.cast(false);\n *\n * @param {Function} [caster]\n * @return {Function}\n * @function get\n * @static\n * @api public\n */\n\nSchemaDecimal128.cast = function cast(caster) {\n  if (arguments.length === 0) {\n    return this._cast;\n  }\n  if (caster === false) {\n    caster = this._defaultCaster;\n  }\n  this._cast = caster;\n  return this._cast;\n};\n\n/*!\n * ignore\n */\n\nSchemaDecimal128._defaultCaster = v => {\n  if (v != null && !isBsonType(v, 'Decimal128')) {\n    throw new Error();\n  }\n  return v;\n};\n\n/*!\n * ignore\n */\n\nSchemaDecimal128._checkRequired = v => isBsonType(v, 'Decimal128');\n\n/**\n * Override the function the required validator uses to check whether a string\n * passes the `required` check.\n *\n * @param {Function} fn\n * @return {Function}\n * @function checkRequired\n * @static\n * @api public\n */\n\nSchemaDecimal128.checkRequired = SchemaType.checkRequired;\n\n/**\n * Check if the given value satisfies a required validator.\n *\n * @param {Any} value\n * @param {Document} doc\n * @return {Boolean}\n * @api public\n */\n\nSchemaDecimal128.prototype.checkRequired = function checkRequired(value, doc) {\n  if (SchemaType._isRef(this, value, doc, true)) {\n    return !!value;\n  }\n\n  // `require('util').inherits()` does **not** copy static properties, and\n  // plugins like mongoose-float use `inherits()` for pre-ES6.\n  const _checkRequired = typeof this.constructor.checkRequired === 'function' ? this.constructor.checkRequired() : SchemaDecimal128.checkRequired();\n  return _checkRequired(value);\n};\n\n/**\n * Casts to Decimal128\n *\n * @param {Object} value\n * @param {Object} doc\n * @param {Boolean} init whether this is an initialization cast\n * @api private\n */\n\nSchemaDecimal128.prototype.cast = function (value, doc, init) {\n  if (SchemaType._isRef(this, value, doc, init)) {\n    if (isBsonType(value, 'Decimal128')) {\n      return value;\n    }\n    return this._castRef(value, doc, init);\n  }\n  let castDecimal128;\n  if (typeof this._castFunction === 'function') {\n    castDecimal128 = this._castFunction;\n  } else if (typeof this.constructor.cast === 'function') {\n    castDecimal128 = this.constructor.cast();\n  } else {\n    castDecimal128 = SchemaDecimal128.cast();\n  }\n  try {\n    return castDecimal128(value);\n  } catch (error) {\n    throw new CastError('Decimal128', value, this.path, error, this);\n  }\n};\n\n/*!\n * ignore\n */\n\nfunction handleSingle(val) {\n  return this.cast(val);\n}\nSchemaDecimal128.prototype.$conditionalHandlers = {\n  ...SchemaType.prototype.$conditionalHandlers,\n  $gt: handleSingle,\n  $gte: handleSingle,\n  $lt: handleSingle,\n  $lte: handleSingle\n};\n\n/*!\n * Module exports.\n */\n\nmodule.exports = SchemaDecimal128;","map":{"version":3,"names":["SchemaType","require","CastError","castDecimal128","isBsonType","SchemaDecimal128","key","options","call","schemaName","defaultOptions","prototype","Object","create","constructor","_cast","set","setters","get","cast","caster","arguments","length","_defaultCaster","v","Error","_checkRequired","checkRequired","value","doc","_isRef","init","_castRef","_castFunction","error","path","handleSingle","val","$conditionalHandlers","$gt","$gte","$lt","$lte","module","exports"],"sources":["C:/Users/lrmir/OneDrive/Desktop/cs35L/newFridayz/Fridayz/frontend/node_modules/mongoose/lib/schema/decimal128.js"],"sourcesContent":["/*!\n * Module dependencies.\n */\n\n'use strict';\n\nconst SchemaType = require('../schemaType');\nconst CastError = SchemaType.CastError;\nconst castDecimal128 = require('../cast/decimal128');\nconst isBsonType = require('../helpers/isBsonType');\n\n/**\n * Decimal128 SchemaType constructor.\n *\n * @param {String} key\n * @param {Object} options\n * @inherits SchemaType\n * @api public\n */\n\nfunction SchemaDecimal128(key, options) {\n  SchemaType.call(this, key, options, 'Decimal128');\n}\n\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api public\n */\nSchemaDecimal128.schemaName = 'Decimal128';\n\nSchemaDecimal128.defaultOptions = {};\n\n/*!\n * Inherits from SchemaType.\n */\nSchemaDecimal128.prototype = Object.create(SchemaType.prototype);\nSchemaDecimal128.prototype.constructor = SchemaDecimal128;\n\n/*!\n * ignore\n */\n\nSchemaDecimal128._cast = castDecimal128;\n\n/**\n * Sets a default option for all Decimal128 instances.\n *\n * #### Example:\n *\n *     // Make all decimal 128s have `required` of true by default.\n *     mongoose.Schema.Decimal128.set('required', true);\n *\n *     const User = mongoose.model('User', new Schema({ test: mongoose.Decimal128 }));\n *     new User({ }).validateSync().errors.test.message; // Path `test` is required.\n *\n * @param {String} option The option you'd like to set the value for\n * @param {Any} value value for option\n * @return {undefined}\n * @function set\n * @static\n * @api public\n */\n\nSchemaDecimal128.set = SchemaType.set;\n\nSchemaDecimal128.setters = [];\n\n/**\n * Attaches a getter for all Decimal128 instances\n *\n * #### Example:\n *\n *     // Automatically convert Decimal128s to Numbers\n *     mongoose.Schema.Decimal128.get(v => v == null ? v : Number(v));\n *\n * @param {Function} getter\n * @return {this}\n * @function get\n * @static\n * @api public\n */\n\nSchemaDecimal128.get = SchemaType.get;\n\n/**\n * Get/set the function used to cast arbitrary values to decimals.\n *\n * #### Example:\n *\n *     // Make Mongoose only refuse to cast numbers as decimal128\n *     const original = mongoose.Schema.Types.Decimal128.cast();\n *     mongoose.Decimal128.cast(v => {\n *       assert.ok(typeof v !== 'number');\n *       return original(v);\n *     });\n *\n *     // Or disable casting entirely\n *     mongoose.Decimal128.cast(false);\n *\n * @param {Function} [caster]\n * @return {Function}\n * @function get\n * @static\n * @api public\n */\n\nSchemaDecimal128.cast = function cast(caster) {\n  if (arguments.length === 0) {\n    return this._cast;\n  }\n  if (caster === false) {\n    caster = this._defaultCaster;\n  }\n  this._cast = caster;\n\n  return this._cast;\n};\n\n/*!\n * ignore\n */\n\nSchemaDecimal128._defaultCaster = v => {\n  if (v != null && !isBsonType(v, 'Decimal128')) {\n    throw new Error();\n  }\n  return v;\n};\n\n/*!\n * ignore\n */\n\nSchemaDecimal128._checkRequired = v => isBsonType(v, 'Decimal128');\n\n/**\n * Override the function the required validator uses to check whether a string\n * passes the `required` check.\n *\n * @param {Function} fn\n * @return {Function}\n * @function checkRequired\n * @static\n * @api public\n */\n\nSchemaDecimal128.checkRequired = SchemaType.checkRequired;\n\n/**\n * Check if the given value satisfies a required validator.\n *\n * @param {Any} value\n * @param {Document} doc\n * @return {Boolean}\n * @api public\n */\n\nSchemaDecimal128.prototype.checkRequired = function checkRequired(value, doc) {\n  if (SchemaType._isRef(this, value, doc, true)) {\n    return !!value;\n  }\n\n  // `require('util').inherits()` does **not** copy static properties, and\n  // plugins like mongoose-float use `inherits()` for pre-ES6.\n  const _checkRequired = typeof this.constructor.checkRequired === 'function' ?\n    this.constructor.checkRequired() :\n    SchemaDecimal128.checkRequired();\n\n  return _checkRequired(value);\n};\n\n/**\n * Casts to Decimal128\n *\n * @param {Object} value\n * @param {Object} doc\n * @param {Boolean} init whether this is an initialization cast\n * @api private\n */\n\nSchemaDecimal128.prototype.cast = function(value, doc, init) {\n  if (SchemaType._isRef(this, value, doc, init)) {\n    if (isBsonType(value, 'Decimal128')) {\n      return value;\n    }\n\n    return this._castRef(value, doc, init);\n  }\n\n  let castDecimal128;\n  if (typeof this._castFunction === 'function') {\n    castDecimal128 = this._castFunction;\n  } else if (typeof this.constructor.cast === 'function') {\n    castDecimal128 = this.constructor.cast();\n  } else {\n    castDecimal128 = SchemaDecimal128.cast();\n  }\n\n  try {\n    return castDecimal128(value);\n  } catch (error) {\n    throw new CastError('Decimal128', value, this.path, error, this);\n  }\n};\n\n/*!\n * ignore\n */\n\nfunction handleSingle(val) {\n  return this.cast(val);\n}\n\nSchemaDecimal128.prototype.$conditionalHandlers = {\n  ...SchemaType.prototype.$conditionalHandlers,\n  $gt: handleSingle,\n  $gte: handleSingle,\n  $lt: handleSingle,\n  $lte: handleSingle\n};\n\n/*!\n * Module exports.\n */\n\nmodule.exports = SchemaDecimal128;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}