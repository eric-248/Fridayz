{"ast":null,"code":"'use strict';\n\nconst get = require('../get');\nconst getSchemaDiscriminatorByValue = require('../discriminator/getSchemaDiscriminatorByValue');\n\n/**\n * Like `schema.path()`, except with a document, because impossible to\n * determine path type without knowing the embedded discriminator key.\n *\n * @param {Document} doc\n * @param {String|String[]} path\n * @param {Object} [options]\n * @api private\n */\n\nmodule.exports = function getEmbeddedDiscriminatorPath(doc, path, options) {\n  options = options || {};\n  const typeOnly = options.typeOnly;\n  const parts = Array.isArray(path) ? path : path.indexOf('.') === -1 ? [path] : path.split('.');\n  let schemaType = null;\n  let type = 'adhocOrUndefined';\n  const schema = getSchemaDiscriminatorByValue(doc.schema, doc.get(doc.schema.options.discriminatorKey)) || doc.schema;\n  for (let i = 0; i < parts.length; ++i) {\n    const subpath = parts.slice(0, i + 1).join('.');\n    schemaType = schema.path(subpath);\n    if (schemaType == null) {\n      type = 'adhocOrUndefined';\n      continue;\n    }\n    if (schemaType.instance === 'Mixed') {\n      return typeOnly ? 'real' : schemaType;\n    }\n    type = schema.pathType(subpath);\n    if ((schemaType.$isSingleNested || schemaType.$isMongooseDocumentArrayElement) && schemaType.schema.discriminators != null) {\n      const discriminators = schemaType.schema.discriminators;\n      const discriminatorKey = doc.get(subpath + '.' + get(schemaType, 'schema.options.discriminatorKey'));\n      if (discriminatorKey == null || discriminators[discriminatorKey] == null) {\n        continue;\n      }\n      const rest = parts.slice(i + 1).join('.');\n      return getEmbeddedDiscriminatorPath(doc.get(subpath), rest, options);\n    }\n  }\n\n  // Are we getting the whole schema or just the type, 'real', 'nested', etc.\n  return typeOnly ? type : schemaType;\n};","map":{"version":3,"names":["get","require","getSchemaDiscriminatorByValue","module","exports","getEmbeddedDiscriminatorPath","doc","path","options","typeOnly","parts","Array","isArray","indexOf","split","schemaType","type","schema","discriminatorKey","i","length","subpath","slice","join","instance","pathType","$isSingleNested","$isMongooseDocumentArrayElement","discriminators","rest"],"sources":["C:/Users/lrmir/OneDrive/Desktop/cs35L/newFridayz/Fridayz/frontend/node_modules/mongoose/lib/helpers/document/getEmbeddedDiscriminatorPath.js"],"sourcesContent":["'use strict';\n\nconst get = require('../get');\nconst getSchemaDiscriminatorByValue = require('../discriminator/getSchemaDiscriminatorByValue');\n\n/**\n * Like `schema.path()`, except with a document, because impossible to\n * determine path type without knowing the embedded discriminator key.\n *\n * @param {Document} doc\n * @param {String|String[]} path\n * @param {Object} [options]\n * @api private\n */\n\nmodule.exports = function getEmbeddedDiscriminatorPath(doc, path, options) {\n  options = options || {};\n  const typeOnly = options.typeOnly;\n  const parts = Array.isArray(path) ?\n    path :\n    (path.indexOf('.') === -1 ? [path] : path.split('.'));\n  let schemaType = null;\n  let type = 'adhocOrUndefined';\n\n  const schema = getSchemaDiscriminatorByValue(doc.schema, doc.get(doc.schema.options.discriminatorKey)) || doc.schema;\n\n  for (let i = 0; i < parts.length; ++i) {\n    const subpath = parts.slice(0, i + 1).join('.');\n    schemaType = schema.path(subpath);\n    if (schemaType == null) {\n      type = 'adhocOrUndefined';\n      continue;\n    }\n    if (schemaType.instance === 'Mixed') {\n      return typeOnly ? 'real' : schemaType;\n    }\n    type = schema.pathType(subpath);\n    if ((schemaType.$isSingleNested || schemaType.$isMongooseDocumentArrayElement) &&\n    schemaType.schema.discriminators != null) {\n      const discriminators = schemaType.schema.discriminators;\n      const discriminatorKey = doc.get(subpath + '.' +\n        get(schemaType, 'schema.options.discriminatorKey'));\n      if (discriminatorKey == null || discriminators[discriminatorKey] == null) {\n        continue;\n      }\n      const rest = parts.slice(i + 1).join('.');\n      return getEmbeddedDiscriminatorPath(doc.get(subpath), rest, options);\n    }\n  }\n\n  // Are we getting the whole schema or just the type, 'real', 'nested', etc.\n  return typeOnly ? type : schemaType;\n};\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,GAAG,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAC7B,MAAMC,6BAA6B,GAAGD,OAAO,CAAC,gDAAgD,CAAC;;AAE/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAE,MAAM,CAACC,OAAO,GAAG,SAASC,4BAA4BA,CAACC,GAAG,EAAEC,IAAI,EAAEC,OAAO,EAAE;EACzEA,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;EACvB,MAAMC,QAAQ,GAAGD,OAAO,CAACC,QAAQ;EACjC,MAAMC,KAAK,GAAGC,KAAK,CAACC,OAAO,CAACL,IAAI,CAAC,GAC/BA,IAAI,GACHA,IAAI,CAACM,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,GAAG,CAACN,IAAI,CAAC,GAAGA,IAAI,CAACO,KAAK,CAAC,GAAG,CAAE;EACvD,IAAIC,UAAU,GAAG,IAAI;EACrB,IAAIC,IAAI,GAAG,kBAAkB;EAE7B,MAAMC,MAAM,GAAGf,6BAA6B,CAACI,GAAG,CAACW,MAAM,EAAEX,GAAG,CAACN,GAAG,CAACM,GAAG,CAACW,MAAM,CAACT,OAAO,CAACU,gBAAgB,CAAC,CAAC,IAAIZ,GAAG,CAACW,MAAM;EAEpH,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGT,KAAK,CAACU,MAAM,EAAE,EAAED,CAAC,EAAE;IACrC,MAAME,OAAO,GAAGX,KAAK,CAACY,KAAK,CAAC,CAAC,EAAEH,CAAC,GAAG,CAAC,CAAC,CAACI,IAAI,CAAC,GAAG,CAAC;IAC/CR,UAAU,GAAGE,MAAM,CAACV,IAAI,CAACc,OAAO,CAAC;IACjC,IAAIN,UAAU,IAAI,IAAI,EAAE;MACtBC,IAAI,GAAG,kBAAkB;MACzB;IACF;IACA,IAAID,UAAU,CAACS,QAAQ,KAAK,OAAO,EAAE;MACnC,OAAOf,QAAQ,GAAG,MAAM,GAAGM,UAAU;IACvC;IACAC,IAAI,GAAGC,MAAM,CAACQ,QAAQ,CAACJ,OAAO,CAAC;IAC/B,IAAI,CAACN,UAAU,CAACW,eAAe,IAAIX,UAAU,CAACY,+BAA+B,KAC7EZ,UAAU,CAACE,MAAM,CAACW,cAAc,IAAI,IAAI,EAAE;MACxC,MAAMA,cAAc,GAAGb,UAAU,CAACE,MAAM,CAACW,cAAc;MACvD,MAAMV,gBAAgB,GAAGZ,GAAG,CAACN,GAAG,CAACqB,OAAO,GAAG,GAAG,GAC5CrB,GAAG,CAACe,UAAU,EAAE,iCAAiC,CAAC,CAAC;MACrD,IAAIG,gBAAgB,IAAI,IAAI,IAAIU,cAAc,CAACV,gBAAgB,CAAC,IAAI,IAAI,EAAE;QACxE;MACF;MACA,MAAMW,IAAI,GAAGnB,KAAK,CAACY,KAAK,CAACH,CAAC,GAAG,CAAC,CAAC,CAACI,IAAI,CAAC,GAAG,CAAC;MACzC,OAAOlB,4BAA4B,CAACC,GAAG,CAACN,GAAG,CAACqB,OAAO,CAAC,EAAEQ,IAAI,EAAErB,OAAO,CAAC;IACtE;EACF;;EAEA;EACA,OAAOC,QAAQ,GAAGO,IAAI,GAAGD,UAAU;AACrC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}