{"ast":null,"code":"'use strict';\n\nconst applyTimestampsToChildren = require('../update/applyTimestampsToChildren');\nconst applyTimestampsToUpdate = require('../update/applyTimestampsToUpdate');\nconst get = require('../get');\nconst handleTimestampOption = require('../schema/handleTimestampOption');\nconst setDocumentTimestamps = require('./setDocumentTimestamps');\nconst symbols = require('../../schema/symbols');\nconst replaceOps = new Set(['replaceOne', 'findOneAndReplace']);\nmodule.exports = function setupTimestamps(schema, timestamps) {\n  const childHasTimestamp = schema.childSchemas.find(withTimestamp);\n  function withTimestamp(s) {\n    const ts = s.schema.options.timestamps;\n    return !!ts;\n  }\n  if (!timestamps && !childHasTimestamp) {\n    return;\n  }\n  const createdAt = handleTimestampOption(timestamps, 'createdAt');\n  const updatedAt = handleTimestampOption(timestamps, 'updatedAt');\n  const currentTime = timestamps != null && timestamps.hasOwnProperty('currentTime') ? timestamps.currentTime : null;\n  const schemaAdditions = {};\n  schema.$timestamps = {\n    createdAt: createdAt,\n    updatedAt: updatedAt\n  };\n  if (createdAt && !schema.paths[createdAt]) {\n    const baseImmutableCreatedAt = schema.base != null ? schema.base.get('timestamps.createdAt.immutable') : null;\n    const immutable = baseImmutableCreatedAt != null ? baseImmutableCreatedAt : true;\n    schemaAdditions[createdAt] = {\n      [schema.options.typeKey || 'type']: Date,\n      immutable\n    };\n  }\n  if (updatedAt && !schema.paths[updatedAt]) {\n    schemaAdditions[updatedAt] = Date;\n  }\n  schema.add(schemaAdditions);\n  schema.pre('save', function timestampsPreSave(next) {\n    const timestampOption = get(this, '$__.saveOptions.timestamps');\n    if (timestampOption === false) {\n      return next();\n    }\n    setDocumentTimestamps(this, timestampOption, currentTime, createdAt, updatedAt);\n    next();\n  });\n  schema.methods.initializeTimestamps = function () {\n    const ts = currentTime != null ? currentTime() : this.constructor.base.now();\n    if (createdAt && !this.get(createdAt)) {\n      this.$set(createdAt, ts);\n    }\n    if (updatedAt && !this.get(updatedAt)) {\n      this.$set(updatedAt, ts);\n    }\n    if (this.$isSubdocument) {\n      return this;\n    }\n    const subdocs = this.$getAllSubdocs();\n    for (const subdoc of subdocs) {\n      if (subdoc.initializeTimestamps) {\n        subdoc.initializeTimestamps();\n      }\n    }\n    return this;\n  };\n  _setTimestampsOnUpdate[symbols.builtInMiddleware] = true;\n  const opts = {\n    query: true,\n    model: false\n  };\n  schema.pre('findOneAndReplace', opts, _setTimestampsOnUpdate);\n  schema.pre('findOneAndUpdate', opts, _setTimestampsOnUpdate);\n  schema.pre('replaceOne', opts, _setTimestampsOnUpdate);\n  schema.pre('update', opts, _setTimestampsOnUpdate);\n  schema.pre('updateOne', opts, _setTimestampsOnUpdate);\n  schema.pre('updateMany', opts, _setTimestampsOnUpdate);\n  function _setTimestampsOnUpdate(next) {\n    const now = currentTime != null ? currentTime() : this.model.base.now();\n    // Replacing with null update should still trigger timestamps\n    if (replaceOps.has(this.op) && this.getUpdate() == null) {\n      this.setUpdate({});\n    }\n    applyTimestampsToUpdate(now, createdAt, updatedAt, this.getUpdate(), this._mongooseOptions, replaceOps.has(this.op));\n    applyTimestampsToChildren(now, this.getUpdate(), this.model.schema);\n    next();\n  }\n};","map":{"version":3,"names":["applyTimestampsToChildren","require","applyTimestampsToUpdate","get","handleTimestampOption","setDocumentTimestamps","symbols","replaceOps","Set","module","exports","setupTimestamps","schema","timestamps","childHasTimestamp","childSchemas","find","withTimestamp","s","ts","options","createdAt","updatedAt","currentTime","hasOwnProperty","schemaAdditions","$timestamps","paths","baseImmutableCreatedAt","base","immutable","typeKey","Date","add","pre","timestampsPreSave","next","timestampOption","methods","initializeTimestamps","constructor","now","$set","$isSubdocument","subdocs","$getAllSubdocs","subdoc","_setTimestampsOnUpdate","builtInMiddleware","opts","query","model","has","op","getUpdate","setUpdate","_mongooseOptions"],"sources":["C:/Users/lrmir/OneDrive/Desktop/cs35L/newFridayz/Fridayz/frontend/node_modules/mongoose/lib/helpers/timestamps/setupTimestamps.js"],"sourcesContent":["'use strict';\n\nconst applyTimestampsToChildren = require('../update/applyTimestampsToChildren');\nconst applyTimestampsToUpdate = require('../update/applyTimestampsToUpdate');\nconst get = require('../get');\nconst handleTimestampOption = require('../schema/handleTimestampOption');\nconst setDocumentTimestamps = require('./setDocumentTimestamps');\nconst symbols = require('../../schema/symbols');\n\nconst replaceOps = new Set([\n  'replaceOne',\n  'findOneAndReplace'\n]);\n\nmodule.exports = function setupTimestamps(schema, timestamps) {\n  const childHasTimestamp = schema.childSchemas.find(withTimestamp);\n  function withTimestamp(s) {\n    const ts = s.schema.options.timestamps;\n    return !!ts;\n  }\n  if (!timestamps && !childHasTimestamp) {\n    return;\n  }\n  const createdAt = handleTimestampOption(timestamps, 'createdAt');\n  const updatedAt = handleTimestampOption(timestamps, 'updatedAt');\n  const currentTime = timestamps != null && timestamps.hasOwnProperty('currentTime') ?\n    timestamps.currentTime :\n    null;\n  const schemaAdditions = {};\n\n  schema.$timestamps = { createdAt: createdAt, updatedAt: updatedAt };\n\n  if (createdAt && !schema.paths[createdAt]) {\n    const baseImmutableCreatedAt = schema.base != null ? schema.base.get('timestamps.createdAt.immutable') : null;\n    const immutable = baseImmutableCreatedAt != null ? baseImmutableCreatedAt : true;\n    schemaAdditions[createdAt] = { [schema.options.typeKey || 'type']: Date, immutable };\n  }\n\n  if (updatedAt && !schema.paths[updatedAt]) {\n    schemaAdditions[updatedAt] = Date;\n  }\n\n  schema.add(schemaAdditions);\n\n  schema.pre('save', function timestampsPreSave(next) {\n    const timestampOption = get(this, '$__.saveOptions.timestamps');\n    if (timestampOption === false) {\n      return next();\n    }\n\n    setDocumentTimestamps(this, timestampOption, currentTime, createdAt, updatedAt);\n\n    next();\n  });\n\n  schema.methods.initializeTimestamps = function() {\n    const ts = currentTime != null ?\n      currentTime() : this.constructor.base.now();\n\n\n    if (createdAt && !this.get(createdAt)) {\n      this.$set(createdAt, ts);\n    }\n    if (updatedAt && !this.get(updatedAt)) {\n      this.$set(updatedAt, ts);\n    }\n    if (this.$isSubdocument) {\n      return this;\n    }\n\n    const subdocs = this.$getAllSubdocs();\n    for (const subdoc of subdocs) {\n      if (subdoc.initializeTimestamps) {\n        subdoc.initializeTimestamps();\n      }\n    }\n\n    return this;\n  };\n\n  _setTimestampsOnUpdate[symbols.builtInMiddleware] = true;\n\n  const opts = { query: true, model: false };\n  schema.pre('findOneAndReplace', opts, _setTimestampsOnUpdate);\n  schema.pre('findOneAndUpdate', opts, _setTimestampsOnUpdate);\n  schema.pre('replaceOne', opts, _setTimestampsOnUpdate);\n  schema.pre('update', opts, _setTimestampsOnUpdate);\n  schema.pre('updateOne', opts, _setTimestampsOnUpdate);\n  schema.pre('updateMany', opts, _setTimestampsOnUpdate);\n\n  function _setTimestampsOnUpdate(next) {\n    const now = currentTime != null ?\n      currentTime() :\n      this.model.base.now();\n    // Replacing with null update should still trigger timestamps\n    if (replaceOps.has(this.op) && this.getUpdate() == null) {\n      this.setUpdate({});\n    }\n    applyTimestampsToUpdate(\n      now,\n      createdAt,\n      updatedAt,\n      this.getUpdate(),\n      this._mongooseOptions,\n      replaceOps.has(this.op)\n    );\n    applyTimestampsToChildren(now, this.getUpdate(), this.model.schema);\n    next();\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}