{"ast":null,"code":"'use strict';\n\n/*!\n * Module dependencies.\n */\nconst MongooseError = require('./mongooseError');\nconst util = require('util');\n\n/**\n * Casting Error constructor.\n *\n * @param {String} type\n * @param {String} value\n * @inherits MongooseError\n * @api private\n */\n\nclass CastError extends MongooseError {\n  constructor(type, value, path, reason, schemaType) {\n    // If no args, assume we'll `init()` later.\n    if (arguments.length > 0) {\n      const valueType = getValueType(value);\n      const messageFormat = getMessageFormat(schemaType);\n      const msg = formatMessage(null, type, value, path, messageFormat, valueType, reason);\n      super(msg);\n      this.init(type, value, path, reason, schemaType);\n    } else {\n      super(formatMessage());\n    }\n  }\n  toJSON() {\n    return {\n      stringValue: this.stringValue,\n      valueType: this.valueType,\n      kind: this.kind,\n      value: this.value,\n      path: this.path,\n      reason: this.reason,\n      name: this.name,\n      message: this.message\n    };\n  }\n  /*!\n   * ignore\n   */\n  init(type, value, path, reason, schemaType) {\n    this.stringValue = getStringValue(value);\n    this.messageFormat = getMessageFormat(schemaType);\n    this.kind = type;\n    this.value = value;\n    this.path = path;\n    this.reason = reason;\n    this.valueType = getValueType(value);\n  }\n\n  /**\n   * ignore\n   * @param {Readonly<CastError>} other\n   * @api private\n   */\n  copy(other) {\n    this.messageFormat = other.messageFormat;\n    this.stringValue = other.stringValue;\n    this.kind = other.kind;\n    this.value = other.value;\n    this.path = other.path;\n    this.reason = other.reason;\n    this.message = other.message;\n    this.valueType = other.valueType;\n  }\n\n  /*!\n   * ignore\n   */\n  setModel(model) {\n    this.model = model;\n    this.message = formatMessage(model, this.kind, this.value, this.path, this.messageFormat, this.valueType);\n  }\n}\nObject.defineProperty(CastError.prototype, 'name', {\n  value: 'CastError'\n});\nfunction getStringValue(value) {\n  let stringValue = util.inspect(value);\n  stringValue = stringValue.replace(/^'|'$/g, '\"');\n  if (!stringValue.startsWith('\"')) {\n    stringValue = '\"' + stringValue + '\"';\n  }\n  return stringValue;\n}\nfunction getValueType(value) {\n  if (value == null) {\n    return '' + value;\n  }\n  const t = typeof value;\n  if (t !== 'object') {\n    return t;\n  }\n  if (typeof value.constructor !== 'function') {\n    return t;\n  }\n  return value.constructor.name;\n}\nfunction getMessageFormat(schemaType) {\n  const messageFormat = schemaType && schemaType._castErrorMessage || null;\n  if (typeof messageFormat === 'string' || typeof messageFormat === 'function') {\n    return messageFormat;\n  }\n}\n\n/*!\n * ignore\n */\n\nfunction formatMessage(model, kind, value, path, messageFormat, valueType, reason) {\n  if (typeof messageFormat === 'string') {\n    const stringValue = getStringValue(value);\n    let ret = messageFormat.replace('{KIND}', kind).replace('{VALUE}', stringValue).replace('{PATH}', path);\n    if (model != null) {\n      ret = ret.replace('{MODEL}', model.modelName);\n    }\n    return ret;\n  } else if (typeof messageFormat === 'function') {\n    return messageFormat(value, path, model, kind);\n  } else {\n    const stringValue = getStringValue(value);\n    const valueTypeMsg = valueType ? ' (type ' + valueType + ')' : '';\n    let ret = 'Cast to ' + kind + ' failed for value ' + stringValue + valueTypeMsg + ' at path \"' + path + '\"';\n    if (model != null) {\n      ret += ' for model \"' + model.modelName + '\"';\n    }\n    if (reason != null && typeof reason.constructor === 'function' && reason.constructor.name !== 'AssertionError' && reason.constructor.name !== 'Error') {\n      ret += ' because of \"' + reason.constructor.name + '\"';\n    }\n    return ret;\n  }\n}\n\n/*!\n * exports\n */\n\nmodule.exports = CastError;","map":{"version":3,"names":["MongooseError","require","util","CastError","constructor","type","value","path","reason","schemaType","arguments","length","valueType","getValueType","messageFormat","getMessageFormat","msg","formatMessage","init","toJSON","stringValue","kind","name","message","getStringValue","copy","other","setModel","model","Object","defineProperty","prototype","inspect","replace","startsWith","t","_castErrorMessage","ret","modelName","valueTypeMsg","module","exports"],"sources":["C:/Users/lrmir/OneDrive/Desktop/cs35L/newFridayz/Fridayz/frontend/node_modules/mongoose/lib/error/cast.js"],"sourcesContent":["'use strict';\n\n/*!\n * Module dependencies.\n */\n\nconst MongooseError = require('./mongooseError');\nconst util = require('util');\n\n/**\n * Casting Error constructor.\n *\n * @param {String} type\n * @param {String} value\n * @inherits MongooseError\n * @api private\n */\n\nclass CastError extends MongooseError {\n  constructor(type, value, path, reason, schemaType) {\n    // If no args, assume we'll `init()` later.\n    if (arguments.length > 0) {\n      const valueType = getValueType(value);\n      const messageFormat = getMessageFormat(schemaType);\n      const msg = formatMessage(null, type, value, path, messageFormat, valueType, reason);\n      super(msg);\n      this.init(type, value, path, reason, schemaType);\n    } else {\n      super(formatMessage());\n    }\n  }\n\n  toJSON() {\n    return {\n      stringValue: this.stringValue,\n      valueType: this.valueType,\n      kind: this.kind,\n      value: this.value,\n      path: this.path,\n      reason: this.reason,\n      name: this.name,\n      message: this.message\n    };\n  }\n  /*!\n   * ignore\n   */\n  init(type, value, path, reason, schemaType) {\n    this.stringValue = getStringValue(value);\n    this.messageFormat = getMessageFormat(schemaType);\n    this.kind = type;\n    this.value = value;\n    this.path = path;\n    this.reason = reason;\n    this.valueType = getValueType(value);\n  }\n\n  /**\n   * ignore\n   * @param {Readonly<CastError>} other\n   * @api private\n   */\n  copy(other) {\n    this.messageFormat = other.messageFormat;\n    this.stringValue = other.stringValue;\n    this.kind = other.kind;\n    this.value = other.value;\n    this.path = other.path;\n    this.reason = other.reason;\n    this.message = other.message;\n    this.valueType = other.valueType;\n  }\n\n  /*!\n   * ignore\n   */\n  setModel(model) {\n    this.model = model;\n    this.message = formatMessage(model, this.kind, this.value, this.path,\n      this.messageFormat, this.valueType);\n  }\n}\n\nObject.defineProperty(CastError.prototype, 'name', {\n  value: 'CastError'\n});\n\nfunction getStringValue(value) {\n  let stringValue = util.inspect(value);\n  stringValue = stringValue.replace(/^'|'$/g, '\"');\n  if (!stringValue.startsWith('\"')) {\n    stringValue = '\"' + stringValue + '\"';\n  }\n  return stringValue;\n}\n\nfunction getValueType(value) {\n  if (value == null) {\n    return '' + value;\n  }\n\n  const t = typeof value;\n  if (t !== 'object') {\n    return t;\n  }\n  if (typeof value.constructor !== 'function') {\n    return t;\n  }\n  return value.constructor.name;\n}\n\nfunction getMessageFormat(schemaType) {\n  const messageFormat = schemaType && schemaType._castErrorMessage || null;\n  if (typeof messageFormat === 'string' || typeof messageFormat === 'function') {\n    return messageFormat;\n  }\n}\n\n/*!\n * ignore\n */\n\nfunction formatMessage(model, kind, value, path, messageFormat, valueType, reason) {\n  if (typeof messageFormat === 'string') {\n    const stringValue = getStringValue(value);\n    let ret = messageFormat.\n      replace('{KIND}', kind).\n      replace('{VALUE}', stringValue).\n      replace('{PATH}', path);\n    if (model != null) {\n      ret = ret.replace('{MODEL}', model.modelName);\n    }\n\n    return ret;\n  } else if (typeof messageFormat === 'function') {\n    return messageFormat(value, path, model, kind);\n  } else {\n    const stringValue = getStringValue(value);\n    const valueTypeMsg = valueType ? ' (type ' + valueType + ')' : '';\n    let ret = 'Cast to ' + kind + ' failed for value ' +\n      stringValue + valueTypeMsg + ' at path \"' + path + '\"';\n    if (model != null) {\n      ret += ' for model \"' + model.modelName + '\"';\n    }\n    if (reason != null &&\n        typeof reason.constructor === 'function' &&\n        reason.constructor.name !== 'AssertionError' &&\n        reason.constructor.name !== 'Error') {\n      ret += ' because of \"' + reason.constructor.name + '\"';\n    }\n    return ret;\n  }\n}\n\n/*!\n * exports\n */\n\nmodule.exports = CastError;\n"],"mappings":"AAAA,YAAY;;AAEZ;AACA;AACA;AAEA,MAAMA,aAAa,GAAGC,OAAO,CAAC,iBAAiB,CAAC;AAChD,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAM,CAAC;;AAE5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAME,SAAS,SAASH,aAAa,CAAC;EACpCI,WAAWA,CAACC,IAAI,EAAEC,KAAK,EAAEC,IAAI,EAAEC,MAAM,EAAEC,UAAU,EAAE;IACjD;IACA,IAAIC,SAAS,CAACC,MAAM,GAAG,CAAC,EAAE;MACxB,MAAMC,SAAS,GAAGC,YAAY,CAACP,KAAK,CAAC;MACrC,MAAMQ,aAAa,GAAGC,gBAAgB,CAACN,UAAU,CAAC;MAClD,MAAMO,GAAG,GAAGC,aAAa,CAAC,IAAI,EAAEZ,IAAI,EAAEC,KAAK,EAAEC,IAAI,EAAEO,aAAa,EAAEF,SAAS,EAAEJ,MAAM,CAAC;MACpF,KAAK,CAACQ,GAAG,CAAC;MACV,IAAI,CAACE,IAAI,CAACb,IAAI,EAAEC,KAAK,EAAEC,IAAI,EAAEC,MAAM,EAAEC,UAAU,CAAC;IAClD,CAAC,MAAM;MACL,KAAK,CAACQ,aAAa,CAAC,CAAC,CAAC;IACxB;EACF;EAEAE,MAAMA,CAAA,EAAG;IACP,OAAO;MACLC,WAAW,EAAE,IAAI,CAACA,WAAW;MAC7BR,SAAS,EAAE,IAAI,CAACA,SAAS;MACzBS,IAAI,EAAE,IAAI,CAACA,IAAI;MACff,KAAK,EAAE,IAAI,CAACA,KAAK;MACjBC,IAAI,EAAE,IAAI,CAACA,IAAI;MACfC,MAAM,EAAE,IAAI,CAACA,MAAM;MACnBc,IAAI,EAAE,IAAI,CAACA,IAAI;MACfC,OAAO,EAAE,IAAI,CAACA;IAChB,CAAC;EACH;EACA;AACF;AACA;EACEL,IAAIA,CAACb,IAAI,EAAEC,KAAK,EAAEC,IAAI,EAAEC,MAAM,EAAEC,UAAU,EAAE;IAC1C,IAAI,CAACW,WAAW,GAAGI,cAAc,CAAClB,KAAK,CAAC;IACxC,IAAI,CAACQ,aAAa,GAAGC,gBAAgB,CAACN,UAAU,CAAC;IACjD,IAAI,CAACY,IAAI,GAAGhB,IAAI;IAChB,IAAI,CAACC,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACC,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACI,SAAS,GAAGC,YAAY,CAACP,KAAK,CAAC;EACtC;;EAEA;AACF;AACA;AACA;AACA;EACEmB,IAAIA,CAACC,KAAK,EAAE;IACV,IAAI,CAACZ,aAAa,GAAGY,KAAK,CAACZ,aAAa;IACxC,IAAI,CAACM,WAAW,GAAGM,KAAK,CAACN,WAAW;IACpC,IAAI,CAACC,IAAI,GAAGK,KAAK,CAACL,IAAI;IACtB,IAAI,CAACf,KAAK,GAAGoB,KAAK,CAACpB,KAAK;IACxB,IAAI,CAACC,IAAI,GAAGmB,KAAK,CAACnB,IAAI;IACtB,IAAI,CAACC,MAAM,GAAGkB,KAAK,CAAClB,MAAM;IAC1B,IAAI,CAACe,OAAO,GAAGG,KAAK,CAACH,OAAO;IAC5B,IAAI,CAACX,SAAS,GAAGc,KAAK,CAACd,SAAS;EAClC;;EAEA;AACF;AACA;EACEe,QAAQA,CAACC,KAAK,EAAE;IACd,IAAI,CAACA,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACL,OAAO,GAAGN,aAAa,CAACW,KAAK,EAAE,IAAI,CAACP,IAAI,EAAE,IAAI,CAACf,KAAK,EAAE,IAAI,CAACC,IAAI,EAClE,IAAI,CAACO,aAAa,EAAE,IAAI,CAACF,SAAS,CAAC;EACvC;AACF;AAEAiB,MAAM,CAACC,cAAc,CAAC3B,SAAS,CAAC4B,SAAS,EAAE,MAAM,EAAE;EACjDzB,KAAK,EAAE;AACT,CAAC,CAAC;AAEF,SAASkB,cAAcA,CAAClB,KAAK,EAAE;EAC7B,IAAIc,WAAW,GAAGlB,IAAI,CAAC8B,OAAO,CAAC1B,KAAK,CAAC;EACrCc,WAAW,GAAGA,WAAW,CAACa,OAAO,CAAC,QAAQ,EAAE,GAAG,CAAC;EAChD,IAAI,CAACb,WAAW,CAACc,UAAU,CAAC,GAAG,CAAC,EAAE;IAChCd,WAAW,GAAG,GAAG,GAAGA,WAAW,GAAG,GAAG;EACvC;EACA,OAAOA,WAAW;AACpB;AAEA,SAASP,YAAYA,CAACP,KAAK,EAAE;EAC3B,IAAIA,KAAK,IAAI,IAAI,EAAE;IACjB,OAAO,EAAE,GAAGA,KAAK;EACnB;EAEA,MAAM6B,CAAC,GAAG,OAAO7B,KAAK;EACtB,IAAI6B,CAAC,KAAK,QAAQ,EAAE;IAClB,OAAOA,CAAC;EACV;EACA,IAAI,OAAO7B,KAAK,CAACF,WAAW,KAAK,UAAU,EAAE;IAC3C,OAAO+B,CAAC;EACV;EACA,OAAO7B,KAAK,CAACF,WAAW,CAACkB,IAAI;AAC/B;AAEA,SAASP,gBAAgBA,CAACN,UAAU,EAAE;EACpC,MAAMK,aAAa,GAAGL,UAAU,IAAIA,UAAU,CAAC2B,iBAAiB,IAAI,IAAI;EACxE,IAAI,OAAOtB,aAAa,KAAK,QAAQ,IAAI,OAAOA,aAAa,KAAK,UAAU,EAAE;IAC5E,OAAOA,aAAa;EACtB;AACF;;AAEA;AACA;AACA;;AAEA,SAASG,aAAaA,CAACW,KAAK,EAAEP,IAAI,EAAEf,KAAK,EAAEC,IAAI,EAAEO,aAAa,EAAEF,SAAS,EAAEJ,MAAM,EAAE;EACjF,IAAI,OAAOM,aAAa,KAAK,QAAQ,EAAE;IACrC,MAAMM,WAAW,GAAGI,cAAc,CAAClB,KAAK,CAAC;IACzC,IAAI+B,GAAG,GAAGvB,aAAa,CACrBmB,OAAO,CAAC,QAAQ,EAAEZ,IAAI,CAAC,CACvBY,OAAO,CAAC,SAAS,EAAEb,WAAW,CAAC,CAC/Ba,OAAO,CAAC,QAAQ,EAAE1B,IAAI,CAAC;IACzB,IAAIqB,KAAK,IAAI,IAAI,EAAE;MACjBS,GAAG,GAAGA,GAAG,CAACJ,OAAO,CAAC,SAAS,EAAEL,KAAK,CAACU,SAAS,CAAC;IAC/C;IAEA,OAAOD,GAAG;EACZ,CAAC,MAAM,IAAI,OAAOvB,aAAa,KAAK,UAAU,EAAE;IAC9C,OAAOA,aAAa,CAACR,KAAK,EAAEC,IAAI,EAAEqB,KAAK,EAAEP,IAAI,CAAC;EAChD,CAAC,MAAM;IACL,MAAMD,WAAW,GAAGI,cAAc,CAAClB,KAAK,CAAC;IACzC,MAAMiC,YAAY,GAAG3B,SAAS,GAAG,SAAS,GAAGA,SAAS,GAAG,GAAG,GAAG,EAAE;IACjE,IAAIyB,GAAG,GAAG,UAAU,GAAGhB,IAAI,GAAG,oBAAoB,GAChDD,WAAW,GAAGmB,YAAY,GAAG,YAAY,GAAGhC,IAAI,GAAG,GAAG;IACxD,IAAIqB,KAAK,IAAI,IAAI,EAAE;MACjBS,GAAG,IAAI,cAAc,GAAGT,KAAK,CAACU,SAAS,GAAG,GAAG;IAC/C;IACA,IAAI9B,MAAM,IAAI,IAAI,IACd,OAAOA,MAAM,CAACJ,WAAW,KAAK,UAAU,IACxCI,MAAM,CAACJ,WAAW,CAACkB,IAAI,KAAK,gBAAgB,IAC5Cd,MAAM,CAACJ,WAAW,CAACkB,IAAI,KAAK,OAAO,EAAE;MACvCe,GAAG,IAAI,eAAe,GAAG7B,MAAM,CAACJ,WAAW,CAACkB,IAAI,GAAG,GAAG;IACxD;IACA,OAAOe,GAAG;EACZ;AACF;;AAEA;AACA;AACA;;AAEAG,MAAM,CAACC,OAAO,GAAGtC,SAAS","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}