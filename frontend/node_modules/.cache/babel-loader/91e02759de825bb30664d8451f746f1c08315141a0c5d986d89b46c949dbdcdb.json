{"ast":null,"code":"/*!\n * Module dependencies.\n */\n\n'use strict';\n\nconst SchemaType = require('../schemaType');\nconst symbols = require('./symbols');\nconst isObject = require('../helpers/isObject');\nconst utils = require('../utils');\n\n/**\n * Mixed SchemaType constructor.\n *\n * @param {String} path\n * @param {Object} options\n * @inherits SchemaType\n * @api public\n */\n\nfunction SchemaMixed(path, options) {\n  if (options && options.default) {\n    const def = options.default;\n    if (Array.isArray(def) && def.length === 0) {\n      // make sure empty array defaults are handled\n      options.default = Array;\n    } else if (!options.shared && isObject(def) && Object.keys(def).length === 0) {\n      // prevent odd \"shared\" objects between documents\n      options.default = function () {\n        return {};\n      };\n    }\n  }\n  SchemaType.call(this, path, options, 'Mixed');\n  this[symbols.schemaMixedSymbol] = true;\n}\n\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api public\n */\nSchemaMixed.schemaName = 'Mixed';\nSchemaMixed.defaultOptions = {};\n\n/*!\n * Inherits from SchemaType.\n */\nSchemaMixed.prototype = Object.create(SchemaType.prototype);\nSchemaMixed.prototype.constructor = SchemaMixed;\n\n/**\n * Attaches a getter for all Mixed paths.\n *\n * #### Example:\n *\n *     // Hide the 'hidden' path\n *     mongoose.Schema.Mixed.get(v => Object.assign({}, v, { hidden: null }));\n *\n *     const Model = mongoose.model('Test', new Schema({ test: {} }));\n *     new Model({ test: { hidden: 'Secret!' } }).test.hidden; // null\n *\n * @param {Function} getter\n * @return {this}\n * @function get\n * @static\n * @api public\n */\n\nSchemaMixed.get = SchemaType.get;\n\n/**\n * Sets a default option for all Mixed instances.\n *\n * #### Example:\n *\n *     // Make all mixed instances have `required` of true by default.\n *     mongoose.Schema.Mixed.set('required', true);\n *\n *     const User = mongoose.model('User', new Schema({ test: mongoose.Mixed }));\n *     new User({ }).validateSync().errors.test.message; // Path `test` is required.\n *\n * @param {String} option The option you'd like to set the value for\n * @param {Any} value value for option\n * @return {undefined}\n * @function set\n * @static\n * @api public\n */\n\nSchemaMixed.set = SchemaType.set;\nSchemaMixed.setters = [];\n\n/**\n * Casts `val` for Mixed.\n *\n * _this is a no-op_\n *\n * @param {Object} value to cast\n * @api private\n */\n\nSchemaMixed.prototype.cast = function (val) {\n  if (val instanceof Error) {\n    return utils.errorToPOJO(val);\n  }\n  return val;\n};\n\n/**\n * Casts contents for queries.\n *\n * @param {String} $cond\n * @param {any} [val]\n * @api private\n */\n\nSchemaMixed.prototype.castForQuery = function ($cond, val) {\n  return val;\n};\n\n/*!\n * Module exports.\n */\n\nmodule.exports = SchemaMixed;","map":{"version":3,"names":["SchemaType","require","symbols","isObject","utils","SchemaMixed","path","options","default","def","Array","isArray","length","shared","Object","keys","call","schemaMixedSymbol","schemaName","defaultOptions","prototype","create","constructor","get","set","setters","cast","val","Error","errorToPOJO","castForQuery","$cond","module","exports"],"sources":["C:/Users/lrmir/OneDrive/Desktop/cs35L/newFridayz/Fridayz/frontend/node_modules/mongoose/lib/schema/mixed.js"],"sourcesContent":["/*!\n * Module dependencies.\n */\n\n'use strict';\n\nconst SchemaType = require('../schemaType');\nconst symbols = require('./symbols');\nconst isObject = require('../helpers/isObject');\nconst utils = require('../utils');\n\n/**\n * Mixed SchemaType constructor.\n *\n * @param {String} path\n * @param {Object} options\n * @inherits SchemaType\n * @api public\n */\n\nfunction SchemaMixed(path, options) {\n  if (options && options.default) {\n    const def = options.default;\n    if (Array.isArray(def) && def.length === 0) {\n      // make sure empty array defaults are handled\n      options.default = Array;\n    } else if (!options.shared && isObject(def) && Object.keys(def).length === 0) {\n      // prevent odd \"shared\" objects between documents\n      options.default = function() {\n        return {};\n      };\n    }\n  }\n\n  SchemaType.call(this, path, options, 'Mixed');\n\n  this[symbols.schemaMixedSymbol] = true;\n}\n\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api public\n */\nSchemaMixed.schemaName = 'Mixed';\n\nSchemaMixed.defaultOptions = {};\n\n/*!\n * Inherits from SchemaType.\n */\nSchemaMixed.prototype = Object.create(SchemaType.prototype);\nSchemaMixed.prototype.constructor = SchemaMixed;\n\n/**\n * Attaches a getter for all Mixed paths.\n *\n * #### Example:\n *\n *     // Hide the 'hidden' path\n *     mongoose.Schema.Mixed.get(v => Object.assign({}, v, { hidden: null }));\n *\n *     const Model = mongoose.model('Test', new Schema({ test: {} }));\n *     new Model({ test: { hidden: 'Secret!' } }).test.hidden; // null\n *\n * @param {Function} getter\n * @return {this}\n * @function get\n * @static\n * @api public\n */\n\nSchemaMixed.get = SchemaType.get;\n\n/**\n * Sets a default option for all Mixed instances.\n *\n * #### Example:\n *\n *     // Make all mixed instances have `required` of true by default.\n *     mongoose.Schema.Mixed.set('required', true);\n *\n *     const User = mongoose.model('User', new Schema({ test: mongoose.Mixed }));\n *     new User({ }).validateSync().errors.test.message; // Path `test` is required.\n *\n * @param {String} option The option you'd like to set the value for\n * @param {Any} value value for option\n * @return {undefined}\n * @function set\n * @static\n * @api public\n */\n\nSchemaMixed.set = SchemaType.set;\n\nSchemaMixed.setters = [];\n\n/**\n * Casts `val` for Mixed.\n *\n * _this is a no-op_\n *\n * @param {Object} value to cast\n * @api private\n */\n\nSchemaMixed.prototype.cast = function(val) {\n  if (val instanceof Error) {\n    return utils.errorToPOJO(val);\n  }\n  return val;\n};\n\n/**\n * Casts contents for queries.\n *\n * @param {String} $cond\n * @param {any} [val]\n * @api private\n */\n\nSchemaMixed.prototype.castForQuery = function($cond, val) {\n  return val;\n};\n\n/*!\n * Module exports.\n */\n\nmodule.exports = SchemaMixed;\n"],"mappings":"AAAA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAMA,UAAU,GAAGC,OAAO,CAAC,eAAe,CAAC;AAC3C,MAAMC,OAAO,GAAGD,OAAO,CAAC,WAAW,CAAC;AACpC,MAAME,QAAQ,GAAGF,OAAO,CAAC,qBAAqB,CAAC;AAC/C,MAAMG,KAAK,GAAGH,OAAO,CAAC,UAAU,CAAC;;AAEjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASI,WAAWA,CAACC,IAAI,EAAEC,OAAO,EAAE;EAClC,IAAIA,OAAO,IAAIA,OAAO,CAACC,OAAO,EAAE;IAC9B,MAAMC,GAAG,GAAGF,OAAO,CAACC,OAAO;IAC3B,IAAIE,KAAK,CAACC,OAAO,CAACF,GAAG,CAAC,IAAIA,GAAG,CAACG,MAAM,KAAK,CAAC,EAAE;MAC1C;MACAL,OAAO,CAACC,OAAO,GAAGE,KAAK;IACzB,CAAC,MAAM,IAAI,CAACH,OAAO,CAACM,MAAM,IAAIV,QAAQ,CAACM,GAAG,CAAC,IAAIK,MAAM,CAACC,IAAI,CAACN,GAAG,CAAC,CAACG,MAAM,KAAK,CAAC,EAAE;MAC5E;MACAL,OAAO,CAACC,OAAO,GAAG,YAAW;QAC3B,OAAO,CAAC,CAAC;MACX,CAAC;IACH;EACF;EAEAR,UAAU,CAACgB,IAAI,CAAC,IAAI,EAAEV,IAAI,EAAEC,OAAO,EAAE,OAAO,CAAC;EAE7C,IAAI,CAACL,OAAO,CAACe,iBAAiB,CAAC,GAAG,IAAI;AACxC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACAZ,WAAW,CAACa,UAAU,GAAG,OAAO;AAEhCb,WAAW,CAACc,cAAc,GAAG,CAAC,CAAC;;AAE/B;AACA;AACA;AACAd,WAAW,CAACe,SAAS,GAAGN,MAAM,CAACO,MAAM,CAACrB,UAAU,CAACoB,SAAS,CAAC;AAC3Df,WAAW,CAACe,SAAS,CAACE,WAAW,GAAGjB,WAAW;;AAE/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAA,WAAW,CAACkB,GAAG,GAAGvB,UAAU,CAACuB,GAAG;;AAEhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAlB,WAAW,CAACmB,GAAG,GAAGxB,UAAU,CAACwB,GAAG;AAEhCnB,WAAW,CAACoB,OAAO,GAAG,EAAE;;AAExB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEApB,WAAW,CAACe,SAAS,CAACM,IAAI,GAAG,UAASC,GAAG,EAAE;EACzC,IAAIA,GAAG,YAAYC,KAAK,EAAE;IACxB,OAAOxB,KAAK,CAACyB,WAAW,CAACF,GAAG,CAAC;EAC/B;EACA,OAAOA,GAAG;AACZ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAtB,WAAW,CAACe,SAAS,CAACU,YAAY,GAAG,UAASC,KAAK,EAAEJ,GAAG,EAAE;EACxD,OAAOA,GAAG;AACZ,CAAC;;AAED;AACA;AACA;;AAEAK,MAAM,CAACC,OAAO,GAAG5B,WAAW","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}