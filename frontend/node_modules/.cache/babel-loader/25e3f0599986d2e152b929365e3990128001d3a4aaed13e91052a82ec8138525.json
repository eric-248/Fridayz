{"ast":null,"code":"'use strict';\n\nconst getConstructorName = require('../getConstructorName');\nconst nonSSLMessage = 'Client network socket disconnected before secure TLS ' + 'connection was established';\nmodule.exports = function isSSLError(topologyDescription) {\n  if (getConstructorName(topologyDescription) !== 'TopologyDescription') {\n    return false;\n  }\n  const descriptions = Array.from(topologyDescription.servers.values());\n  return descriptions.length > 0 && descriptions.every(descr => descr.error && descr.error.message.indexOf(nonSSLMessage) !== -1);\n};","map":{"version":3,"names":["getConstructorName","require","nonSSLMessage","module","exports","isSSLError","topologyDescription","descriptions","Array","from","servers","values","length","every","descr","error","message","indexOf"],"sources":["C:/Users/lrmir/OneDrive/Desktop/cs35L/newFridayz/Fridayz/frontend/node_modules/mongoose/lib/helpers/topology/isSSLError.js"],"sourcesContent":["'use strict';\n\nconst getConstructorName = require('../getConstructorName');\n\nconst nonSSLMessage = 'Client network socket disconnected before secure TLS ' +\n  'connection was established';\n\nmodule.exports = function isSSLError(topologyDescription) {\n  if (getConstructorName(topologyDescription) !== 'TopologyDescription') {\n    return false;\n  }\n\n  const descriptions = Array.from(topologyDescription.servers.values());\n  return descriptions.length > 0 &&\n    descriptions.every(descr => descr.error && descr.error.message.indexOf(nonSSLMessage) !== -1);\n};\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,kBAAkB,GAAGC,OAAO,CAAC,uBAAuB,CAAC;AAE3D,MAAMC,aAAa,GAAG,uDAAuD,GAC3E,4BAA4B;AAE9BC,MAAM,CAACC,OAAO,GAAG,SAASC,UAAUA,CAACC,mBAAmB,EAAE;EACxD,IAAIN,kBAAkB,CAACM,mBAAmB,CAAC,KAAK,qBAAqB,EAAE;IACrE,OAAO,KAAK;EACd;EAEA,MAAMC,YAAY,GAAGC,KAAK,CAACC,IAAI,CAACH,mBAAmB,CAACI,OAAO,CAACC,MAAM,CAAC,CAAC,CAAC;EACrE,OAAOJ,YAAY,CAACK,MAAM,GAAG,CAAC,IAC5BL,YAAY,CAACM,KAAK,CAACC,KAAK,IAAIA,KAAK,CAACC,KAAK,IAAID,KAAK,CAACC,KAAK,CAACC,OAAO,CAACC,OAAO,CAACf,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC;AACjG,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}