{"ast":null,"code":"'use strict';\n\n/*!\n * Module dependencies.\n */\nconst EventEmitter = require('events').EventEmitter;\nconst Kareem = require('kareem');\nconst MongooseError = require('./error/mongooseError');\nconst SchemaType = require('./schemaType');\nconst SchemaTypeOptions = require('./options/schemaTypeOptions');\nconst VirtualOptions = require('./options/virtualOptions');\nconst VirtualType = require('./virtualType');\nconst addAutoId = require('./helpers/schema/addAutoId');\nconst clone = require('./helpers/clone');\nconst get = require('./helpers/get');\nconst getConstructorName = require('./helpers/getConstructorName');\nconst getIndexes = require('./helpers/schema/getIndexes');\nconst handleReadPreferenceAliases = require('./helpers/query/handleReadPreferenceAliases');\nconst idGetter = require('./helpers/schema/idGetter');\nconst merge = require('./helpers/schema/merge');\nconst mpath = require('mpath');\nconst setPopulatedVirtualValue = require('./helpers/populate/setPopulatedVirtualValue');\nconst setupTimestamps = require('./helpers/timestamps/setupTimestamps');\nconst utils = require('./utils');\nconst validateRef = require('./helpers/populate/validateRef');\nconst util = require('util');\nconst hasNumericSubpathRegex = /\\.\\d+(\\.|$)/;\nlet MongooseTypes;\nconst queryHooks = require('./constants').queryMiddlewareFunctions;\nconst documentHooks = require('./helpers/model/applyHooks').middlewareFunctions;\nconst hookNames = queryHooks.concat(documentHooks).reduce((s, hook) => s.add(hook), new Set());\nconst isPOJO = utils.isPOJO;\nlet id = 0;\nconst numberRE = /^\\d+$/;\n\n/**\n * Schema constructor.\n *\n * #### Example:\n *\n *     const child = new Schema({ name: String });\n *     const schema = new Schema({ name: String, age: Number, children: [child] });\n *     const Tree = mongoose.model('Tree', schema);\n *\n *     // setting schema options\n *     new Schema({ name: String }, { id: false, autoIndex: false })\n *\n * #### Options:\n *\n * - [autoIndex](https://mongoosejs.com/docs/guide.html#autoIndex): bool - defaults to null (which means use the connection's autoIndex option)\n * - [autoCreate](https://mongoosejs.com/docs/guide.html#autoCreate): bool - defaults to null (which means use the connection's autoCreate option)\n * - [bufferCommands](https://mongoosejs.com/docs/guide.html#bufferCommands): bool - defaults to true\n * - [bufferTimeoutMS](https://mongoosejs.com/docs/guide.html#bufferTimeoutMS): number - defaults to 10000 (10 seconds). If `bufferCommands` is enabled, the amount of time Mongoose will wait for connectivity to be restablished before erroring out.\n * - [capped](https://mongoosejs.com/docs/guide.html#capped): bool | number | object - defaults to false\n * - [collection](https://mongoosejs.com/docs/guide.html#collection): string - no default\n * - [discriminatorKey](https://mongoosejs.com/docs/guide.html#discriminatorKey): string - defaults to `__t`\n * - [id](https://mongoosejs.com/docs/guide.html#id): bool - defaults to true\n * - [_id](https://mongoosejs.com/docs/guide.html#_id): bool - defaults to true\n * - [minimize](https://mongoosejs.com/docs/guide.html#minimize): bool - controls [document#toObject](https://mongoosejs.com/docs/api/document.html#Document.prototype.toObject()) behavior when called manually - defaults to true\n * - [read](https://mongoosejs.com/docs/guide.html#read): string\n * - [writeConcern](https://mongoosejs.com/docs/guide.html#writeConcern): object - defaults to null, use to override [the MongoDB server's default write concern settings](https://www.mongodb.com/docs/manual/reference/write-concern/)\n * - [shardKey](https://mongoosejs.com/docs/guide.html#shardKey): object - defaults to `null`\n * - [strict](https://mongoosejs.com/docs/guide.html#strict): bool - defaults to true\n * - [strictQuery](https://mongoosejs.com/docs/guide.html#strictQuery): bool - defaults to false\n * - [toJSON](https://mongoosejs.com/docs/guide.html#toJSON) - object - no default\n * - [toObject](https://mongoosejs.com/docs/guide.html#toObject) - object - no default\n * - [typeKey](https://mongoosejs.com/docs/guide.html#typeKey) - string - defaults to 'type'\n * - [validateBeforeSave](https://mongoosejs.com/docs/guide.html#validateBeforeSave) - bool - defaults to `true`\n * - [validateModifiedOnly](https://mongoosejs.com/docs/api/document.html#Document.prototype.validate()) - bool - defaults to `false`\n * - [versionKey](https://mongoosejs.com/docs/guide.html#versionKey): string or object - defaults to \"__v\"\n * - [optimisticConcurrency](https://mongoosejs.com/docs/guide.html#optimisticConcurrency): bool - defaults to false. Set to true to enable [optimistic concurrency](https://thecodebarbarian.com/whats-new-in-mongoose-5-10-optimistic-concurrency.html).\n * - [collation](https://mongoosejs.com/docs/guide.html#collation): object - defaults to null (which means use no collation)\n * - [timeseries](https://mongoosejs.com/docs/guide.html#timeseries): object - defaults to null (which means this schema's collection won't be a timeseries collection)\n * - [selectPopulatedPaths](https://mongoosejs.com/docs/guide.html#selectPopulatedPaths): boolean - defaults to `true`\n * - [skipVersioning](https://mongoosejs.com/docs/guide.html#skipVersioning): object - paths to exclude from versioning\n * - [timestamps](https://mongoosejs.com/docs/guide.html#timestamps): object or boolean - defaults to `false`. If true, Mongoose adds `createdAt` and `updatedAt` properties to your schema and manages those properties for you.\n * - [pluginTags](https://mongoosejs.com/docs/guide.html#pluginTags): array of strings - defaults to `undefined`. If set and plugin called with `tags` option, will only apply that plugin to schemas with a matching tag.\n * - [virtuals](https://mongoosejs.com/docs/tutorials/virtuals.html#virtuals-via-schema-options): object - virtuals to define, alias for [`.virtual`](https://mongoosejs.com/docs/api/schema.html#Schema.prototype.virtual())\n * - [collectionOptions]: object with options passed to [`createCollection()`](https://www.mongodb.com/docs/manual/reference/method/db.createCollection/) when calling `Model.createCollection()` or `autoCreate` set to true.\n *\n * #### Options for Nested Schemas:\n *\n * - `excludeIndexes`: bool - defaults to `false`. If `true`, skip building indexes on this schema's paths.\n *\n * #### Note:\n *\n * _When nesting schemas, (`children` in the example above), always declare the child schema first before passing it into its parent._\n *\n * @param {Object|Schema|Array} [definition] Can be one of: object describing schema paths, or schema to copy, or array of objects and schemas\n * @param {Object} [options]\n * @inherits NodeJS EventEmitter https://nodejs.org/api/events.html#class-eventemitter\n * @event `init`: Emitted after the schema is compiled into a `Model`.\n * @api public\n */\n\nfunction Schema(obj, options) {\n  if (!(this instanceof Schema)) {\n    return new Schema(obj, options);\n  }\n  this.obj = obj;\n  this.paths = {};\n  this.aliases = {};\n  this.subpaths = {};\n  this.virtuals = {};\n  this.singleNestedPaths = {};\n  this.nested = {};\n  this.inherits = {};\n  this.callQueue = [];\n  this._indexes = [];\n  this._searchIndexes = [];\n  this.methods = options && options.methods || {};\n  this.methodOptions = {};\n  this.statics = options && options.statics || {};\n  this.tree = {};\n  this.query = options && options.query || {};\n  this.childSchemas = [];\n  this.plugins = [];\n  // For internal debugging. Do not use this to try to save a schema in MDB.\n  this.$id = ++id;\n  this.mapPaths = [];\n  this.s = {\n    hooks: new Kareem()\n  };\n  this.options = this.defaultOptions(options);\n\n  // build paths\n  if (Array.isArray(obj)) {\n    for (const definition of obj) {\n      this.add(definition);\n    }\n  } else if (obj) {\n    this.add(obj);\n  }\n\n  // build virtual paths\n  if (options && options.virtuals) {\n    const virtuals = options.virtuals;\n    const pathNames = Object.keys(virtuals);\n    for (const pathName of pathNames) {\n      const pathOptions = virtuals[pathName].options ? virtuals[pathName].options : undefined;\n      const virtual = this.virtual(pathName, pathOptions);\n      if (virtuals[pathName].get) {\n        virtual.get(virtuals[pathName].get);\n      }\n      if (virtuals[pathName].set) {\n        virtual.set(virtuals[pathName].set);\n      }\n    }\n  }\n\n  // check if _id's value is a subdocument (gh-2276)\n  const _idSubDoc = obj && obj._id && utils.isObject(obj._id);\n\n  // ensure the documents get an auto _id unless disabled\n  const auto_id = !this.paths['_id'] && this.options._id && !_idSubDoc;\n  if (auto_id) {\n    addAutoId(this);\n  }\n  this.setupTimestamp(this.options.timestamps);\n}\n\n/**\n * Create virtual properties with alias field\n * @api private\n */\nfunction aliasFields(schema, paths) {\n  for (const path of Object.keys(paths)) {\n    let alias = null;\n    if (paths[path] != null) {\n      alias = paths[path];\n    } else {\n      const options = get(schema.paths[path], 'options');\n      if (options == null) {\n        continue;\n      }\n      alias = options.alias;\n    }\n    if (!alias) {\n      continue;\n    }\n    const prop = schema.paths[path].path;\n    if (Array.isArray(alias)) {\n      for (const a of alias) {\n        if (typeof a !== 'string') {\n          throw new Error('Invalid value for alias option on ' + prop + ', got ' + a);\n        }\n        schema.aliases[a] = prop;\n        schema.virtual(a).get(function (p) {\n          return function () {\n            if (typeof this.get === 'function') {\n              return this.get(p);\n            }\n            return this[p];\n          };\n        }(prop)).set(function (p) {\n          return function (v) {\n            return this.$set(p, v);\n          };\n        }(prop));\n      }\n      continue;\n    }\n    if (typeof alias !== 'string') {\n      throw new Error('Invalid value for alias option on ' + prop + ', got ' + alias);\n    }\n    schema.aliases[alias] = prop;\n    schema.virtual(alias).get(function (p) {\n      return function () {\n        if (typeof this.get === 'function') {\n          return this.get(p);\n        }\n        return this[p];\n      };\n    }(prop)).set(function (p) {\n      return function (v) {\n        return this.$set(p, v);\n      };\n    }(prop));\n  }\n}\n\n/*!\n * Inherit from EventEmitter.\n */\nSchema.prototype = Object.create(EventEmitter.prototype);\nSchema.prototype.constructor = Schema;\nSchema.prototype.instanceOfSchema = true;\n\n/*!\n * ignore\n */\n\nObject.defineProperty(Schema.prototype, '$schemaType', {\n  configurable: false,\n  enumerable: false,\n  writable: true\n});\n\n/**\n * Array of child schemas (from document arrays and single nested subdocs)\n * and their corresponding compiled models. Each element of the array is\n * an object with 2 properties: `schema` and `model`.\n *\n * This property is typically only useful for plugin authors and advanced users.\n * You do not need to interact with this property at all to use mongoose.\n *\n * @api public\n * @property childSchemas\n * @memberOf Schema\n * @instance\n */\n\nObject.defineProperty(Schema.prototype, 'childSchemas', {\n  configurable: false,\n  enumerable: true,\n  writable: true\n});\n\n/**\n * Object containing all virtuals defined on this schema.\n * The objects' keys are the virtual paths and values are instances of `VirtualType`.\n *\n * This property is typically only useful for plugin authors and advanced users.\n * You do not need to interact with this property at all to use mongoose.\n *\n * #### Example:\n *\n *     const schema = new Schema({});\n *     schema.virtual('answer').get(() => 42);\n *\n *     console.log(schema.virtuals); // { answer: VirtualType { path: 'answer', ... } }\n *     console.log(schema.virtuals['answer'].getters[0].call()); // 42\n *\n * @api public\n * @property virtuals\n * @memberOf Schema\n * @instance\n */\n\nObject.defineProperty(Schema.prototype, 'virtuals', {\n  configurable: false,\n  enumerable: true,\n  writable: true\n});\n\n/**\n * The original object passed to the schema constructor\n *\n * #### Example:\n *\n *     const schema = new Schema({ a: String }).add({ b: String });\n *     schema.obj; // { a: String }\n *\n * @api public\n * @property obj\n * @memberOf Schema\n * @instance\n */\n\nSchema.prototype.obj;\n\n/**\n * The paths defined on this schema. The keys are the top-level paths\n * in this schema, and the values are instances of the SchemaType class.\n *\n * #### Example:\n *\n *     const schema = new Schema({ name: String }, { _id: false });\n *     schema.paths; // { name: SchemaString { ... } }\n *\n *     schema.add({ age: Number });\n *     schema.paths; // { name: SchemaString { ... }, age: SchemaNumber { ... } }\n *\n * @api public\n * @property paths\n * @memberOf Schema\n * @instance\n */\n\nSchema.prototype.paths;\n\n/**\n * Schema as a tree\n *\n * #### Example:\n *\n *     {\n *         '_id'     : ObjectId\n *       , 'nested'  : {\n *             'key' : String\n *         }\n *     }\n *\n * @api private\n * @property tree\n * @memberOf Schema\n * @instance\n */\n\nSchema.prototype.tree;\n\n/**\n * Returns a deep copy of the schema\n *\n * #### Example:\n *\n *     const schema = new Schema({ name: String });\n *     const clone = schema.clone();\n *     clone === schema; // false\n *     clone.path('name'); // SchemaString { ... }\n *\n * @return {Schema} the cloned schema\n * @api public\n * @memberOf Schema\n * @instance\n */\n\nSchema.prototype.clone = function () {\n  const s = this._clone();\n\n  // Bubble up `init` for backwards compat\n  s.on('init', v => this.emit('init', v));\n  return s;\n};\n\n/*!\n * ignore\n */\n\nSchema.prototype._clone = function _clone(Constructor) {\n  Constructor = Constructor || (this.base == null ? Schema : this.base.Schema);\n  const s = new Constructor({}, this._userProvidedOptions);\n  s.base = this.base;\n  s.obj = this.obj;\n  s.options = clone(this.options);\n  s.callQueue = this.callQueue.map(function (f) {\n    return f;\n  });\n  s.methods = clone(this.methods);\n  s.methodOptions = clone(this.methodOptions);\n  s.statics = clone(this.statics);\n  s.query = clone(this.query);\n  s.plugins = Array.prototype.slice.call(this.plugins);\n  s._indexes = clone(this._indexes);\n  s._searchIndexes = clone(this._searchIndexes);\n  s.s.hooks = this.s.hooks.clone();\n  s.tree = clone(this.tree);\n  s.paths = Object.fromEntries(Object.entries(this.paths).map(([key, value]) => [key, value.clone()]));\n  s.nested = clone(this.nested);\n  s.subpaths = clone(this.subpaths);\n  for (const schemaType of Object.values(s.paths)) {\n    if (schemaType.$isSingleNested) {\n      const path = schemaType.path;\n      for (const key of Object.keys(schemaType.schema.paths)) {\n        s.singleNestedPaths[path + '.' + key] = schemaType.schema.paths[key];\n      }\n      for (const key of Object.keys(schemaType.schema.singleNestedPaths)) {\n        s.singleNestedPaths[path + '.' + key] = schemaType.schema.singleNestedPaths[key];\n      }\n      for (const key of Object.keys(schemaType.schema.subpaths)) {\n        s.singleNestedPaths[path + '.' + key] = schemaType.schema.subpaths[key];\n      }\n      for (const key of Object.keys(schemaType.schema.nested)) {\n        s.singleNestedPaths[path + '.' + key] = 'nested';\n      }\n    }\n  }\n  s.childSchemas = gatherChildSchemas(s);\n  s.virtuals = clone(this.virtuals);\n  s.$globalPluginsApplied = this.$globalPluginsApplied;\n  s.$isRootDiscriminator = this.$isRootDiscriminator;\n  s.$implicitlyCreated = this.$implicitlyCreated;\n  s.$id = ++id;\n  s.$originalSchemaId = this.$id;\n  s.mapPaths = [].concat(this.mapPaths);\n  if (this.discriminatorMapping != null) {\n    s.discriminatorMapping = Object.assign({}, this.discriminatorMapping);\n  }\n  if (this.discriminators != null) {\n    s.discriminators = Object.assign({}, this.discriminators);\n  }\n  if (this._applyDiscriminators != null) {\n    s._applyDiscriminators = new Map(this._applyDiscriminators);\n  }\n  s.aliases = Object.assign({}, this.aliases);\n  return s;\n};\n\n/**\n * Returns a new schema that has the picked `paths` from this schema.\n *\n * This method is analagous to [Lodash's `pick()` function](https://lodash.com/docs/4.17.15#pick) for Mongoose schemas.\n *\n * #### Example:\n *\n *     const schema = Schema({ name: String, age: Number });\n *     // Creates a new schema with the same `name` path as `schema`,\n *     // but no `age` path.\n *     const newSchema = schema.pick(['name']);\n *\n *     newSchema.path('name'); // SchemaString { ... }\n *     newSchema.path('age'); // undefined\n *\n * @param {String[]} paths List of Paths to pick for the new Schema\n * @param {Object} [options] Options to pass to the new Schema Constructor (same as `new Schema(.., Options)`). Defaults to `this.options` if not set.\n * @return {Schema}\n * @api public\n */\n\nSchema.prototype.pick = function (paths, options) {\n  const newSchema = new Schema({}, options || this.options);\n  if (!Array.isArray(paths)) {\n    throw new MongooseError('Schema#pick() only accepts an array argument, ' + 'got \"' + typeof paths + '\"');\n  }\n  for (const path of paths) {\n    if (this.nested[path]) {\n      newSchema.add({\n        [path]: get(this.tree, path)\n      });\n    } else {\n      const schematype = this.path(path);\n      if (schematype == null) {\n        throw new MongooseError('Path `' + path + '` is not in the schema');\n      }\n      newSchema.add({\n        [path]: schematype\n      });\n    }\n  }\n  return newSchema;\n};\n\n/**\n * Returns a new schema that has the `paths` from the original schema, minus the omitted ones.\n *\n * This method is analagous to [Lodash's `omit()` function](https://lodash.com/docs/#omit) for Mongoose schemas.\n *\n * #### Example:\n *\n *     const schema = Schema({ name: String, age: Number });\n *     // Creates a new schema omitting the `age` path\n *     const newSchema = schema.omit(['age']);\n *\n *     newSchema.path('name'); // SchemaString { ... }\n *     newSchema.path('age'); // undefined\n *\n * @param {String[]} paths List of Paths to omit for the new Schema\n * @param {Object} [options] Options to pass to the new Schema Constructor (same as `new Schema(.., Options)`). Defaults to `this.options` if not set.\n * @return {Schema}\n * @api public\n */\n\nSchema.prototype.omit = function (paths, options) {\n  const newSchema = new Schema(this, options || this.options);\n  if (!Array.isArray(paths)) {\n    throw new MongooseError('Schema#omit() only accepts an array argument, ' + 'got \"' + typeof paths + '\"');\n  }\n  newSchema.remove(paths);\n  for (const nested in newSchema.singleNestedPaths) {\n    if (paths.includes(nested)) {\n      delete newSchema.singleNestedPaths[nested];\n    }\n  }\n  return newSchema;\n};\n\n/**\n * Returns default options for this schema, merged with `options`.\n *\n * @param {Object} [options] Options to overwrite the default options\n * @return {Object} The merged options of `options` and the default options\n * @api private\n */\n\nSchema.prototype.defaultOptions = function (options) {\n  this._userProvidedOptions = options == null ? {} : clone(options);\n  const baseOptions = this.base && this.base.options || {};\n  const strict = 'strict' in baseOptions ? baseOptions.strict : true;\n  const strictQuery = 'strictQuery' in baseOptions ? baseOptions.strictQuery : false;\n  const id = 'id' in baseOptions ? baseOptions.id : true;\n  options = {\n    strict,\n    strictQuery,\n    bufferCommands: true,\n    capped: false,\n    // { size, max, autoIndexId }\n    versionKey: '__v',\n    optimisticConcurrency: false,\n    minimize: true,\n    autoIndex: null,\n    discriminatorKey: '__t',\n    shardKey: null,\n    read: null,\n    validateBeforeSave: true,\n    validateModifiedOnly: false,\n    // the following are only applied at construction time\n    _id: true,\n    id: id,\n    typeKey: 'type',\n    ...options\n  };\n  if (options.versionKey && typeof options.versionKey !== 'string') {\n    throw new MongooseError('`versionKey` must be falsy or string, got `' + typeof options.versionKey + '`');\n  }\n  if (typeof options.read === 'string') {\n    options.read = handleReadPreferenceAliases(options.read);\n  } else if (Array.isArray(options.read) && typeof options.read[0] === 'string') {\n    options.read = {\n      mode: handleReadPreferenceAliases(options.read[0]),\n      tags: options.read[1]\n    };\n  }\n  if (options.optimisticConcurrency && !options.versionKey) {\n    throw new MongooseError('Must set `versionKey` if using `optimisticConcurrency`');\n  }\n  return options;\n};\n\n/**\n * Inherit a Schema by applying a discriminator on an existing Schema.\n *\n *\n * #### Example:\n *\n *     const eventSchema = new mongoose.Schema({ timestamp: Date }, { discriminatorKey: 'kind' });\n *\n *     const clickedEventSchema = new mongoose.Schema({ element: String }, { discriminatorKey: 'kind' });\n *     const ClickedModel = eventSchema.discriminator('clicked', clickedEventSchema);\n *\n *     const Event = mongoose.model('Event', eventSchema);\n *\n *     Event.discriminators['clicked']; // Model { clicked }\n *\n *     const doc = await Event.create({ kind: 'clicked', element: '#hero' });\n *     doc.element; // '#hero'\n *     doc instanceof ClickedModel; // true\n *\n * @param {String} name the name of the discriminator\n * @param {Schema} schema the discriminated Schema\n * @return {Schema} the Schema instance\n * @api public\n */\nSchema.prototype.discriminator = function (name, schema) {\n  this._applyDiscriminators = this._applyDiscriminators || new Map();\n  this._applyDiscriminators.set(name, schema);\n  return this;\n};\n\n/**\n * Adds key path / schema type pairs to this schema.\n *\n * #### Example:\n *\n *     const ToySchema = new Schema();\n *     ToySchema.add({ name: 'string', color: 'string', price: 'number' });\n *\n *     const TurboManSchema = new Schema();\n *     // You can also `add()` another schema and copy over all paths, virtuals,\n *     // getters, setters, indexes, methods, and statics.\n *     TurboManSchema.add(ToySchema).add({ year: Number });\n *\n * @param {Object|Schema} obj plain object with paths to add, or another schema\n * @param {String} [prefix] path to prefix the newly added paths with\n * @return {Schema} the Schema instance\n * @api public\n */\n\nSchema.prototype.add = function add(obj, prefix) {\n  if (obj instanceof Schema || obj != null && obj.instanceOfSchema) {\n    merge(this, obj);\n    return this;\n  }\n\n  // Special case: setting top-level `_id` to false should convert to disabling\n  // the `_id` option. This behavior never worked before 5.4.11 but numerous\n  // codebases use it (see gh-7516, gh-7512).\n  if (obj._id === false && prefix == null) {\n    this.options._id = false;\n  }\n  prefix = prefix || '';\n  // avoid prototype pollution\n  if (prefix === '__proto__.' || prefix === 'constructor.' || prefix === 'prototype.') {\n    return this;\n  }\n  const keys = Object.keys(obj);\n  const typeKey = this.options.typeKey;\n  for (const key of keys) {\n    if (utils.specialProperties.has(key)) {\n      continue;\n    }\n    const fullPath = prefix + key;\n    const val = obj[key];\n    if (val == null) {\n      throw new TypeError('Invalid value for schema path `' + fullPath + '`, got value \"' + val + '\"');\n    }\n    // Retain `_id: false` but don't set it as a path, re: gh-8274.\n    if (key === '_id' && val === false) {\n      continue;\n    }\n    // Deprecate setting schema paths to primitive types (gh-7558)\n    let isMongooseTypeString = false;\n    if (typeof val === 'string') {\n      // Handle the case in which the type is specified as a string (eg. 'date', 'oid', ...)\n      const MongooseTypes = this.base != null ? this.base.Schema.Types : Schema.Types;\n      const upperVal = val.charAt(0).toUpperCase() + val.substring(1);\n      isMongooseTypeString = MongooseTypes[upperVal] != null;\n    }\n    if (key !== '_id' && (typeof val !== 'object' && typeof val !== 'function' && !isMongooseTypeString || val == null)) {\n      throw new TypeError(`Invalid schema configuration: \\`${val}\\` is not ` + `a valid type at path \\`${key}\\`. See ` + 'https://bit.ly/mongoose-schematypes for a list of valid schema types.');\n    }\n    if (val instanceof VirtualType || (val.constructor && val.constructor.name || null) === 'VirtualType') {\n      this.virtual(val);\n      continue;\n    }\n    if (Array.isArray(val) && val.length === 1 && val[0] == null) {\n      throw new TypeError('Invalid value for schema Array path `' + fullPath + '`, got value \"' + val[0] + '\"');\n    }\n    if (!(isPOJO(val) || val instanceof SchemaTypeOptions)) {\n      // Special-case: Non-options definitely a path so leaf at this node\n      // Examples: Schema instances, SchemaType instances\n      if (prefix) {\n        this.nested[prefix.substring(0, prefix.length - 1)] = true;\n      }\n      this.path(prefix + key, val);\n      if (val[0] != null && !val[0].instanceOfSchema && utils.isPOJO(val[0].discriminators)) {\n        const schemaType = this.path(prefix + key);\n        for (const key in val[0].discriminators) {\n          schemaType.discriminator(key, val[0].discriminators[key]);\n        }\n      }\n    } else if (Object.keys(val).length < 1) {\n      // Special-case: {} always interpreted as Mixed path so leaf at this node\n      if (prefix) {\n        this.nested[prefix.substring(0, prefix.length - 1)] = true;\n      }\n      this.path(fullPath, val); // mixed type\n    } else if (!val[typeKey] || typeKey === 'type' && isPOJO(val.type) && val.type.type) {\n      // Special-case: POJO with no bona-fide type key - interpret as tree of deep paths so recurse\n      // nested object `{ last: { name: String } }`. Avoid functions with `.type` re: #10807 because\n      // NestJS sometimes adds `Date.type`.\n      this.nested[fullPath] = true;\n      this.add(val, fullPath + '.');\n    } else {\n      // There IS a bona-fide type key that may also be a POJO\n      const _typeDef = val[typeKey];\n      if (isPOJO(_typeDef) && Object.keys(_typeDef).length > 0) {\n        // If a POJO is the value of a type key, make it a subdocument\n        if (prefix) {\n          this.nested[prefix.substring(0, prefix.length - 1)] = true;\n        }\n        const childSchemaOptions = {};\n        if (this._userProvidedOptions.typeKey) {\n          childSchemaOptions.typeKey = this._userProvidedOptions.typeKey;\n        }\n        // propagate 'strict' option to child schema\n        if (this._userProvidedOptions.strict != null) {\n          childSchemaOptions.strict = this._userProvidedOptions.strict;\n        }\n        if (this._userProvidedOptions.toObject != null) {\n          childSchemaOptions.toObject = utils.omit(this._userProvidedOptions.toObject, ['transform']);\n        }\n        if (this._userProvidedOptions.toJSON != null) {\n          childSchemaOptions.toJSON = utils.omit(this._userProvidedOptions.toJSON, ['transform']);\n        }\n        const _schema = new Schema(_typeDef, childSchemaOptions);\n        _schema.$implicitlyCreated = true;\n        const schemaWrappedPath = Object.assign({}, val, {\n          [typeKey]: _schema\n        });\n        this.path(prefix + key, schemaWrappedPath);\n      } else {\n        // Either the type is non-POJO or we interpret it as Mixed anyway\n        if (prefix) {\n          this.nested[prefix.substring(0, prefix.length - 1)] = true;\n        }\n        this.path(prefix + key, val);\n        if (val != null && !val.instanceOfSchema && utils.isPOJO(val.discriminators)) {\n          const schemaType = this.path(prefix + key);\n          for (const key in val.discriminators) {\n            schemaType.discriminator(key, val.discriminators[key]);\n          }\n        }\n      }\n    }\n  }\n  const aliasObj = Object.fromEntries(Object.entries(obj).map(([key]) => [prefix + key, null]));\n  aliasFields(this, aliasObj);\n  return this;\n};\n\n/**\n * Add an alias for `path`. This means getting or setting the `alias`\n * is equivalent to getting or setting the `path`.\n *\n * #### Example:\n *\n *     const toySchema = new Schema({ n: String });\n *\n *     // Make 'name' an alias for 'n'\n *     toySchema.alias('n', 'name');\n *\n *     const Toy = mongoose.model('Toy', toySchema);\n *     const turboMan = new Toy({ n: 'Turbo Man' });\n *\n *     turboMan.name; // 'Turbo Man'\n *     turboMan.n; // 'Turbo Man'\n *\n *     turboMan.name = 'Turbo Man Action Figure';\n *     turboMan.n; // 'Turbo Man Action Figure'\n *\n *     await turboMan.save(); // Saves { _id: ..., n: 'Turbo Man Action Figure' }\n *\n *\n * @param {String} path real path to alias\n * @param {String|String[]} alias the path(s) to use as an alias for `path`\n * @return {Schema} the Schema instance\n * @api public\n */\n\nSchema.prototype.alias = function alias(path, alias) {\n  aliasFields(this, {\n    [path]: alias\n  });\n  return this;\n};\n\n/**\n * Remove an index by name or index specification.\n *\n * removeIndex only removes indexes from your schema object. Does **not** affect the indexes\n * in MongoDB.\n *\n * #### Example:\n *\n *     const ToySchema = new Schema({ name: String, color: String, price: Number });\n *\n *     // Add a new index on { name, color }\n *     ToySchema.index({ name: 1, color: 1 });\n *\n *     // Remove index on { name, color }\n *     // Keep in mind that order matters! `removeIndex({ color: 1, name: 1 })` won't remove the index\n *     ToySchema.removeIndex({ name: 1, color: 1 });\n *\n *     // Add an index with a custom name\n *     ToySchema.index({ color: 1 }, { name: 'my custom index name' });\n *     // Remove index by name\n *     ToySchema.removeIndex('my custom index name');\n *\n * @param {Object|string} index name or index specification\n * @return {Schema} the Schema instance\n * @api public\n */\n\nSchema.prototype.removeIndex = function removeIndex(index) {\n  if (arguments.length > 1) {\n    throw new Error('removeIndex() takes only 1 argument');\n  }\n  if (typeof index !== 'object' && typeof index !== 'string') {\n    throw new Error('removeIndex() may only take either an object or a string as an argument');\n  }\n  if (typeof index === 'object') {\n    for (let i = this._indexes.length - 1; i >= 0; --i) {\n      if (util.isDeepStrictEqual(this._indexes[i][0], index)) {\n        this._indexes.splice(i, 1);\n      }\n    }\n  } else {\n    for (let i = this._indexes.length - 1; i >= 0; --i) {\n      if (this._indexes[i][1] != null && this._indexes[i][1].name === index) {\n        this._indexes.splice(i, 1);\n      }\n    }\n  }\n  return this;\n};\n\n/**\n * Remove all indexes from this schema.\n *\n * clearIndexes only removes indexes from your schema object. Does **not** affect the indexes\n * in MongoDB.\n *\n * #### Example:\n *\n *     const ToySchema = new Schema({ name: String, color: String, price: Number });\n *     ToySchema.index({ name: 1 });\n *     ToySchema.index({ color: 1 });\n *\n *     // Remove all indexes on this schema\n *     ToySchema.clearIndexes();\n *\n *     ToySchema.indexes(); // []\n *\n * @return {Schema} the Schema instance\n * @api public\n */\n\nSchema.prototype.clearIndexes = function clearIndexes() {\n  this._indexes.length = 0;\n  return this;\n};\n\n/**\n * Add an [Atlas search index](https://www.mongodb.com/docs/atlas/atlas-search/create-index/) that Mongoose will create using `Model.createSearchIndex()`.\n * This function only works when connected to MongoDB Atlas.\n *\n * #### Example:\n *\n *     const ToySchema = new Schema({ name: String, color: String, price: Number });\n *     ToySchema.searchIndex({ name: 'test', definition: { mappings: { dynamic: true } } });\n *\n * @param {Object} description index options, including `name` and `definition`\n * @param {String} description.name\n * @param {Object} description.definition\n * @return {Schema} the Schema instance\n * @api public\n */\n\nSchema.prototype.searchIndex = function searchIndex(description) {\n  this._searchIndexes.push(description);\n  return this;\n};\n\n/**\n * Reserved document keys.\n *\n * Keys in this object are names that are warned in schema declarations\n * because they have the potential to break Mongoose/ Mongoose plugins functionality. If you create a schema\n * using `new Schema()` with one of these property names, Mongoose will log a warning.\n *\n * - _posts\n * - _pres\n * - collection\n  * - emit\n * - errors\n * - get\n * - init\n * - isModified\n * - isNew\n * - listeners\n * - modelName\n * - on\n * - once\n * - populated\n * - prototype\n * - remove\n * - removeListener\n * - save\n * - schema\n * - toObject\n * - validate\n *\n * _NOTE:_ Use of these terms as method names is permitted, but play at your own risk, as they may be existing mongoose document methods you are stomping on.\n *\n *      const schema = new Schema(..);\n *      schema.methods.init = function () {} // potentially breaking\n *\n * @property reserved\n * @memberOf Schema\n * @static\n */\n\nSchema.reserved = Object.create(null);\nSchema.prototype.reserved = Schema.reserved;\nconst reserved = Schema.reserved;\n// Core object\nreserved['prototype'] =\n// EventEmitter\nreserved.emit = reserved.listeners = reserved.removeListener =\n// document properties and functions\nreserved.collection = reserved.errors = reserved.get = reserved.init = reserved.isModified = reserved.isNew = reserved.populated = reserved.remove = reserved.save = reserved.toObject = reserved.validate = 1;\nreserved.collection = 1;\n\n/**\n * Gets/sets schema paths.\n *\n * Sets a path (if arity 2)\n * Gets a path (if arity 1)\n *\n * #### Example:\n *\n *     schema.path('name') // returns a SchemaType\n *     schema.path('name', Number) // changes the schemaType of `name` to Number\n *\n * @param {String} path The name of the Path to get / set\n * @param {Object} [obj] The Type to set the path to, if provided the path will be SET, otherwise the path will be GET\n * @api public\n */\n\nSchema.prototype.path = function (path, obj) {\n  if (obj === undefined) {\n    // Convert to '.$' to check subpaths re: gh-6405\n    const cleanPath = _pathToPositionalSyntax(path);\n    let schematype = _getPath(this, path, cleanPath);\n    if (schematype != null) {\n      return schematype;\n    }\n\n    // Look for maps\n    const mapPath = getMapPath(this, path);\n    if (mapPath != null) {\n      return mapPath;\n    }\n\n    // Look if a parent of this path is mixed\n    schematype = this.hasMixedParent(cleanPath);\n    if (schematype != null) {\n      return schematype;\n    }\n\n    // subpaths?\n    return hasNumericSubpathRegex.test(path) ? getPositionalPath(this, path, cleanPath) : undefined;\n  }\n\n  // some path names conflict with document methods\n  const firstPieceOfPath = path.split('.')[0];\n  if (reserved[firstPieceOfPath] && !this.options.suppressReservedKeysWarning) {\n    const errorMessage = `\\`${firstPieceOfPath}\\` is a reserved schema pathname and may break some functionality. ` + 'You are allowed to use it, but use at your own risk. ' + 'To disable this warning pass `suppressReservedKeysWarning` as a schema option.';\n    utils.warn(errorMessage);\n  }\n  if (typeof obj === 'object' && utils.hasUserDefinedProperty(obj, 'ref')) {\n    validateRef(obj.ref, path);\n  }\n\n  // update the tree\n  const subpaths = path.split(/\\./);\n  const last = subpaths.pop();\n  let branch = this.tree;\n  let fullPath = '';\n  for (const sub of subpaths) {\n    if (utils.specialProperties.has(sub)) {\n      throw new Error('Cannot set special property `' + sub + '` on a schema');\n    }\n    fullPath = fullPath += (fullPath.length > 0 ? '.' : '') + sub;\n    if (!branch[sub]) {\n      this.nested[fullPath] = true;\n      branch[sub] = {};\n    }\n    if (typeof branch[sub] !== 'object') {\n      const msg = 'Cannot set nested path `' + path + '`. ' + 'Parent path `' + fullPath + '` already set to type ' + branch[sub].name + '.';\n      throw new Error(msg);\n    }\n    branch = branch[sub];\n  }\n  branch[last] = clone(obj);\n  this.paths[path] = this.interpretAsType(path, obj, this.options);\n  const schemaType = this.paths[path];\n  if (schemaType.$isSchemaMap) {\n    // Maps can have arbitrary keys, so `$*` is internal shorthand for \"any key\"\n    // The '$' is to imply this path should never be stored in MongoDB so we\n    // can easily build a regexp out of this path, and '*' to imply \"any key.\"\n    const mapPath = path + '.$*';\n    this.paths[mapPath] = schemaType.$__schemaType;\n    this.mapPaths.push(this.paths[mapPath]);\n  }\n  if (schemaType.$isSingleNested) {\n    for (const key of Object.keys(schemaType.schema.paths)) {\n      this.singleNestedPaths[path + '.' + key] = schemaType.schema.paths[key];\n    }\n    for (const key of Object.keys(schemaType.schema.singleNestedPaths)) {\n      this.singleNestedPaths[path + '.' + key] = schemaType.schema.singleNestedPaths[key];\n    }\n    for (const key of Object.keys(schemaType.schema.subpaths)) {\n      this.singleNestedPaths[path + '.' + key] = schemaType.schema.subpaths[key];\n    }\n    for (const key of Object.keys(schemaType.schema.nested)) {\n      this.singleNestedPaths[path + '.' + key] = 'nested';\n    }\n    Object.defineProperty(schemaType.schema, 'base', {\n      configurable: true,\n      enumerable: false,\n      writable: false,\n      value: this.base\n    });\n    schemaType.caster.base = this.base;\n    this.childSchemas.push({\n      schema: schemaType.schema,\n      model: schemaType.caster\n    });\n  } else if (schemaType.$isMongooseDocumentArray) {\n    Object.defineProperty(schemaType.schema, 'base', {\n      configurable: true,\n      enumerable: false,\n      writable: false,\n      value: this.base\n    });\n    schemaType.casterConstructor.base = this.base;\n    this.childSchemas.push({\n      schema: schemaType.schema,\n      model: schemaType.casterConstructor\n    });\n  }\n  if (schemaType.$isMongooseArray && schemaType.caster instanceof SchemaType) {\n    let arrayPath = path;\n    let _schemaType = schemaType;\n    const toAdd = [];\n    while (_schemaType.$isMongooseArray) {\n      arrayPath = arrayPath + '.$';\n\n      // Skip arrays of document arrays\n      if (_schemaType.$isMongooseDocumentArray) {\n        _schemaType.$embeddedSchemaType._arrayPath = arrayPath;\n        _schemaType.$embeddedSchemaType._arrayParentPath = path;\n        _schemaType = _schemaType.$embeddedSchemaType;\n      } else {\n        _schemaType.caster._arrayPath = arrayPath;\n        _schemaType.caster._arrayParentPath = path;\n        _schemaType = _schemaType.caster;\n      }\n      this.subpaths[arrayPath] = _schemaType;\n    }\n    for (const _schemaType of toAdd) {\n      this.subpaths[_schemaType.path] = _schemaType;\n    }\n  }\n  if (schemaType.$isMongooseDocumentArray) {\n    for (const key of Object.keys(schemaType.schema.paths)) {\n      const _schemaType = schemaType.schema.paths[key];\n      this.subpaths[path + '.' + key] = _schemaType;\n      if (typeof _schemaType === 'object' && _schemaType != null && _schemaType.$parentSchemaDocArray == null) {\n        _schemaType.$parentSchemaDocArray = schemaType;\n      }\n    }\n    for (const key of Object.keys(schemaType.schema.subpaths)) {\n      const _schemaType = schemaType.schema.subpaths[key];\n      this.subpaths[path + '.' + key] = _schemaType;\n      if (typeof _schemaType === 'object' && _schemaType != null && _schemaType.$parentSchemaDocArray == null) {\n        _schemaType.$parentSchemaDocArray = schemaType;\n      }\n    }\n    for (const key of Object.keys(schemaType.schema.singleNestedPaths)) {\n      const _schemaType = schemaType.schema.singleNestedPaths[key];\n      this.subpaths[path + '.' + key] = _schemaType;\n      if (typeof _schemaType === 'object' && _schemaType != null && _schemaType.$parentSchemaDocArray == null) {\n        _schemaType.$parentSchemaDocArray = schemaType;\n      }\n    }\n  }\n  return this;\n};\n\n/*!\n * ignore\n */\n\nfunction gatherChildSchemas(schema) {\n  const childSchemas = [];\n  for (const path of Object.keys(schema.paths)) {\n    const schematype = schema.paths[path];\n    if (schematype.$isMongooseDocumentArray || schematype.$isSingleNested) {\n      childSchemas.push({\n        schema: schematype.schema,\n        model: schematype.caster\n      });\n    }\n  }\n  return childSchemas;\n}\n\n/*!\n * ignore\n */\n\nfunction _getPath(schema, path, cleanPath) {\n  if (schema.paths.hasOwnProperty(path)) {\n    return schema.paths[path];\n  }\n  if (schema.subpaths.hasOwnProperty(cleanPath)) {\n    return schema.subpaths[cleanPath];\n  }\n  if (schema.singleNestedPaths.hasOwnProperty(cleanPath) && typeof schema.singleNestedPaths[cleanPath] === 'object') {\n    return schema.singleNestedPaths[cleanPath];\n  }\n  return null;\n}\n\n/*!\n * ignore\n */\n\nfunction _pathToPositionalSyntax(path) {\n  if (!/\\.\\d+/.test(path)) {\n    return path;\n  }\n  return path.replace(/\\.\\d+\\./g, '.$.').replace(/\\.\\d+$/, '.$');\n}\n\n/*!\n * ignore\n */\n\nfunction getMapPath(schema, path) {\n  if (schema.mapPaths.length === 0) {\n    return null;\n  }\n  for (const val of schema.mapPaths) {\n    const _path = val.path;\n    const re = new RegExp('^' + _path.replace(/\\.\\$\\*/g, '\\\\.[^.]+') + '$');\n    if (re.test(path)) {\n      return schema.paths[_path];\n    }\n  }\n  return null;\n}\n\n/**\n * The Mongoose instance this schema is associated with\n *\n * @property base\n * @api private\n */\n\nObject.defineProperty(Schema.prototype, 'base', {\n  configurable: true,\n  enumerable: false,\n  writable: true,\n  value: null\n});\n\n/**\n * Converts type arguments into Mongoose Types.\n *\n * @param {String} path\n * @param {Object} obj constructor\n * @param {Object} options\n * @api private\n */\n\nSchema.prototype.interpretAsType = function (path, obj, options) {\n  if (obj instanceof SchemaType) {\n    if (obj.path === path) {\n      return obj;\n    }\n    const clone = obj.clone();\n    clone.path = path;\n    return clone;\n  }\n\n  // If this schema has an associated Mongoose object, use the Mongoose object's\n  // copy of SchemaTypes re: gh-7158 gh-6933\n  const MongooseTypes = this.base != null ? this.base.Schema.Types : Schema.Types;\n  const Types = this.base != null ? this.base.Types : require('./types');\n  if (!utils.isPOJO(obj) && !(obj instanceof SchemaTypeOptions)) {\n    const constructorName = utils.getFunctionName(obj.constructor);\n    if (constructorName !== 'Object') {\n      const oldObj = obj;\n      obj = {};\n      obj[options.typeKey] = oldObj;\n    }\n  }\n\n  // Get the type making sure to allow keys named \"type\"\n  // and default to mixed if not specified.\n  // { type: { type: String, default: 'freshcut' } }\n  let type = obj[options.typeKey] && (obj[options.typeKey] instanceof Function || options.typeKey !== 'type' || !obj.type.type) ? obj[options.typeKey] : {};\n  let name;\n  if (utils.isPOJO(type) || type === 'mixed') {\n    return new MongooseTypes.Mixed(path, obj);\n  }\n  if (Array.isArray(type) || type === Array || type === 'array' || type === MongooseTypes.Array) {\n    // if it was specified through { type } look for `cast`\n    let cast = type === Array || type === 'array' ? obj.cast || obj.of : type[0];\n\n    // new Schema({ path: [new Schema({ ... })] })\n    if (cast && cast.instanceOfSchema) {\n      if (!(cast instanceof Schema)) {\n        if (this.options._isMerging) {\n          cast = new Schema(cast);\n        } else {\n          throw new TypeError('Schema for array path `' + path + '` is from a different copy of the Mongoose module. ' + 'Please make sure you\\'re using the same version ' + 'of Mongoose everywhere with `npm list mongoose`. If you are still ' + 'getting this error, please add `new Schema()` around the path: ' + `${path}: new Schema(...)`);\n        }\n      }\n      return new MongooseTypes.DocumentArray(path, cast, obj);\n    }\n    if (cast && cast[options.typeKey] && cast[options.typeKey].instanceOfSchema) {\n      if (!(cast[options.typeKey] instanceof Schema)) {\n        if (this.options._isMerging) {\n          cast[options.typeKey] = new Schema(cast[options.typeKey]);\n        } else {\n          throw new TypeError('Schema for array path `' + path + '` is from a different copy of the Mongoose module. ' + 'Please make sure you\\'re using the same version ' + 'of Mongoose everywhere with `npm list mongoose`. If you are still ' + 'getting this error, please add `new Schema()` around the path: ' + `${path}: new Schema(...)`);\n        }\n      }\n      return new MongooseTypes.DocumentArray(path, cast[options.typeKey], obj, cast);\n    }\n    if (Array.isArray(cast)) {\n      return new MongooseTypes.Array(path, this.interpretAsType(path, cast, options), obj);\n    }\n\n    // Handle both `new Schema({ arr: [{ subpath: String }] })` and `new Schema({ arr: [{ type: { subpath: string } }] })`\n    const castFromTypeKey = cast != null && cast[options.typeKey] && (options.typeKey !== 'type' || !cast.type.type) ? cast[options.typeKey] : cast;\n    if (typeof cast === 'string') {\n      cast = MongooseTypes[cast.charAt(0).toUpperCase() + cast.substring(1)];\n    } else if (utils.isPOJO(castFromTypeKey)) {\n      if (Object.keys(castFromTypeKey).length) {\n        // The `minimize` and `typeKey` options propagate to child schemas\n        // declared inline, like `{ arr: [{ val: { $type: String } }] }`.\n        // See gh-3560\n        const childSchemaOptions = {\n          minimize: options.minimize\n        };\n        if (options.typeKey) {\n          childSchemaOptions.typeKey = options.typeKey;\n        }\n        // propagate 'strict' option to child schema\n        if (options.hasOwnProperty('strict')) {\n          childSchemaOptions.strict = options.strict;\n        }\n        if (options.hasOwnProperty('strictQuery')) {\n          childSchemaOptions.strictQuery = options.strictQuery;\n        }\n        if (options.hasOwnProperty('toObject')) {\n          childSchemaOptions.toObject = utils.omit(options.toObject, ['transform']);\n        }\n        if (options.hasOwnProperty('toJSON')) {\n          childSchemaOptions.toJSON = utils.omit(options.toJSON, ['transform']);\n        }\n        if (this._userProvidedOptions.hasOwnProperty('_id')) {\n          childSchemaOptions._id = this._userProvidedOptions._id;\n        } else if (Schema.Types.DocumentArray.defaultOptions._id != null) {\n          childSchemaOptions._id = Schema.Types.DocumentArray.defaultOptions._id;\n        }\n        const childSchema = new Schema(castFromTypeKey, childSchemaOptions);\n        childSchema.$implicitlyCreated = true;\n        return new MongooseTypes.DocumentArray(path, childSchema, obj);\n      } else {\n        // Special case: empty object becomes mixed\n        return new MongooseTypes.Array(path, MongooseTypes.Mixed, obj);\n      }\n    }\n    if (cast) {\n      type = cast[options.typeKey] && (options.typeKey !== 'type' || !cast.type.type) ? cast[options.typeKey] : cast;\n      if (Array.isArray(type)) {\n        return new MongooseTypes.Array(path, this.interpretAsType(path, type, options), obj);\n      }\n      name = typeof type === 'string' ? type : type.schemaName || utils.getFunctionName(type);\n\n      // For Jest 26+, see #10296\n      if (name === 'ClockDate') {\n        name = 'Date';\n      }\n      if (name === void 0) {\n        throw new TypeError('Invalid schema configuration: ' + `Could not determine the embedded type for array \\`${path}\\`. ` + 'See https://mongoosejs.com/docs/guide.html#definition for more info on supported schema syntaxes.');\n      }\n      if (!MongooseTypes.hasOwnProperty(name)) {\n        throw new TypeError('Invalid schema configuration: ' + `\\`${name}\\` is not a valid type within the array \\`${path}\\`.` + 'See https://bit.ly/mongoose-schematypes for a list of valid schema types.');\n      }\n    }\n    return new MongooseTypes.Array(path, cast || MongooseTypes.Mixed, obj, options);\n  }\n  if (type && type.instanceOfSchema) {\n    return new MongooseTypes.Subdocument(type, path, obj);\n  }\n  if (Buffer.isBuffer(type)) {\n    name = 'Buffer';\n  } else if (typeof type === 'function' || typeof type === 'object') {\n    name = type.schemaName || utils.getFunctionName(type);\n  } else if (type === Types.ObjectId) {\n    name = 'ObjectId';\n  } else if (type === Types.Decimal128) {\n    name = 'Decimal128';\n  } else {\n    name = type == null ? '' + type : type.toString();\n  }\n  if (name) {\n    name = name.charAt(0).toUpperCase() + name.substring(1);\n  }\n  // Special case re: gh-7049 because the bson `ObjectID` class' capitalization\n  // doesn't line up with Mongoose's.\n  if (name === 'ObjectID') {\n    name = 'ObjectId';\n  }\n  // For Jest 26+, see #10296\n  if (name === 'ClockDate') {\n    name = 'Date';\n  }\n  if (name === void 0) {\n    throw new TypeError(`Invalid schema configuration: \\`${path}\\` schematype definition is ` + 'invalid. See ' + 'https://mongoosejs.com/docs/guide.html#definition for more info on supported schema syntaxes.');\n  }\n  if (MongooseTypes[name] == null) {\n    throw new TypeError(`Invalid schema configuration: \\`${name}\\` is not ` + `a valid type at path \\`${path}\\`. See ` + 'https://bit.ly/mongoose-schematypes for a list of valid schema types.');\n  }\n  const schemaType = new MongooseTypes[name](path, obj);\n  if (schemaType.$isSchemaMap) {\n    createMapNestedSchemaType(this, schemaType, path, obj, options);\n  }\n  return schemaType;\n};\n\n/*!\n * ignore\n */\n\nfunction createMapNestedSchemaType(schema, schemaType, path, obj, options) {\n  const mapPath = path + '.$*';\n  let _mapType = {\n    type: {}\n  };\n  if (utils.hasUserDefinedProperty(obj, 'of')) {\n    const isInlineSchema = utils.isPOJO(obj.of) && Object.keys(obj.of).length > 0 && !utils.hasUserDefinedProperty(obj.of, schema.options.typeKey);\n    if (isInlineSchema) {\n      _mapType = {\n        [schema.options.typeKey]: new Schema(obj.of)\n      };\n    } else if (utils.isPOJO(obj.of)) {\n      _mapType = Object.assign({}, obj.of);\n    } else {\n      _mapType = {\n        [schema.options.typeKey]: obj.of\n      };\n    }\n    if (_mapType[schema.options.typeKey] && _mapType[schema.options.typeKey].instanceOfSchema) {\n      const subdocumentSchema = _mapType[schema.options.typeKey];\n      subdocumentSchema.eachPath((subpath, type) => {\n        if (type.options.select === true || type.options.select === false) {\n          throw new MongooseError('Cannot use schema-level projections (`select: true` or `select: false`) within maps at path \"' + path + '.' + subpath + '\"');\n        }\n      });\n    }\n    if (utils.hasUserDefinedProperty(obj, 'ref')) {\n      _mapType.ref = obj.ref;\n    }\n  }\n  schemaType.$__schemaType = schema.interpretAsType(mapPath, _mapType, options);\n}\n\n/**\n * Iterates the schemas paths similar to Array#forEach.\n *\n * The callback is passed the pathname and the schemaType instance.\n *\n * #### Example:\n *\n *     const userSchema = new Schema({ name: String, registeredAt: Date });\n *     userSchema.eachPath((pathname, schematype) => {\n *       // Prints twice:\n *       // name SchemaString { ... }\n *       // registeredAt SchemaDate { ... }\n *       console.log(pathname, schematype);\n *     });\n *\n * @param {Function} fn callback function\n * @return {Schema} this\n * @api public\n */\n\nSchema.prototype.eachPath = function (fn) {\n  const keys = Object.keys(this.paths);\n  const len = keys.length;\n  for (let i = 0; i < len; ++i) {\n    fn(keys[i], this.paths[keys[i]]);\n  }\n  return this;\n};\n\n/**\n * Returns an Array of path strings that are required by this schema.\n *\n * #### Example:\n *\n *     const s = new Schema({\n *       name: { type: String, required: true },\n *       age: { type: String, required: true },\n *       notes: String\n *     });\n *     s.requiredPaths(); // [ 'age', 'name' ]\n *\n * @api public\n * @param {Boolean} invalidate Refresh the cache\n * @return {Array}\n */\n\nSchema.prototype.requiredPaths = function requiredPaths(invalidate) {\n  if (this._requiredpaths && !invalidate) {\n    return this._requiredpaths;\n  }\n  const paths = Object.keys(this.paths);\n  let i = paths.length;\n  const ret = [];\n  while (i--) {\n    const path = paths[i];\n    if (this.paths[path].isRequired) {\n      ret.push(path);\n    }\n  }\n  this._requiredpaths = ret;\n  return this._requiredpaths;\n};\n\n/**\n * Returns indexes from fields and schema-level indexes (cached).\n *\n * @api private\n * @return {Array}\n */\n\nSchema.prototype.indexedPaths = function indexedPaths() {\n  if (this._indexedpaths) {\n    return this._indexedpaths;\n  }\n  this._indexedpaths = this.indexes();\n  return this._indexedpaths;\n};\n\n/**\n * Returns the pathType of `path` for this schema.\n *\n * Given a path, returns whether it is a real, virtual, nested, or ad-hoc/undefined path.\n *\n * #### Example:\n *\n *     const s = new Schema({ name: String, nested: { foo: String } });\n *     s.virtual('foo').get(() => 42);\n *     s.pathType('name'); // \"real\"\n *     s.pathType('nested'); // \"nested\"\n *     s.pathType('foo'); // \"virtual\"\n *     s.pathType('fail'); // \"adhocOrUndefined\"\n *\n * @param {String} path\n * @return {String}\n * @api public\n */\n\nSchema.prototype.pathType = function (path) {\n  if (this.paths.hasOwnProperty(path)) {\n    return 'real';\n  }\n  if (this.virtuals.hasOwnProperty(path)) {\n    return 'virtual';\n  }\n  if (this.nested.hasOwnProperty(path)) {\n    return 'nested';\n  }\n\n  // Convert to '.$' to check subpaths re: gh-6405\n  const cleanPath = _pathToPositionalSyntax(path);\n  if (this.subpaths.hasOwnProperty(cleanPath) || this.subpaths.hasOwnProperty(path)) {\n    return 'real';\n  }\n  const singleNestedPath = this.singleNestedPaths.hasOwnProperty(cleanPath) || this.singleNestedPaths.hasOwnProperty(path);\n  if (singleNestedPath) {\n    return singleNestedPath === 'nested' ? 'nested' : 'real';\n  }\n\n  // Look for maps\n  const mapPath = getMapPath(this, path);\n  if (mapPath != null) {\n    return 'real';\n  }\n  if (/\\.\\d+\\.|\\.\\d+$/.test(path)) {\n    return getPositionalPathType(this, path, cleanPath);\n  }\n  return 'adhocOrUndefined';\n};\n\n/**\n * Returns true iff this path is a child of a mixed schema.\n *\n * @param {String} path\n * @return {Boolean}\n * @api private\n */\n\nSchema.prototype.hasMixedParent = function (path) {\n  const subpaths = path.split(/\\./g);\n  path = '';\n  for (let i = 0; i < subpaths.length; ++i) {\n    path = i > 0 ? path + '.' + subpaths[i] : subpaths[i];\n    if (this.paths.hasOwnProperty(path) && this.paths[path] instanceof MongooseTypes.Mixed) {\n      return this.paths[path];\n    }\n  }\n  return null;\n};\n\n/**\n * Setup updatedAt and createdAt timestamps to documents if enabled\n *\n * @param {Boolean|Object} timestamps timestamps options\n * @api private\n */\nSchema.prototype.setupTimestamp = function (timestamps) {\n  return setupTimestamps(this, timestamps);\n};\n\n/**\n * ignore. Deprecated re: #6405\n * @param {Any} self\n * @param {String} path\n * @api private\n */\n\nfunction getPositionalPathType(self, path, cleanPath) {\n  const subpaths = path.split(/\\.(\\d+)\\.|\\.(\\d+)$/).filter(Boolean);\n  if (subpaths.length < 2) {\n    return self.paths.hasOwnProperty(subpaths[0]) ? self.paths[subpaths[0]] : 'adhocOrUndefined';\n  }\n  let val = self.path(subpaths[0]);\n  let isNested = false;\n  if (!val) {\n    return 'adhocOrUndefined';\n  }\n  const last = subpaths.length - 1;\n  for (let i = 1; i < subpaths.length; ++i) {\n    isNested = false;\n    const subpath = subpaths[i];\n    if (i === last && val && !/\\D/.test(subpath)) {\n      if (val.$isMongooseDocumentArray) {\n        val = val.$embeddedSchemaType;\n      } else if (val instanceof MongooseTypes.Array) {\n        // StringSchema, NumberSchema, etc\n        val = val.caster;\n      } else {\n        val = undefined;\n      }\n      break;\n    }\n\n    // ignore if its just a position segment: path.0.subpath\n    if (!/\\D/.test(subpath)) {\n      // Nested array\n      if (val instanceof MongooseTypes.Array && i !== last) {\n        val = val.caster;\n      }\n      continue;\n    }\n    if (!(val && val.schema)) {\n      val = undefined;\n      break;\n    }\n    const type = val.schema.pathType(subpath);\n    isNested = type === 'nested';\n    val = val.schema.path(subpath);\n  }\n  self.subpaths[cleanPath] = val;\n  if (val) {\n    return 'real';\n  }\n  if (isNested) {\n    return 'nested';\n  }\n  return 'adhocOrUndefined';\n}\n\n/*!\n * ignore\n */\n\nfunction getPositionalPath(self, path, cleanPath) {\n  getPositionalPathType(self, path, cleanPath);\n  return self.subpaths[cleanPath];\n}\n\n/**\n * Adds a method call to the queue.\n *\n * #### Example:\n *\n *     schema.methods.print = function() { console.log(this); };\n *     schema.queue('print', []); // Print the doc every one is instantiated\n *\n *     const Model = mongoose.model('Test', schema);\n *     new Model({ name: 'test' }); // Prints '{\"_id\": ..., \"name\": \"test\" }'\n *\n * @param {String} name name of the document method to call later\n * @param {Array} args arguments to pass to the method\n * @api public\n */\n\nSchema.prototype.queue = function (name, args) {\n  this.callQueue.push([name, args]);\n  return this;\n};\n\n/**\n * Defines a pre hook for the model.\n *\n * #### Example:\n *\n *     const toySchema = new Schema({ name: String, created: Date });\n *\n *     toySchema.pre('save', function(next) {\n *       if (!this.created) this.created = new Date;\n *       next();\n *     });\n *\n *     toySchema.pre('validate', function(next) {\n *       if (this.name !== 'Woody') this.name = 'Woody';\n *       next();\n *     });\n *\n *     // Equivalent to calling `pre()` on `find`, `findOne`, `findOneAndUpdate`.\n *     toySchema.pre(/^find/, function(next) {\n *       console.log(this.getFilter());\n *     });\n *\n *     // Equivalent to calling `pre()` on `updateOne`, `findOneAndUpdate`.\n *     toySchema.pre(['updateOne', 'findOneAndUpdate'], function(next) {\n *       console.log(this.getFilter());\n *     });\n *\n *     toySchema.pre('deleteOne', function() {\n *       // Runs when you call `Toy.deleteOne()`\n *     });\n *\n *     toySchema.pre('deleteOne', { document: true }, function() {\n *       // Runs when you call `doc.deleteOne()`\n *     });\n *\n * @param {String|RegExp|String[]} methodName The method name or regular expression to match method name\n * @param {Object} [options]\n * @param {Boolean} [options.document] If `name` is a hook for both document and query middleware, set to `true` to run on document middleware. For example, set `options.document` to `true` to apply this hook to `Document#deleteOne()` rather than `Query#deleteOne()`.\n * @param {Boolean} [options.query] If `name` is a hook for both document and query middleware, set to `true` to run on query middleware.\n * @param {Function} callback\n * @api public\n */\n\nSchema.prototype.pre = function (name) {\n  if (name instanceof RegExp) {\n    const remainingArgs = Array.prototype.slice.call(arguments, 1);\n    for (const fn of hookNames) {\n      if (name.test(fn)) {\n        this.pre.apply(this, [fn].concat(remainingArgs));\n      }\n    }\n    return this;\n  }\n  if (Array.isArray(name)) {\n    const remainingArgs = Array.prototype.slice.call(arguments, 1);\n    for (const el of name) {\n      this.pre.apply(this, [el].concat(remainingArgs));\n    }\n    return this;\n  }\n  this.s.hooks.pre.apply(this.s.hooks, arguments);\n  return this;\n};\n\n/**\n * Defines a post hook for the document\n *\n *     const schema = new Schema(..);\n *     schema.post('save', function (doc) {\n *       console.log('this fired after a document was saved');\n *     });\n *\n *     schema.post('find', function(docs) {\n *       console.log('this fired after you ran a find query');\n *     });\n *\n *     schema.post(/Many$/, function(res) {\n *       console.log('this fired after you ran `updateMany()` or `deleteMany()`');\n *     });\n *\n *     const Model = mongoose.model('Model', schema);\n *\n *     const m = new Model(..);\n *     m.save(function(err) {\n *       console.log('this fires after the `post` hook');\n *     });\n *\n *     m.find(function(err, docs) {\n *       console.log('this fires after the post find hook');\n *     });\n *\n * @param {String|RegExp|String[]} methodName The method name or regular expression to match method name\n * @param {Object} [options]\n * @param {Boolean} [options.document] If `name` is a hook for both document and query middleware, set to `true` to run on document middleware.\n * @param {Boolean} [options.query] If `name` is a hook for both document and query middleware, set to `true` to run on query middleware.\n * @param {Function} fn callback\n * @see middleware https://mongoosejs.com/docs/middleware.html\n * @see kareem https://npmjs.org/package/kareem\n * @api public\n */\n\nSchema.prototype.post = function (name) {\n  if (name instanceof RegExp) {\n    const remainingArgs = Array.prototype.slice.call(arguments, 1);\n    for (const fn of hookNames) {\n      if (name.test(fn)) {\n        this.post.apply(this, [fn].concat(remainingArgs));\n      }\n    }\n    return this;\n  }\n  if (Array.isArray(name)) {\n    const remainingArgs = Array.prototype.slice.call(arguments, 1);\n    for (const el of name) {\n      this.post.apply(this, [el].concat(remainingArgs));\n    }\n    return this;\n  }\n  this.s.hooks.post.apply(this.s.hooks, arguments);\n  return this;\n};\n\n/**\n * Registers a plugin for this schema.\n *\n * #### Example:\n *\n *     const s = new Schema({ name: String });\n *     s.plugin(schema => console.log(schema.path('name').path));\n *     mongoose.model('Test', s); // Prints 'name'\n *\n * Or with Options:\n *\n *     const s = new Schema({ name: String });\n *     s.plugin((schema, opts) => console.log(opts.text, schema.path('name').path), { text: \"Schema Path Name:\" });\n *     mongoose.model('Test', s); // Prints 'Schema Path Name: name'\n *\n * @param {Function} plugin The Plugin's callback\n * @param {Object} [opts] Options to pass to the plugin\n * @param {Boolean} [opts.deduplicate=false] If true, ignore duplicate plugins (same `fn` argument using `===`)\n * @see plugins https://mongoosejs.com/docs/plugins.html\n * @api public\n */\n\nSchema.prototype.plugin = function (fn, opts) {\n  if (typeof fn !== 'function') {\n    throw new Error('First param to `schema.plugin()` must be a function, ' + 'got \"' + typeof fn + '\"');\n  }\n  if (opts && opts.deduplicate) {\n    for (const plugin of this.plugins) {\n      if (plugin.fn === fn) {\n        return this;\n      }\n    }\n  }\n  this.plugins.push({\n    fn: fn,\n    opts: opts\n  });\n  fn(this, opts);\n  return this;\n};\n\n/**\n * Adds an instance method to documents constructed from Models compiled from this schema.\n *\n * #### Example:\n *\n *     const schema = kittySchema = new Schema(..);\n *\n *     schema.method('meow', function () {\n *       console.log('meeeeeoooooooooooow');\n *     })\n *\n *     const Kitty = mongoose.model('Kitty', schema);\n *\n *     const fizz = new Kitty;\n *     fizz.meow(); // meeeeeooooooooooooow\n *\n * If a hash of name/fn pairs is passed as the only argument, each name/fn pair will be added as methods.\n *\n *     schema.method({\n *         purr: function () {}\n *       , scratch: function () {}\n *     });\n *\n *     // later\n *     const fizz = new Kitty;\n *     fizz.purr();\n *     fizz.scratch();\n *\n * NOTE: `Schema.method()` adds instance methods to the `Schema.methods` object. You can also add instance methods directly to the `Schema.methods` object as seen in the [guide](https://mongoosejs.com/docs/guide.html#methods)\n *\n * @param {String|Object} name The Method Name for a single function, or a Object of \"string-function\" pairs.\n * @param {Function} [fn] The Function in a single-function definition.\n * @api public\n */\n\nSchema.prototype.method = function (name, fn, options) {\n  if (typeof name !== 'string') {\n    for (const i in name) {\n      this.methods[i] = name[i];\n      this.methodOptions[i] = clone(options);\n    }\n  } else {\n    this.methods[name] = fn;\n    this.methodOptions[name] = clone(options);\n  }\n  return this;\n};\n\n/**\n * Adds static \"class\" methods to Models compiled from this schema.\n *\n * #### Example:\n *\n *     const schema = new Schema(..);\n *     // Equivalent to `schema.statics.findByName = function(name) {}`;\n *     schema.static('findByName', function(name) {\n *       return this.find({ name: name });\n *     });\n *\n *     const Drink = mongoose.model('Drink', schema);\n *     await Drink.findByName('LaCroix');\n *\n * If a hash of name/fn pairs is passed as the only argument, each name/fn pair will be added as methods.\n *\n *     schema.static({\n *         findByName: function () {..}\n *       , findByCost: function () {..}\n *     });\n *\n *     const Drink = mongoose.model('Drink', schema);\n *     await Drink.findByName('LaCroix');\n *     await Drink.findByCost(3);\n *\n * If a hash of name/fn pairs is passed as the only argument, each name/fn pair will be added as statics.\n *\n * @param {String|Object} name The Method Name for a single function, or a Object of \"string-function\" pairs.\n * @param {Function} [fn] The Function in a single-function definition.\n * @api public\n * @see Statics https://mongoosejs.com/docs/guide.html#statics\n */\n\nSchema.prototype.static = function (name, fn) {\n  if (typeof name !== 'string') {\n    for (const i in name) {\n      this.statics[i] = name[i];\n    }\n  } else {\n    this.statics[name] = fn;\n  }\n  return this;\n};\n\n/**\n * Defines an index (most likely compound) for this schema.\n *\n * #### Example:\n *\n *     schema.index({ first: 1, last: -1 })\n *\n * @param {Object} fields The Fields to index, with the order, available values: `1 | -1 | '2d' | '2dsphere' | 'geoHaystack' | 'hashed' | 'text'`\n * @param {Object} [options] Options to pass to [MongoDB driver's `createIndex()` function](https://mongodb.github.io/node-mongodb-native/4.9/classes/Collection.html#createIndex)\n * @param {String | number} [options.expires=null] Mongoose-specific syntactic sugar, uses [ms](https://www.npmjs.com/package/ms) to convert `expires` option into seconds for the `expireAfterSeconds` in the above link.\n * @param {String} [options.language_override=null] Tells mongodb to use the specified field instead of `language` for parsing text indexes.\n * @api public\n */\n\nSchema.prototype.index = function (fields, options) {\n  fields || (fields = {});\n  options || (options = {});\n  if (options.expires) {\n    utils.expires(options);\n  }\n  for (const key in fields) {\n    if (this.aliases[key]) {\n      fields = utils.renameObjKey(fields, key, this.aliases[key]);\n    }\n  }\n  for (const field of Object.keys(fields)) {\n    if (fields[field] === 'ascending' || fields[field] === 'asc') {\n      fields[field] = 1;\n    } else if (fields[field] === 'descending' || fields[field] === 'desc') {\n      fields[field] = -1;\n    }\n  }\n  this._indexes.push([fields, options]);\n  return this;\n};\n\n/**\n * Sets a schema option.\n *\n * #### Example:\n *\n *     schema.set('strict'); // 'true' by default\n *     schema.set('strict', false); // Sets 'strict' to false\n *     schema.set('strict'); // 'false'\n *\n * @param {String} key The name of the option to set the value to\n * @param {Object} [value] The value to set the option to, if not passed, the option will be reset to default\n * @param {Array<string>} [tags] tags to add to read preference if key === 'read'\n * @see Schema https://mongoosejs.com/docs/api/schema.html#Schema()\n * @api public\n */\n\nSchema.prototype.set = function (key, value, tags) {\n  if (arguments.length === 1) {\n    return this.options[key];\n  }\n  switch (key) {\n    case 'read':\n      if (typeof value === 'string') {\n        this.options[key] = {\n          mode: handleReadPreferenceAliases(value),\n          tags\n        };\n      } else if (Array.isArray(value) && typeof value[0] === 'string') {\n        this.options[key] = {\n          mode: handleReadPreferenceAliases(value[0]),\n          tags: value[1]\n        };\n      } else {\n        this.options[key] = value;\n      }\n      this._userProvidedOptions[key] = this.options[key];\n      break;\n    case 'timestamps':\n      this.setupTimestamp(value);\n      this.options[key] = value;\n      this._userProvidedOptions[key] = this.options[key];\n      break;\n    case '_id':\n      this.options[key] = value;\n      this._userProvidedOptions[key] = this.options[key];\n      if (value && !this.paths['_id']) {\n        addAutoId(this);\n      } else if (!value && this.paths['_id'] != null && this.paths['_id'].auto) {\n        this.remove('_id');\n      }\n      break;\n    default:\n      this.options[key] = value;\n      this._userProvidedOptions[key] = this.options[key];\n      break;\n  }\n\n  // Propagate `strict` and `strictQuery` changes down to implicitly created schemas\n  if (key === 'strict') {\n    _propagateOptionsToImplicitlyCreatedSchemas(this, {\n      strict: value\n    });\n  }\n  if (key === 'strictQuery') {\n    _propagateOptionsToImplicitlyCreatedSchemas(this, {\n      strictQuery: value\n    });\n  }\n  if (key === 'toObject') {\n    value = {\n      ...value\n    };\n    // Avoid propagating transform to implicitly created schemas re: gh-3279\n    delete value.transform;\n    _propagateOptionsToImplicitlyCreatedSchemas(this, {\n      toObject: value\n    });\n  }\n  if (key === 'toJSON') {\n    value = {\n      ...value\n    };\n    // Avoid propagating transform to implicitly created schemas re: gh-3279\n    delete value.transform;\n    _propagateOptionsToImplicitlyCreatedSchemas(this, {\n      toJSON: value\n    });\n  }\n  return this;\n};\n\n/*!\n * Recursively set options on implicitly created schemas\n */\n\nfunction _propagateOptionsToImplicitlyCreatedSchemas(baseSchema, options) {\n  for (const {\n    schema\n  } of baseSchema.childSchemas) {\n    if (!schema.$implicitlyCreated) {\n      continue;\n    }\n    Object.assign(schema.options, options);\n    _propagateOptionsToImplicitlyCreatedSchemas(schema, options);\n  }\n}\n\n/**\n * Gets a schema option.\n *\n * #### Example:\n *\n *     schema.get('strict'); // true\n *     schema.set('strict', false);\n *     schema.get('strict'); // false\n *\n * @param {String} key The name of the Option to get the current value for\n * @api public\n * @return {Any} the option's value\n */\n\nSchema.prototype.get = function (key) {\n  return this.options[key];\n};\nconst indexTypes = '2d 2dsphere hashed text'.split(' ');\n\n/**\n * The allowed index types\n *\n * @property {String[]} indexTypes\n * @memberOf Schema\n * @static\n * @api public\n */\n\nObject.defineProperty(Schema, 'indexTypes', {\n  get: function () {\n    return indexTypes;\n  },\n  set: function () {\n    throw new Error('Cannot overwrite Schema.indexTypes');\n  }\n});\n\n/**\n * Returns a list of indexes that this schema declares, via `schema.index()` or by `index: true` in a path's options.\n * Indexes are expressed as an array `[spec, options]`.\n *\n * #### Example:\n *\n *     const userSchema = new Schema({\n *       email: { type: String, required: true, unique: true },\n *       registeredAt: { type: Date, index: true }\n *     });\n *\n *     // [ [ { email: 1 }, { unique: true, background: true } ],\n *     //   [ { registeredAt: 1 }, { background: true } ] ]\n *     userSchema.indexes();\n *\n * [Plugins](https://mongoosejs.com/docs/plugins.html) can use the return value of this function to modify a schema's indexes.\n * For example, the below plugin makes every index unique by default.\n *\n *     function myPlugin(schema) {\n *       for (const index of schema.indexes()) {\n *         if (index[1].unique === undefined) {\n *           index[1].unique = true;\n *         }\n *       }\n *     }\n *\n * @api public\n * @return {Array} list of indexes defined in the schema\n */\n\nSchema.prototype.indexes = function () {\n  return getIndexes(this);\n};\n\n/**\n * Creates a virtual type with the given name.\n *\n * @param {String} name The name of the Virtual\n * @param {Object} [options]\n * @param {String|Model} [options.ref] model name or model instance. Marks this as a [populate virtual](https://mongoosejs.com/docs/populate.html#populate-virtuals).\n * @param {String|Function} [options.localField] Required for populate virtuals. See [populate virtual docs](https://mongoosejs.com/docs/populate.html#populate-virtuals) for more information.\n * @param {String|Function} [options.foreignField] Required for populate virtuals. See [populate virtual docs](https://mongoosejs.com/docs/populate.html#populate-virtuals) for more information.\n * @param {Boolean|Function} [options.justOne=false] Only works with populate virtuals. If [truthy](https://masteringjs.io/tutorials/fundamentals/truthy), will be a single doc or `null`. Otherwise, the populate virtual will be an array.\n * @param {Boolean} [options.count=false] Only works with populate virtuals. If [truthy](https://masteringjs.io/tutorials/fundamentals/truthy), this populate virtual will contain the number of documents rather than the documents themselves when you `populate()`.\n * @param {Function|null} [options.get=null] Adds a [getter](https://mongoosejs.com/docs/tutorials/getters-setters.html) to this virtual to transform the populated doc.\n * @param {Object|Function} [options.match=null] Apply a default [`match` option to populate](https://mongoosejs.com/docs/populate.html#match), adding an additional filter to the populate query.\n * @return {VirtualType}\n */\n\nSchema.prototype.virtual = function (name, options) {\n  if (name instanceof VirtualType || getConstructorName(name) === 'VirtualType') {\n    return this.virtual(name.path, name.options);\n  }\n  options = new VirtualOptions(options);\n  if (utils.hasUserDefinedProperty(options, ['ref', 'refPath'])) {\n    if (options.localField == null) {\n      throw new Error('Reference virtuals require `localField` option');\n    }\n    if (options.foreignField == null) {\n      throw new Error('Reference virtuals require `foreignField` option');\n    }\n    this.pre('init', function virtualPreInit(obj) {\n      if (mpath.has(name, obj)) {\n        const _v = mpath.get(name, obj);\n        if (!this.$$populatedVirtuals) {\n          this.$$populatedVirtuals = {};\n        }\n        if (options.justOne || options.count) {\n          this.$$populatedVirtuals[name] = Array.isArray(_v) ? _v[0] : _v;\n        } else {\n          this.$$populatedVirtuals[name] = Array.isArray(_v) ? _v : _v == null ? [] : [_v];\n        }\n        mpath.unset(name, obj);\n      }\n    });\n    const virtual = this.virtual(name);\n    virtual.options = options;\n    virtual.set(function (v) {\n      if (!this.$$populatedVirtuals) {\n        this.$$populatedVirtuals = {};\n      }\n      return setPopulatedVirtualValue(this.$$populatedVirtuals, name, v, options);\n    });\n    if (typeof options.get === 'function') {\n      virtual.get(options.get);\n    }\n\n    // Workaround for gh-8198: if virtual is under document array, make a fake\n    // virtual. See gh-8210, gh-13189\n    const parts = name.split('.');\n    let cur = parts[0];\n    for (let i = 0; i < parts.length - 1; ++i) {\n      if (this.paths[cur] == null) {\n        continue;\n      }\n      if (this.paths[cur].$isMongooseDocumentArray || this.paths[cur].$isSingleNested) {\n        const remnant = parts.slice(i + 1).join('.');\n        this.paths[cur].schema.virtual(remnant, options);\n        break;\n      }\n      cur += '.' + parts[i + 1];\n    }\n    return virtual;\n  }\n  const virtuals = this.virtuals;\n  const parts = name.split('.');\n  if (this.pathType(name) === 'real') {\n    throw new Error('Virtual path \"' + name + '\"' + ' conflicts with a real path in the schema');\n  }\n  virtuals[name] = parts.reduce(function (mem, part, i) {\n    mem[part] || (mem[part] = i === parts.length - 1 ? new VirtualType(options, name) : {});\n    return mem[part];\n  }, this.tree);\n  return virtuals[name];\n};\n\n/**\n * Returns the virtual type with the given `name`.\n *\n * @param {String} name The name of the Virtual to get\n * @return {VirtualType|null}\n */\n\nSchema.prototype.virtualpath = function (name) {\n  return this.virtuals.hasOwnProperty(name) ? this.virtuals[name] : null;\n};\n\n/**\n * Removes the given `path` (or [`paths`]).\n *\n * #### Example:\n *\n *     const schema = new Schema({ name: String, age: Number });\n *     schema.remove('name');\n *     schema.path('name'); // Undefined\n *     schema.path('age'); // SchemaNumber { ... }\n *\n * Or as a Array:\n *\n *     schema.remove(['name', 'age']);\n *     schema.path('name'); // Undefined\n *     schema.path('age'); // Undefined\n *\n * @param {String|Array} path The Path(s) to remove\n * @return {Schema} the Schema instance\n * @api public\n */\nSchema.prototype.remove = function (path) {\n  if (typeof path === 'string') {\n    path = [path];\n  }\n  if (Array.isArray(path)) {\n    path.forEach(function (name) {\n      if (this.path(name) == null && !this.nested[name]) {\n        return;\n      }\n      if (this.nested[name]) {\n        const allKeys = Object.keys(this.paths).concat(Object.keys(this.nested));\n        for (const path of allKeys) {\n          if (path.startsWith(name + '.')) {\n            delete this.paths[path];\n            delete this.nested[path];\n            _deletePath(this, path);\n          }\n        }\n        delete this.nested[name];\n        _deletePath(this, name);\n        return;\n      }\n      delete this.paths[name];\n      _deletePath(this, name);\n    }, this);\n  }\n  return this;\n};\n\n/*!\n * ignore\n */\n\nfunction _deletePath(schema, name) {\n  const pieces = name.split('.');\n  const last = pieces.pop();\n  let branch = schema.tree;\n  for (const piece of pieces) {\n    branch = branch[piece];\n  }\n  delete branch[last];\n}\n\n/**\n * Removes the given virtual or virtuals from the schema.\n *\n * @param {String|Array} path The virutal path(s) to remove.\n * @returns {Schema} the Schema instance, or a mongoose error if the virtual does not exist.\n * @api public\n */\n\nSchema.prototype.removeVirtual = function (path) {\n  if (typeof path === 'string') {\n    path = [path];\n  }\n  if (Array.isArray(path)) {\n    for (const virtual of path) {\n      if (this.virtuals[virtual] == null) {\n        throw new MongooseError(`Attempting to remove virtual \"${virtual}\" that does not exist.`);\n      }\n    }\n    for (const virtual of path) {\n      delete this.paths[virtual];\n      delete this.virtuals[virtual];\n      if (virtual.indexOf('.') !== -1) {\n        mpath.unset(virtual, this.tree);\n      } else {\n        delete this.tree[virtual];\n      }\n    }\n  }\n  return this;\n};\n\n/**\n * Loads an ES6 class into a schema. Maps [setters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set) + [getters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get), [static methods](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/static),\n * and [instance methods](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes#Class_body_and_method_definitions)\n * to schema [virtuals](https://mongoosejs.com/docs/guide.html#virtuals),\n * [statics](https://mongoosejs.com/docs/guide.html#statics), and\n * [methods](https://mongoosejs.com/docs/guide.html#methods).\n *\n * #### Example:\n *\n * ```javascript\n * const md5 = require('md5');\n * const userSchema = new Schema({ email: String });\n * class UserClass {\n *   // `gravatarImage` becomes a virtual\n *   get gravatarImage() {\n *     const hash = md5(this.email.toLowerCase());\n *     return `https://www.gravatar.com/avatar/${hash}`;\n *   }\n *\n *   // `getProfileUrl()` becomes a document method\n *   getProfileUrl() {\n *     return `https://mysite.com/${this.email}`;\n *   }\n *\n *   // `findByEmail()` becomes a static\n *   static findByEmail(email) {\n *     return this.findOne({ email });\n *   }\n * }\n *\n * // `schema` will now have a `gravatarImage` virtual, a `getProfileUrl()` method,\n * // and a `findByEmail()` static\n * userSchema.loadClass(UserClass);\n * ```\n *\n * @param {Function} model The Class to load\n * @param {Boolean} [virtualsOnly] if truthy, only pulls virtuals from the class, not methods or statics\n */\nSchema.prototype.loadClass = function (model, virtualsOnly) {\n  // Stop copying when hit certain base classes\n  if (model === Object.prototype || model === Function.prototype || model.prototype.hasOwnProperty('$isMongooseModelPrototype') || model.prototype.hasOwnProperty('$isMongooseDocumentPrototype')) {\n    return this;\n  }\n  this.loadClass(Object.getPrototypeOf(model), virtualsOnly);\n\n  // Add static methods\n  if (!virtualsOnly) {\n    Object.getOwnPropertyNames(model).forEach(function (name) {\n      if (name.match(/^(length|name|prototype|constructor|__proto__)$/)) {\n        return;\n      }\n      const prop = Object.getOwnPropertyDescriptor(model, name);\n      if (prop.hasOwnProperty('value')) {\n        this.static(name, prop.value);\n      }\n    }, this);\n  }\n\n  // Add methods and virtuals\n  Object.getOwnPropertyNames(model.prototype).forEach(function (name) {\n    if (name.match(/^(constructor)$/)) {\n      return;\n    }\n    const method = Object.getOwnPropertyDescriptor(model.prototype, name);\n    if (!virtualsOnly) {\n      if (typeof method.value === 'function') {\n        this.method(name, method.value);\n      }\n    }\n    if (typeof method.get === 'function') {\n      if (this.virtuals[name]) {\n        this.virtuals[name].getters = [];\n      }\n      this.virtual(name).get(method.get);\n    }\n    if (typeof method.set === 'function') {\n      if (this.virtuals[name]) {\n        this.virtuals[name].setters = [];\n      }\n      this.virtual(name).set(method.set);\n    }\n  }, this);\n  return this;\n};\n\n/*!\n * ignore\n */\n\nSchema.prototype._getSchema = function (path) {\n  const _this = this;\n  const pathschema = _this.path(path);\n  const resultPath = [];\n  if (pathschema) {\n    pathschema.$fullPath = path;\n    return pathschema;\n  }\n  function search(parts, schema) {\n    let p = parts.length + 1;\n    let foundschema;\n    let trypath;\n    while (p--) {\n      trypath = parts.slice(0, p).join('.');\n      foundschema = schema.path(trypath);\n      if (foundschema) {\n        resultPath.push(trypath);\n        if (foundschema.caster) {\n          // array of Mixed?\n          if (foundschema.caster instanceof MongooseTypes.Mixed) {\n            foundschema.caster.$fullPath = resultPath.join('.');\n            return foundschema.caster;\n          }\n\n          // Now that we found the array, we need to check if there\n          // are remaining document paths to look up for casting.\n          // Also we need to handle array.$.path since schema.path\n          // doesn't work for that.\n          // If there is no foundschema.schema we are dealing with\n          // a path like array.$\n          if (p !== parts.length) {\n            if (foundschema.schema) {\n              let ret;\n              if (parts[p] === '$' || isArrayFilter(parts[p])) {\n                if (p + 1 === parts.length) {\n                  // comments.$\n                  return foundschema.$embeddedSchemaType;\n                }\n                // comments.$.comments.$.title\n                ret = search(parts.slice(p + 1), foundschema.schema);\n                if (ret) {\n                  ret.$parentSchemaDocArray = ret.$parentSchemaDocArray || (foundschema.schema.$isSingleNested ? null : foundschema);\n                }\n                return ret;\n              }\n              // this is the last path of the selector\n              ret = search(parts.slice(p), foundschema.schema);\n              if (ret) {\n                ret.$parentSchemaDocArray = ret.$parentSchemaDocArray || (foundschema.schema.$isSingleNested ? null : foundschema);\n              }\n              return ret;\n            }\n          }\n        } else if (foundschema.$isSchemaMap) {\n          if (p >= parts.length) {\n            return foundschema;\n          }\n          // Any path in the map will be an instance of the map's embedded schematype\n          if (p + 1 >= parts.length) {\n            return foundschema.$__schemaType;\n          }\n          if (foundschema.$__schemaType instanceof MongooseTypes.Mixed) {\n            return foundschema.$__schemaType;\n          }\n          if (foundschema.$__schemaType.schema != null) {\n            // Map of docs\n            const ret = search(parts.slice(p + 1), foundschema.$__schemaType.schema);\n            return ret;\n          }\n        }\n        foundschema.$fullPath = resultPath.join('.');\n        return foundschema;\n      }\n    }\n  }\n\n  // look for arrays\n  const parts = path.split('.');\n  for (let i = 0; i < parts.length; ++i) {\n    if (parts[i] === '$' || isArrayFilter(parts[i])) {\n      // Re: gh-5628, because `schema.path()` doesn't take $ into account.\n      parts[i] = '0';\n    }\n    if (numberRE.test(parts[i])) {\n      parts[i] = '$';\n    }\n  }\n  return search(parts, _this);\n};\n\n/*!\n * ignore\n */\n\nSchema.prototype._getPathType = function (path) {\n  const _this = this;\n  const pathschema = _this.path(path);\n  if (pathschema) {\n    return 'real';\n  }\n  function search(parts, schema) {\n    let p = parts.length + 1,\n      foundschema,\n      trypath;\n    while (p--) {\n      trypath = parts.slice(0, p).join('.');\n      foundschema = schema.path(trypath);\n      if (foundschema) {\n        if (foundschema.caster) {\n          // array of Mixed?\n          if (foundschema.caster instanceof MongooseTypes.Mixed) {\n            return {\n              schema: foundschema,\n              pathType: 'mixed'\n            };\n          }\n\n          // Now that we found the array, we need to check if there\n          // are remaining document paths to look up for casting.\n          // Also we need to handle array.$.path since schema.path\n          // doesn't work for that.\n          // If there is no foundschema.schema we are dealing with\n          // a path like array.$\n          if (p !== parts.length && foundschema.schema) {\n            if (parts[p] === '$' || isArrayFilter(parts[p])) {\n              if (p === parts.length - 1) {\n                return {\n                  schema: foundschema,\n                  pathType: 'nested'\n                };\n              }\n              // comments.$.comments.$.title\n              return search(parts.slice(p + 1), foundschema.schema);\n            }\n            // this is the last path of the selector\n            return search(parts.slice(p), foundschema.schema);\n          }\n          return {\n            schema: foundschema,\n            pathType: foundschema.$isSingleNested ? 'nested' : 'array'\n          };\n        }\n        return {\n          schema: foundschema,\n          pathType: 'real'\n        };\n      } else if (p === parts.length && schema.nested[trypath]) {\n        return {\n          schema: schema,\n          pathType: 'nested'\n        };\n      }\n    }\n    return {\n      schema: foundschema || schema,\n      pathType: 'undefined'\n    };\n  }\n\n  // look for arrays\n  return search(path.split('.'), _this);\n};\n\n/*!\n * ignore\n */\n\nfunction isArrayFilter(piece) {\n  return piece.startsWith('$[') && piece.endsWith(']');\n}\n\n/**\n * Called by `compile()` _right before_ compiling. Good for making any changes to\n * the schema that should respect options set by plugins, like `id`\n * @method _preCompile\n * @memberOf Schema\n * @instance\n * @api private\n */\n\nSchema.prototype._preCompile = function _preCompile() {\n  idGetter(this);\n};\n\n/*!\n * Module exports.\n */\n\nmodule.exports = exports = Schema;\n\n// require down here because of reference issues\n\n/**\n * The various built-in Mongoose Schema Types.\n *\n * #### Example:\n *\n *     const mongoose = require('mongoose');\n *     const ObjectId = mongoose.Schema.Types.ObjectId;\n *\n * #### Types:\n *\n * - [String](https://mongoosejs.com/docs/schematypes.html#strings)\n * - [Number](https://mongoosejs.com/docs/schematypes.html#numbers)\n * - [Boolean](https://mongoosejs.com/docs/schematypes.html#booleans) | Bool\n * - [Array](https://mongoosejs.com/docs/schematypes.html#arrays)\n * - [Buffer](https://mongoosejs.com/docs/schematypes.html#buffers)\n * - [Date](https://mongoosejs.com/docs/schematypes.html#dates)\n * - [ObjectId](https://mongoosejs.com/docs/schematypes.html#objectids) | Oid\n * - [Mixed](https://mongoosejs.com/docs/schematypes.html#mixed)\n * - [UUID](https://mongoosejs.com/docs/schematypes.html#uuid)\n * - [BigInt](https://mongoosejs.com/docs/schematypes.html#bigint)\n *\n * Using this exposed access to the `Mixed` SchemaType, we can use them in our schema.\n *\n *     const Mixed = mongoose.Schema.Types.Mixed;\n *     new mongoose.Schema({ _user: Mixed })\n *\n * @api public\n */\n\nSchema.Types = MongooseTypes = require('./schema/index');\n\n/*!\n * ignore\n */\n\nexports.ObjectId = MongooseTypes.ObjectId;","map":{"version":3,"names":["EventEmitter","require","Kareem","MongooseError","SchemaType","SchemaTypeOptions","VirtualOptions","VirtualType","addAutoId","clone","get","getConstructorName","getIndexes","handleReadPreferenceAliases","idGetter","merge","mpath","setPopulatedVirtualValue","setupTimestamps","utils","validateRef","util","hasNumericSubpathRegex","MongooseTypes","queryHooks","queryMiddlewareFunctions","documentHooks","middlewareFunctions","hookNames","concat","reduce","s","hook","add","Set","isPOJO","id","numberRE","Schema","obj","options","paths","aliases","subpaths","virtuals","singleNestedPaths","nested","inherits","callQueue","_indexes","_searchIndexes","methods","methodOptions","statics","tree","query","childSchemas","plugins","$id","mapPaths","hooks","defaultOptions","Array","isArray","definition","pathNames","Object","keys","pathName","pathOptions","undefined","virtual","set","_idSubDoc","_id","isObject","auto_id","setupTimestamp","timestamps","aliasFields","schema","path","alias","prop","a","Error","p","v","$set","prototype","create","constructor","instanceOfSchema","defineProperty","configurable","enumerable","writable","_clone","on","emit","Constructor","base","_userProvidedOptions","map","f","slice","call","fromEntries","entries","key","value","schemaType","values","$isSingleNested","gatherChildSchemas","$globalPluginsApplied","$isRootDiscriminator","$implicitlyCreated","$originalSchemaId","discriminatorMapping","assign","discriminators","_applyDiscriminators","Map","pick","newSchema","schematype","omit","remove","includes","baseOptions","strict","strictQuery","bufferCommands","capped","versionKey","optimisticConcurrency","minimize","autoIndex","discriminatorKey","shardKey","read","validateBeforeSave","validateModifiedOnly","typeKey","mode","tags","discriminator","name","prefix","specialProperties","has","fullPath","val","TypeError","isMongooseTypeString","Types","upperVal","charAt","toUpperCase","substring","length","type","_typeDef","childSchemaOptions","toObject","toJSON","_schema","schemaWrappedPath","aliasObj","removeIndex","index","arguments","i","isDeepStrictEqual","splice","clearIndexes","searchIndex","description","push","reserved","listeners","removeListener","collection","errors","init","isModified","isNew","populated","save","validate","cleanPath","_pathToPositionalSyntax","_getPath","mapPath","getMapPath","hasMixedParent","test","getPositionalPath","firstPieceOfPath","split","suppressReservedKeysWarning","errorMessage","warn","hasUserDefinedProperty","ref","last","pop","branch","sub","msg","interpretAsType","$isSchemaMap","$__schemaType","caster","model","$isMongooseDocumentArray","casterConstructor","$isMongooseArray","arrayPath","_schemaType","toAdd","$embeddedSchemaType","_arrayPath","_arrayParentPath","$parentSchemaDocArray","hasOwnProperty","replace","_path","re","RegExp","constructorName","getFunctionName","oldObj","Function","Mixed","cast","of","_isMerging","DocumentArray","castFromTypeKey","childSchema","schemaName","Subdocument","Buffer","isBuffer","ObjectId","Decimal128","toString","createMapNestedSchemaType","_mapType","isInlineSchema","subdocumentSchema","eachPath","subpath","select","fn","len","requiredPaths","invalidate","_requiredpaths","ret","isRequired","indexedPaths","_indexedpaths","indexes","pathType","singleNestedPath","getPositionalPathType","self","filter","Boolean","isNested","queue","args","pre","remainingArgs","apply","el","post","plugin","opts","deduplicate","method","static","fields","expires","renameObjKey","field","auto","_propagateOptionsToImplicitlyCreatedSchemas","transform","baseSchema","indexTypes","localField","foreignField","virtualPreInit","_v","$$populatedVirtuals","justOne","count","unset","parts","cur","remnant","join","mem","part","virtualpath","forEach","allKeys","startsWith","_deletePath","pieces","piece","removeVirtual","indexOf","loadClass","virtualsOnly","getPrototypeOf","getOwnPropertyNames","match","getOwnPropertyDescriptor","getters","setters","_getSchema","_this","pathschema","resultPath","$fullPath","search","foundschema","trypath","isArrayFilter","_getPathType","endsWith","_preCompile","module","exports"],"sources":["C:/Users/lrmir/OneDrive/Desktop/cs35L/newFridayz/Fridayz/frontend/node_modules/mongoose/lib/schema.js"],"sourcesContent":["'use strict';\n\n/*!\n * Module dependencies.\n */\n\nconst EventEmitter = require('events').EventEmitter;\nconst Kareem = require('kareem');\nconst MongooseError = require('./error/mongooseError');\nconst SchemaType = require('./schemaType');\nconst SchemaTypeOptions = require('./options/schemaTypeOptions');\nconst VirtualOptions = require('./options/virtualOptions');\nconst VirtualType = require('./virtualType');\nconst addAutoId = require('./helpers/schema/addAutoId');\nconst clone = require('./helpers/clone');\nconst get = require('./helpers/get');\nconst getConstructorName = require('./helpers/getConstructorName');\nconst getIndexes = require('./helpers/schema/getIndexes');\nconst handleReadPreferenceAliases = require('./helpers/query/handleReadPreferenceAliases');\nconst idGetter = require('./helpers/schema/idGetter');\nconst merge = require('./helpers/schema/merge');\nconst mpath = require('mpath');\nconst setPopulatedVirtualValue = require('./helpers/populate/setPopulatedVirtualValue');\nconst setupTimestamps = require('./helpers/timestamps/setupTimestamps');\nconst utils = require('./utils');\nconst validateRef = require('./helpers/populate/validateRef');\nconst util = require('util');\n\nconst hasNumericSubpathRegex = /\\.\\d+(\\.|$)/;\n\nlet MongooseTypes;\n\nconst queryHooks = require('./constants').queryMiddlewareFunctions;\nconst documentHooks = require('./helpers/model/applyHooks').middlewareFunctions;\nconst hookNames = queryHooks.concat(documentHooks).\n  reduce((s, hook) => s.add(hook), new Set());\n\nconst isPOJO = utils.isPOJO;\n\nlet id = 0;\n\nconst numberRE = /^\\d+$/;\n\n/**\n * Schema constructor.\n *\n * #### Example:\n *\n *     const child = new Schema({ name: String });\n *     const schema = new Schema({ name: String, age: Number, children: [child] });\n *     const Tree = mongoose.model('Tree', schema);\n *\n *     // setting schema options\n *     new Schema({ name: String }, { id: false, autoIndex: false })\n *\n * #### Options:\n *\n * - [autoIndex](https://mongoosejs.com/docs/guide.html#autoIndex): bool - defaults to null (which means use the connection's autoIndex option)\n * - [autoCreate](https://mongoosejs.com/docs/guide.html#autoCreate): bool - defaults to null (which means use the connection's autoCreate option)\n * - [bufferCommands](https://mongoosejs.com/docs/guide.html#bufferCommands): bool - defaults to true\n * - [bufferTimeoutMS](https://mongoosejs.com/docs/guide.html#bufferTimeoutMS): number - defaults to 10000 (10 seconds). If `bufferCommands` is enabled, the amount of time Mongoose will wait for connectivity to be restablished before erroring out.\n * - [capped](https://mongoosejs.com/docs/guide.html#capped): bool | number | object - defaults to false\n * - [collection](https://mongoosejs.com/docs/guide.html#collection): string - no default\n * - [discriminatorKey](https://mongoosejs.com/docs/guide.html#discriminatorKey): string - defaults to `__t`\n * - [id](https://mongoosejs.com/docs/guide.html#id): bool - defaults to true\n * - [_id](https://mongoosejs.com/docs/guide.html#_id): bool - defaults to true\n * - [minimize](https://mongoosejs.com/docs/guide.html#minimize): bool - controls [document#toObject](https://mongoosejs.com/docs/api/document.html#Document.prototype.toObject()) behavior when called manually - defaults to true\n * - [read](https://mongoosejs.com/docs/guide.html#read): string\n * - [writeConcern](https://mongoosejs.com/docs/guide.html#writeConcern): object - defaults to null, use to override [the MongoDB server's default write concern settings](https://www.mongodb.com/docs/manual/reference/write-concern/)\n * - [shardKey](https://mongoosejs.com/docs/guide.html#shardKey): object - defaults to `null`\n * - [strict](https://mongoosejs.com/docs/guide.html#strict): bool - defaults to true\n * - [strictQuery](https://mongoosejs.com/docs/guide.html#strictQuery): bool - defaults to false\n * - [toJSON](https://mongoosejs.com/docs/guide.html#toJSON) - object - no default\n * - [toObject](https://mongoosejs.com/docs/guide.html#toObject) - object - no default\n * - [typeKey](https://mongoosejs.com/docs/guide.html#typeKey) - string - defaults to 'type'\n * - [validateBeforeSave](https://mongoosejs.com/docs/guide.html#validateBeforeSave) - bool - defaults to `true`\n * - [validateModifiedOnly](https://mongoosejs.com/docs/api/document.html#Document.prototype.validate()) - bool - defaults to `false`\n * - [versionKey](https://mongoosejs.com/docs/guide.html#versionKey): string or object - defaults to \"__v\"\n * - [optimisticConcurrency](https://mongoosejs.com/docs/guide.html#optimisticConcurrency): bool - defaults to false. Set to true to enable [optimistic concurrency](https://thecodebarbarian.com/whats-new-in-mongoose-5-10-optimistic-concurrency.html).\n * - [collation](https://mongoosejs.com/docs/guide.html#collation): object - defaults to null (which means use no collation)\n * - [timeseries](https://mongoosejs.com/docs/guide.html#timeseries): object - defaults to null (which means this schema's collection won't be a timeseries collection)\n * - [selectPopulatedPaths](https://mongoosejs.com/docs/guide.html#selectPopulatedPaths): boolean - defaults to `true`\n * - [skipVersioning](https://mongoosejs.com/docs/guide.html#skipVersioning): object - paths to exclude from versioning\n * - [timestamps](https://mongoosejs.com/docs/guide.html#timestamps): object or boolean - defaults to `false`. If true, Mongoose adds `createdAt` and `updatedAt` properties to your schema and manages those properties for you.\n * - [pluginTags](https://mongoosejs.com/docs/guide.html#pluginTags): array of strings - defaults to `undefined`. If set and plugin called with `tags` option, will only apply that plugin to schemas with a matching tag.\n * - [virtuals](https://mongoosejs.com/docs/tutorials/virtuals.html#virtuals-via-schema-options): object - virtuals to define, alias for [`.virtual`](https://mongoosejs.com/docs/api/schema.html#Schema.prototype.virtual())\n * - [collectionOptions]: object with options passed to [`createCollection()`](https://www.mongodb.com/docs/manual/reference/method/db.createCollection/) when calling `Model.createCollection()` or `autoCreate` set to true.\n *\n * #### Options for Nested Schemas:\n *\n * - `excludeIndexes`: bool - defaults to `false`. If `true`, skip building indexes on this schema's paths.\n *\n * #### Note:\n *\n * _When nesting schemas, (`children` in the example above), always declare the child schema first before passing it into its parent._\n *\n * @param {Object|Schema|Array} [definition] Can be one of: object describing schema paths, or schema to copy, or array of objects and schemas\n * @param {Object} [options]\n * @inherits NodeJS EventEmitter https://nodejs.org/api/events.html#class-eventemitter\n * @event `init`: Emitted after the schema is compiled into a `Model`.\n * @api public\n */\n\nfunction Schema(obj, options) {\n  if (!(this instanceof Schema)) {\n    return new Schema(obj, options);\n  }\n\n  this.obj = obj;\n  this.paths = {};\n  this.aliases = {};\n  this.subpaths = {};\n  this.virtuals = {};\n  this.singleNestedPaths = {};\n  this.nested = {};\n  this.inherits = {};\n  this.callQueue = [];\n  this._indexes = [];\n  this._searchIndexes = [];\n  this.methods = (options && options.methods) || {};\n  this.methodOptions = {};\n  this.statics = (options && options.statics) || {};\n  this.tree = {};\n  this.query = (options && options.query) || {};\n  this.childSchemas = [];\n  this.plugins = [];\n  // For internal debugging. Do not use this to try to save a schema in MDB.\n  this.$id = ++id;\n  this.mapPaths = [];\n\n  this.s = {\n    hooks: new Kareem()\n  };\n  this.options = this.defaultOptions(options);\n\n  // build paths\n  if (Array.isArray(obj)) {\n    for (const definition of obj) {\n      this.add(definition);\n    }\n  } else if (obj) {\n    this.add(obj);\n  }\n\n  // build virtual paths\n  if (options && options.virtuals) {\n    const virtuals = options.virtuals;\n    const pathNames = Object.keys(virtuals);\n    for (const pathName of pathNames) {\n      const pathOptions = virtuals[pathName].options ? virtuals[pathName].options : undefined;\n      const virtual = this.virtual(pathName, pathOptions);\n\n      if (virtuals[pathName].get) {\n        virtual.get(virtuals[pathName].get);\n      }\n\n      if (virtuals[pathName].set) {\n        virtual.set(virtuals[pathName].set);\n      }\n    }\n  }\n\n  // check if _id's value is a subdocument (gh-2276)\n  const _idSubDoc = obj && obj._id && utils.isObject(obj._id);\n\n  // ensure the documents get an auto _id unless disabled\n  const auto_id = !this.paths['_id'] &&\n      (this.options._id) && !_idSubDoc;\n\n  if (auto_id) {\n    addAutoId(this);\n  }\n\n  this.setupTimestamp(this.options.timestamps);\n}\n\n/**\n * Create virtual properties with alias field\n * @api private\n */\nfunction aliasFields(schema, paths) {\n  for (const path of Object.keys(paths)) {\n    let alias = null;\n    if (paths[path] != null) {\n      alias = paths[path];\n    } else {\n      const options = get(schema.paths[path], 'options');\n      if (options == null) {\n        continue;\n      }\n\n      alias = options.alias;\n    }\n\n    if (!alias) {\n      continue;\n    }\n\n    const prop = schema.paths[path].path;\n    if (Array.isArray(alias)) {\n      for (const a of alias) {\n        if (typeof a !== 'string') {\n          throw new Error('Invalid value for alias option on ' + prop + ', got ' + a);\n        }\n\n        schema.aliases[a] = prop;\n\n        schema.\n          virtual(a).\n          get((function(p) {\n            return function() {\n              if (typeof this.get === 'function') {\n                return this.get(p);\n              }\n              return this[p];\n            };\n          })(prop)).\n          set((function(p) {\n            return function(v) {\n              return this.$set(p, v);\n            };\n          })(prop));\n      }\n\n      continue;\n    }\n\n    if (typeof alias !== 'string') {\n      throw new Error('Invalid value for alias option on ' + prop + ', got ' + alias);\n    }\n\n    schema.aliases[alias] = prop;\n\n    schema.\n      virtual(alias).\n      get((function(p) {\n        return function() {\n          if (typeof this.get === 'function') {\n            return this.get(p);\n          }\n          return this[p];\n        };\n      })(prop)).\n      set((function(p) {\n        return function(v) {\n          return this.$set(p, v);\n        };\n      })(prop));\n  }\n}\n\n/*!\n * Inherit from EventEmitter.\n */\nSchema.prototype = Object.create(EventEmitter.prototype);\nSchema.prototype.constructor = Schema;\nSchema.prototype.instanceOfSchema = true;\n\n/*!\n * ignore\n */\n\nObject.defineProperty(Schema.prototype, '$schemaType', {\n  configurable: false,\n  enumerable: false,\n  writable: true\n});\n\n/**\n * Array of child schemas (from document arrays and single nested subdocs)\n * and their corresponding compiled models. Each element of the array is\n * an object with 2 properties: `schema` and `model`.\n *\n * This property is typically only useful for plugin authors and advanced users.\n * You do not need to interact with this property at all to use mongoose.\n *\n * @api public\n * @property childSchemas\n * @memberOf Schema\n * @instance\n */\n\nObject.defineProperty(Schema.prototype, 'childSchemas', {\n  configurable: false,\n  enumerable: true,\n  writable: true\n});\n\n/**\n * Object containing all virtuals defined on this schema.\n * The objects' keys are the virtual paths and values are instances of `VirtualType`.\n *\n * This property is typically only useful for plugin authors and advanced users.\n * You do not need to interact with this property at all to use mongoose.\n *\n * #### Example:\n *\n *     const schema = new Schema({});\n *     schema.virtual('answer').get(() => 42);\n *\n *     console.log(schema.virtuals); // { answer: VirtualType { path: 'answer', ... } }\n *     console.log(schema.virtuals['answer'].getters[0].call()); // 42\n *\n * @api public\n * @property virtuals\n * @memberOf Schema\n * @instance\n */\n\nObject.defineProperty(Schema.prototype, 'virtuals', {\n  configurable: false,\n  enumerable: true,\n  writable: true\n});\n\n/**\n * The original object passed to the schema constructor\n *\n * #### Example:\n *\n *     const schema = new Schema({ a: String }).add({ b: String });\n *     schema.obj; // { a: String }\n *\n * @api public\n * @property obj\n * @memberOf Schema\n * @instance\n */\n\nSchema.prototype.obj;\n\n/**\n * The paths defined on this schema. The keys are the top-level paths\n * in this schema, and the values are instances of the SchemaType class.\n *\n * #### Example:\n *\n *     const schema = new Schema({ name: String }, { _id: false });\n *     schema.paths; // { name: SchemaString { ... } }\n *\n *     schema.add({ age: Number });\n *     schema.paths; // { name: SchemaString { ... }, age: SchemaNumber { ... } }\n *\n * @api public\n * @property paths\n * @memberOf Schema\n * @instance\n */\n\nSchema.prototype.paths;\n\n/**\n * Schema as a tree\n *\n * #### Example:\n *\n *     {\n *         '_id'     : ObjectId\n *       , 'nested'  : {\n *             'key' : String\n *         }\n *     }\n *\n * @api private\n * @property tree\n * @memberOf Schema\n * @instance\n */\n\nSchema.prototype.tree;\n\n/**\n * Returns a deep copy of the schema\n *\n * #### Example:\n *\n *     const schema = new Schema({ name: String });\n *     const clone = schema.clone();\n *     clone === schema; // false\n *     clone.path('name'); // SchemaString { ... }\n *\n * @return {Schema} the cloned schema\n * @api public\n * @memberOf Schema\n * @instance\n */\n\nSchema.prototype.clone = function() {\n  const s = this._clone();\n\n  // Bubble up `init` for backwards compat\n  s.on('init', v => this.emit('init', v));\n\n  return s;\n};\n\n/*!\n * ignore\n */\n\nSchema.prototype._clone = function _clone(Constructor) {\n  Constructor = Constructor || (this.base == null ? Schema : this.base.Schema);\n\n  const s = new Constructor({}, this._userProvidedOptions);\n  s.base = this.base;\n  s.obj = this.obj;\n  s.options = clone(this.options);\n  s.callQueue = this.callQueue.map(function(f) { return f; });\n  s.methods = clone(this.methods);\n  s.methodOptions = clone(this.methodOptions);\n  s.statics = clone(this.statics);\n  s.query = clone(this.query);\n  s.plugins = Array.prototype.slice.call(this.plugins);\n  s._indexes = clone(this._indexes);\n  s._searchIndexes = clone(this._searchIndexes);\n  s.s.hooks = this.s.hooks.clone();\n\n  s.tree = clone(this.tree);\n  s.paths = Object.fromEntries(\n    Object.entries(this.paths).map(([key, value]) => ([key, value.clone()]))\n  );\n  s.nested = clone(this.nested);\n  s.subpaths = clone(this.subpaths);\n  for (const schemaType of Object.values(s.paths)) {\n    if (schemaType.$isSingleNested) {\n      const path = schemaType.path;\n      for (const key of Object.keys(schemaType.schema.paths)) {\n        s.singleNestedPaths[path + '.' + key] = schemaType.schema.paths[key];\n      }\n      for (const key of Object.keys(schemaType.schema.singleNestedPaths)) {\n        s.singleNestedPaths[path + '.' + key] =\n          schemaType.schema.singleNestedPaths[key];\n      }\n      for (const key of Object.keys(schemaType.schema.subpaths)) {\n        s.singleNestedPaths[path + '.' + key] =\n          schemaType.schema.subpaths[key];\n      }\n      for (const key of Object.keys(schemaType.schema.nested)) {\n        s.singleNestedPaths[path + '.' + key] = 'nested';\n      }\n    }\n  }\n  s.childSchemas = gatherChildSchemas(s);\n\n  s.virtuals = clone(this.virtuals);\n  s.$globalPluginsApplied = this.$globalPluginsApplied;\n  s.$isRootDiscriminator = this.$isRootDiscriminator;\n  s.$implicitlyCreated = this.$implicitlyCreated;\n  s.$id = ++id;\n  s.$originalSchemaId = this.$id;\n  s.mapPaths = [].concat(this.mapPaths);\n\n  if (this.discriminatorMapping != null) {\n    s.discriminatorMapping = Object.assign({}, this.discriminatorMapping);\n  }\n  if (this.discriminators != null) {\n    s.discriminators = Object.assign({}, this.discriminators);\n  }\n  if (this._applyDiscriminators != null) {\n    s._applyDiscriminators = new Map(this._applyDiscriminators);\n  }\n\n  s.aliases = Object.assign({}, this.aliases);\n\n  return s;\n};\n\n/**\n * Returns a new schema that has the picked `paths` from this schema.\n *\n * This method is analagous to [Lodash's `pick()` function](https://lodash.com/docs/4.17.15#pick) for Mongoose schemas.\n *\n * #### Example:\n *\n *     const schema = Schema({ name: String, age: Number });\n *     // Creates a new schema with the same `name` path as `schema`,\n *     // but no `age` path.\n *     const newSchema = schema.pick(['name']);\n *\n *     newSchema.path('name'); // SchemaString { ... }\n *     newSchema.path('age'); // undefined\n *\n * @param {String[]} paths List of Paths to pick for the new Schema\n * @param {Object} [options] Options to pass to the new Schema Constructor (same as `new Schema(.., Options)`). Defaults to `this.options` if not set.\n * @return {Schema}\n * @api public\n */\n\nSchema.prototype.pick = function(paths, options) {\n  const newSchema = new Schema({}, options || this.options);\n  if (!Array.isArray(paths)) {\n    throw new MongooseError('Schema#pick() only accepts an array argument, ' +\n      'got \"' + typeof paths + '\"');\n  }\n\n  for (const path of paths) {\n    if (this.nested[path]) {\n      newSchema.add({ [path]: get(this.tree, path) });\n    } else {\n      const schematype = this.path(path);\n      if (schematype == null) {\n        throw new MongooseError('Path `' + path + '` is not in the schema');\n      }\n      newSchema.add({ [path]: schematype });\n    }\n  }\n\n  return newSchema;\n};\n\n/**\n * Returns a new schema that has the `paths` from the original schema, minus the omitted ones.\n *\n * This method is analagous to [Lodash's `omit()` function](https://lodash.com/docs/#omit) for Mongoose schemas.\n *\n * #### Example:\n *\n *     const schema = Schema({ name: String, age: Number });\n *     // Creates a new schema omitting the `age` path\n *     const newSchema = schema.omit(['age']);\n *\n *     newSchema.path('name'); // SchemaString { ... }\n *     newSchema.path('age'); // undefined\n *\n * @param {String[]} paths List of Paths to omit for the new Schema\n * @param {Object} [options] Options to pass to the new Schema Constructor (same as `new Schema(.., Options)`). Defaults to `this.options` if not set.\n * @return {Schema}\n * @api public\n */\n\nSchema.prototype.omit = function(paths, options) {\n  const newSchema = new Schema(this, options || this.options);\n  if (!Array.isArray(paths)) {\n    throw new MongooseError(\n      'Schema#omit() only accepts an array argument, ' +\n        'got \"' +\n        typeof paths +\n        '\"'\n    );\n  }\n\n  newSchema.remove(paths);\n\n  for (const nested in newSchema.singleNestedPaths) {\n    if (paths.includes(nested)) {\n      delete newSchema.singleNestedPaths[nested];\n    }\n  }\n\n  return newSchema;\n};\n\n/**\n * Returns default options for this schema, merged with `options`.\n *\n * @param {Object} [options] Options to overwrite the default options\n * @return {Object} The merged options of `options` and the default options\n * @api private\n */\n\nSchema.prototype.defaultOptions = function(options) {\n  this._userProvidedOptions = options == null ? {} : clone(options);\n  const baseOptions = this.base && this.base.options || {};\n  const strict = 'strict' in baseOptions ? baseOptions.strict : true;\n  const strictQuery = 'strictQuery' in baseOptions ? baseOptions.strictQuery : false;\n  const id = 'id' in baseOptions ? baseOptions.id : true;\n  options = {\n    strict,\n    strictQuery,\n    bufferCommands: true,\n    capped: false, // { size, max, autoIndexId }\n    versionKey: '__v',\n    optimisticConcurrency: false,\n    minimize: true,\n    autoIndex: null,\n    discriminatorKey: '__t',\n    shardKey: null,\n    read: null,\n    validateBeforeSave: true,\n    validateModifiedOnly: false,\n    // the following are only applied at construction time\n    _id: true,\n    id: id,\n    typeKey: 'type',\n    ...options\n  };\n\n  if (options.versionKey && typeof options.versionKey !== 'string') {\n    throw new MongooseError('`versionKey` must be falsy or string, got `' + (typeof options.versionKey) + '`');\n  }\n\n  if (typeof options.read === 'string') {\n    options.read = handleReadPreferenceAliases(options.read);\n  } else if (Array.isArray(options.read) && typeof options.read[0] === 'string') {\n    options.read = {\n      mode: handleReadPreferenceAliases(options.read[0]),\n      tags: options.read[1]\n    };\n  }\n\n  if (options.optimisticConcurrency && !options.versionKey) {\n    throw new MongooseError('Must set `versionKey` if using `optimisticConcurrency`');\n  }\n\n  return options;\n};\n\n/**\n * Inherit a Schema by applying a discriminator on an existing Schema.\n *\n *\n * #### Example:\n *\n *     const eventSchema = new mongoose.Schema({ timestamp: Date }, { discriminatorKey: 'kind' });\n *\n *     const clickedEventSchema = new mongoose.Schema({ element: String }, { discriminatorKey: 'kind' });\n *     const ClickedModel = eventSchema.discriminator('clicked', clickedEventSchema);\n *\n *     const Event = mongoose.model('Event', eventSchema);\n *\n *     Event.discriminators['clicked']; // Model { clicked }\n *\n *     const doc = await Event.create({ kind: 'clicked', element: '#hero' });\n *     doc.element; // '#hero'\n *     doc instanceof ClickedModel; // true\n *\n * @param {String} name the name of the discriminator\n * @param {Schema} schema the discriminated Schema\n * @return {Schema} the Schema instance\n * @api public\n */\nSchema.prototype.discriminator = function(name, schema) {\n  this._applyDiscriminators = this._applyDiscriminators || new Map();\n  this._applyDiscriminators.set(name, schema);\n\n  return this;\n};\n\n/**\n * Adds key path / schema type pairs to this schema.\n *\n * #### Example:\n *\n *     const ToySchema = new Schema();\n *     ToySchema.add({ name: 'string', color: 'string', price: 'number' });\n *\n *     const TurboManSchema = new Schema();\n *     // You can also `add()` another schema and copy over all paths, virtuals,\n *     // getters, setters, indexes, methods, and statics.\n *     TurboManSchema.add(ToySchema).add({ year: Number });\n *\n * @param {Object|Schema} obj plain object with paths to add, or another schema\n * @param {String} [prefix] path to prefix the newly added paths with\n * @return {Schema} the Schema instance\n * @api public\n */\n\nSchema.prototype.add = function add(obj, prefix) {\n  if (obj instanceof Schema || (obj != null && obj.instanceOfSchema)) {\n    merge(this, obj);\n\n    return this;\n  }\n\n  // Special case: setting top-level `_id` to false should convert to disabling\n  // the `_id` option. This behavior never worked before 5.4.11 but numerous\n  // codebases use it (see gh-7516, gh-7512).\n  if (obj._id === false && prefix == null) {\n    this.options._id = false;\n  }\n\n  prefix = prefix || '';\n  // avoid prototype pollution\n  if (prefix === '__proto__.' || prefix === 'constructor.' || prefix === 'prototype.') {\n    return this;\n  }\n\n  const keys = Object.keys(obj);\n  const typeKey = this.options.typeKey;\n  for (const key of keys) {\n    if (utils.specialProperties.has(key)) {\n      continue;\n    }\n\n    const fullPath = prefix + key;\n    const val = obj[key];\n\n    if (val == null) {\n      throw new TypeError('Invalid value for schema path `' + fullPath +\n        '`, got value \"' + val + '\"');\n    }\n    // Retain `_id: false` but don't set it as a path, re: gh-8274.\n    if (key === '_id' && val === false) {\n      continue;\n    }\n    // Deprecate setting schema paths to primitive types (gh-7558)\n    let isMongooseTypeString = false;\n    if (typeof val === 'string') {\n      // Handle the case in which the type is specified as a string (eg. 'date', 'oid', ...)\n      const MongooseTypes = this.base != null ? this.base.Schema.Types : Schema.Types;\n      const upperVal = val.charAt(0).toUpperCase() + val.substring(1);\n      isMongooseTypeString = MongooseTypes[upperVal] != null;\n    }\n    if (\n      key !== '_id' &&\n      ((typeof val !== 'object' && typeof val !== 'function' && !isMongooseTypeString) ||\n      val == null)\n    ) {\n      throw new TypeError(`Invalid schema configuration: \\`${val}\\` is not ` +\n        `a valid type at path \\`${key}\\`. See ` +\n        'https://bit.ly/mongoose-schematypes for a list of valid schema types.');\n    }\n    if (val instanceof VirtualType || (val.constructor && val.constructor.name || null) === 'VirtualType') {\n      this.virtual(val);\n      continue;\n    }\n\n    if (Array.isArray(val) && val.length === 1 && val[0] == null) {\n      throw new TypeError('Invalid value for schema Array path `' + fullPath +\n        '`, got value \"' + val[0] + '\"');\n    }\n\n    if (!(isPOJO(val) || val instanceof SchemaTypeOptions)) {\n      // Special-case: Non-options definitely a path so leaf at this node\n      // Examples: Schema instances, SchemaType instances\n      if (prefix) {\n        this.nested[prefix.substring(0, prefix.length - 1)] = true;\n      }\n      this.path(prefix + key, val);\n      if (val[0] != null && !(val[0].instanceOfSchema) && utils.isPOJO(val[0].discriminators)) {\n        const schemaType = this.path(prefix + key);\n        for (const key in val[0].discriminators) {\n          schemaType.discriminator(key, val[0].discriminators[key]);\n        }\n      }\n    } else if (Object.keys(val).length < 1) {\n      // Special-case: {} always interpreted as Mixed path so leaf at this node\n      if (prefix) {\n        this.nested[prefix.substring(0, prefix.length - 1)] = true;\n      }\n      this.path(fullPath, val); // mixed type\n    } else if (!val[typeKey] || (typeKey === 'type' && isPOJO(val.type) && val.type.type)) {\n      // Special-case: POJO with no bona-fide type key - interpret as tree of deep paths so recurse\n      // nested object `{ last: { name: String } }`. Avoid functions with `.type` re: #10807 because\n      // NestJS sometimes adds `Date.type`.\n      this.nested[fullPath] = true;\n      this.add(val, fullPath + '.');\n    } else {\n      // There IS a bona-fide type key that may also be a POJO\n      const _typeDef = val[typeKey];\n      if (isPOJO(_typeDef) && Object.keys(_typeDef).length > 0) {\n        // If a POJO is the value of a type key, make it a subdocument\n        if (prefix) {\n          this.nested[prefix.substring(0, prefix.length - 1)] = true;\n        }\n\n        const childSchemaOptions = {};\n        if (this._userProvidedOptions.typeKey) {\n          childSchemaOptions.typeKey = this._userProvidedOptions.typeKey;\n        }\n        // propagate 'strict' option to child schema\n        if (this._userProvidedOptions.strict != null) {\n          childSchemaOptions.strict = this._userProvidedOptions.strict;\n        }\n        if (this._userProvidedOptions.toObject != null) {\n          childSchemaOptions.toObject = utils.omit(this._userProvidedOptions.toObject, ['transform']);\n        }\n        if (this._userProvidedOptions.toJSON != null) {\n          childSchemaOptions.toJSON = utils.omit(this._userProvidedOptions.toJSON, ['transform']);\n        }\n\n        const _schema = new Schema(_typeDef, childSchemaOptions);\n        _schema.$implicitlyCreated = true;\n        const schemaWrappedPath = Object.assign({}, val, { [typeKey]: _schema });\n        this.path(prefix + key, schemaWrappedPath);\n      } else {\n        // Either the type is non-POJO or we interpret it as Mixed anyway\n        if (prefix) {\n          this.nested[prefix.substring(0, prefix.length - 1)] = true;\n        }\n        this.path(prefix + key, val);\n        if (val != null && !(val.instanceOfSchema) && utils.isPOJO(val.discriminators)) {\n          const schemaType = this.path(prefix + key);\n          for (const key in val.discriminators) {\n            schemaType.discriminator(key, val.discriminators[key]);\n          }\n        }\n      }\n    }\n  }\n\n  const aliasObj = Object.fromEntries(\n    Object.entries(obj).map(([key]) => ([prefix + key, null]))\n  );\n  aliasFields(this, aliasObj);\n  return this;\n};\n\n/**\n * Add an alias for `path`. This means getting or setting the `alias`\n * is equivalent to getting or setting the `path`.\n *\n * #### Example:\n *\n *     const toySchema = new Schema({ n: String });\n *\n *     // Make 'name' an alias for 'n'\n *     toySchema.alias('n', 'name');\n *\n *     const Toy = mongoose.model('Toy', toySchema);\n *     const turboMan = new Toy({ n: 'Turbo Man' });\n *\n *     turboMan.name; // 'Turbo Man'\n *     turboMan.n; // 'Turbo Man'\n *\n *     turboMan.name = 'Turbo Man Action Figure';\n *     turboMan.n; // 'Turbo Man Action Figure'\n *\n *     await turboMan.save(); // Saves { _id: ..., n: 'Turbo Man Action Figure' }\n *\n *\n * @param {String} path real path to alias\n * @param {String|String[]} alias the path(s) to use as an alias for `path`\n * @return {Schema} the Schema instance\n * @api public\n */\n\nSchema.prototype.alias = function alias(path, alias) {\n  aliasFields(this, { [path]: alias });\n  return this;\n};\n\n/**\n * Remove an index by name or index specification.\n *\n * removeIndex only removes indexes from your schema object. Does **not** affect the indexes\n * in MongoDB.\n *\n * #### Example:\n *\n *     const ToySchema = new Schema({ name: String, color: String, price: Number });\n *\n *     // Add a new index on { name, color }\n *     ToySchema.index({ name: 1, color: 1 });\n *\n *     // Remove index on { name, color }\n *     // Keep in mind that order matters! `removeIndex({ color: 1, name: 1 })` won't remove the index\n *     ToySchema.removeIndex({ name: 1, color: 1 });\n *\n *     // Add an index with a custom name\n *     ToySchema.index({ color: 1 }, { name: 'my custom index name' });\n *     // Remove index by name\n *     ToySchema.removeIndex('my custom index name');\n *\n * @param {Object|string} index name or index specification\n * @return {Schema} the Schema instance\n * @api public\n */\n\nSchema.prototype.removeIndex = function removeIndex(index) {\n  if (arguments.length > 1) {\n    throw new Error('removeIndex() takes only 1 argument');\n  }\n\n  if (typeof index !== 'object' && typeof index !== 'string') {\n    throw new Error('removeIndex() may only take either an object or a string as an argument');\n  }\n\n  if (typeof index === 'object') {\n    for (let i = this._indexes.length - 1; i >= 0; --i) {\n      if (util.isDeepStrictEqual(this._indexes[i][0], index)) {\n        this._indexes.splice(i, 1);\n      }\n    }\n  } else {\n    for (let i = this._indexes.length - 1; i >= 0; --i) {\n      if (this._indexes[i][1] != null && this._indexes[i][1].name === index) {\n        this._indexes.splice(i, 1);\n      }\n    }\n  }\n\n  return this;\n};\n\n/**\n * Remove all indexes from this schema.\n *\n * clearIndexes only removes indexes from your schema object. Does **not** affect the indexes\n * in MongoDB.\n *\n * #### Example:\n *\n *     const ToySchema = new Schema({ name: String, color: String, price: Number });\n *     ToySchema.index({ name: 1 });\n *     ToySchema.index({ color: 1 });\n *\n *     // Remove all indexes on this schema\n *     ToySchema.clearIndexes();\n *\n *     ToySchema.indexes(); // []\n *\n * @return {Schema} the Schema instance\n * @api public\n */\n\nSchema.prototype.clearIndexes = function clearIndexes() {\n  this._indexes.length = 0;\n\n  return this;\n};\n\n/**\n * Add an [Atlas search index](https://www.mongodb.com/docs/atlas/atlas-search/create-index/) that Mongoose will create using `Model.createSearchIndex()`.\n * This function only works when connected to MongoDB Atlas.\n *\n * #### Example:\n *\n *     const ToySchema = new Schema({ name: String, color: String, price: Number });\n *     ToySchema.searchIndex({ name: 'test', definition: { mappings: { dynamic: true } } });\n *\n * @param {Object} description index options, including `name` and `definition`\n * @param {String} description.name\n * @param {Object} description.definition\n * @return {Schema} the Schema instance\n * @api public\n */\n\nSchema.prototype.searchIndex = function searchIndex(description) {\n  this._searchIndexes.push(description);\n\n  return this;\n};\n\n/**\n * Reserved document keys.\n *\n * Keys in this object are names that are warned in schema declarations\n * because they have the potential to break Mongoose/ Mongoose plugins functionality. If you create a schema\n * using `new Schema()` with one of these property names, Mongoose will log a warning.\n *\n * - _posts\n * - _pres\n * - collection\n  * - emit\n * - errors\n * - get\n * - init\n * - isModified\n * - isNew\n * - listeners\n * - modelName\n * - on\n * - once\n * - populated\n * - prototype\n * - remove\n * - removeListener\n * - save\n * - schema\n * - toObject\n * - validate\n *\n * _NOTE:_ Use of these terms as method names is permitted, but play at your own risk, as they may be existing mongoose document methods you are stomping on.\n *\n *      const schema = new Schema(..);\n *      schema.methods.init = function () {} // potentially breaking\n *\n * @property reserved\n * @memberOf Schema\n * @static\n */\n\nSchema.reserved = Object.create(null);\nSchema.prototype.reserved = Schema.reserved;\n\nconst reserved = Schema.reserved;\n// Core object\nreserved['prototype'] =\n// EventEmitter\nreserved.emit =\nreserved.listeners =\nreserved.removeListener =\n\n// document properties and functions\nreserved.collection =\nreserved.errors =\nreserved.get =\nreserved.init =\nreserved.isModified =\nreserved.isNew =\nreserved.populated =\nreserved.remove =\nreserved.save =\nreserved.toObject =\nreserved.validate = 1;\nreserved.collection = 1;\n\n/**\n * Gets/sets schema paths.\n *\n * Sets a path (if arity 2)\n * Gets a path (if arity 1)\n *\n * #### Example:\n *\n *     schema.path('name') // returns a SchemaType\n *     schema.path('name', Number) // changes the schemaType of `name` to Number\n *\n * @param {String} path The name of the Path to get / set\n * @param {Object} [obj] The Type to set the path to, if provided the path will be SET, otherwise the path will be GET\n * @api public\n */\n\nSchema.prototype.path = function(path, obj) {\n  if (obj === undefined) {\n    // Convert to '.$' to check subpaths re: gh-6405\n    const cleanPath = _pathToPositionalSyntax(path);\n    let schematype = _getPath(this, path, cleanPath);\n    if (schematype != null) {\n      return schematype;\n    }\n\n    // Look for maps\n    const mapPath = getMapPath(this, path);\n    if (mapPath != null) {\n      return mapPath;\n    }\n\n    // Look if a parent of this path is mixed\n    schematype = this.hasMixedParent(cleanPath);\n    if (schematype != null) {\n      return schematype;\n    }\n\n    // subpaths?\n    return hasNumericSubpathRegex.test(path)\n      ? getPositionalPath(this, path, cleanPath)\n      : undefined;\n  }\n\n  // some path names conflict with document methods\n  const firstPieceOfPath = path.split('.')[0];\n  if (reserved[firstPieceOfPath] && !this.options.suppressReservedKeysWarning) {\n    const errorMessage = `\\`${firstPieceOfPath}\\` is a reserved schema pathname and may break some functionality. ` +\n      'You are allowed to use it, but use at your own risk. ' +\n      'To disable this warning pass `suppressReservedKeysWarning` as a schema option.';\n\n    utils.warn(errorMessage);\n  }\n\n  if (typeof obj === 'object' && utils.hasUserDefinedProperty(obj, 'ref')) {\n    validateRef(obj.ref, path);\n  }\n\n  // update the tree\n  const subpaths = path.split(/\\./);\n  const last = subpaths.pop();\n  let branch = this.tree;\n  let fullPath = '';\n\n  for (const sub of subpaths) {\n    if (utils.specialProperties.has(sub)) {\n      throw new Error('Cannot set special property `' + sub + '` on a schema');\n    }\n    fullPath = fullPath += (fullPath.length > 0 ? '.' : '') + sub;\n    if (!branch[sub]) {\n      this.nested[fullPath] = true;\n      branch[sub] = {};\n    }\n    if (typeof branch[sub] !== 'object') {\n      const msg = 'Cannot set nested path `' + path + '`. '\n          + 'Parent path `'\n          + fullPath\n          + '` already set to type ' + branch[sub].name\n          + '.';\n      throw new Error(msg);\n    }\n    branch = branch[sub];\n  }\n\n  branch[last] = clone(obj);\n\n  this.paths[path] = this.interpretAsType(path, obj, this.options);\n  const schemaType = this.paths[path];\n\n  if (schemaType.$isSchemaMap) {\n    // Maps can have arbitrary keys, so `$*` is internal shorthand for \"any key\"\n    // The '$' is to imply this path should never be stored in MongoDB so we\n    // can easily build a regexp out of this path, and '*' to imply \"any key.\"\n    const mapPath = path + '.$*';\n\n    this.paths[mapPath] = schemaType.$__schemaType;\n    this.mapPaths.push(this.paths[mapPath]);\n  }\n\n  if (schemaType.$isSingleNested) {\n    for (const key of Object.keys(schemaType.schema.paths)) {\n      this.singleNestedPaths[path + '.' + key] = schemaType.schema.paths[key];\n    }\n    for (const key of Object.keys(schemaType.schema.singleNestedPaths)) {\n      this.singleNestedPaths[path + '.' + key] =\n        schemaType.schema.singleNestedPaths[key];\n    }\n    for (const key of Object.keys(schemaType.schema.subpaths)) {\n      this.singleNestedPaths[path + '.' + key] =\n        schemaType.schema.subpaths[key];\n    }\n    for (const key of Object.keys(schemaType.schema.nested)) {\n      this.singleNestedPaths[path + '.' + key] = 'nested';\n    }\n\n    Object.defineProperty(schemaType.schema, 'base', {\n      configurable: true,\n      enumerable: false,\n      writable: false,\n      value: this.base\n    });\n\n    schemaType.caster.base = this.base;\n    this.childSchemas.push({\n      schema: schemaType.schema,\n      model: schemaType.caster\n    });\n  } else if (schemaType.$isMongooseDocumentArray) {\n    Object.defineProperty(schemaType.schema, 'base', {\n      configurable: true,\n      enumerable: false,\n      writable: false,\n      value: this.base\n    });\n\n    schemaType.casterConstructor.base = this.base;\n    this.childSchemas.push({\n      schema: schemaType.schema,\n      model: schemaType.casterConstructor\n    });\n  }\n\n  if (schemaType.$isMongooseArray && schemaType.caster instanceof SchemaType) {\n    let arrayPath = path;\n    let _schemaType = schemaType;\n\n    const toAdd = [];\n    while (_schemaType.$isMongooseArray) {\n      arrayPath = arrayPath + '.$';\n\n      // Skip arrays of document arrays\n      if (_schemaType.$isMongooseDocumentArray) {\n        _schemaType.$embeddedSchemaType._arrayPath = arrayPath;\n        _schemaType.$embeddedSchemaType._arrayParentPath = path;\n        _schemaType = _schemaType.$embeddedSchemaType;\n      } else {\n        _schemaType.caster._arrayPath = arrayPath;\n        _schemaType.caster._arrayParentPath = path;\n        _schemaType = _schemaType.caster;\n      }\n\n      this.subpaths[arrayPath] = _schemaType;\n    }\n\n    for (const _schemaType of toAdd) {\n      this.subpaths[_schemaType.path] = _schemaType;\n    }\n  }\n\n  if (schemaType.$isMongooseDocumentArray) {\n    for (const key of Object.keys(schemaType.schema.paths)) {\n      const _schemaType = schemaType.schema.paths[key];\n      this.subpaths[path + '.' + key] = _schemaType;\n      if (typeof _schemaType === 'object' && _schemaType != null && _schemaType.$parentSchemaDocArray == null) {\n        _schemaType.$parentSchemaDocArray = schemaType;\n      }\n    }\n    for (const key of Object.keys(schemaType.schema.subpaths)) {\n      const _schemaType = schemaType.schema.subpaths[key];\n      this.subpaths[path + '.' + key] = _schemaType;\n      if (typeof _schemaType === 'object' && _schemaType != null && _schemaType.$parentSchemaDocArray == null) {\n        _schemaType.$parentSchemaDocArray = schemaType;\n      }\n    }\n    for (const key of Object.keys(schemaType.schema.singleNestedPaths)) {\n      const _schemaType = schemaType.schema.singleNestedPaths[key];\n      this.subpaths[path + '.' + key] = _schemaType;\n      if (typeof _schemaType === 'object' && _schemaType != null && _schemaType.$parentSchemaDocArray == null) {\n        _schemaType.$parentSchemaDocArray = schemaType;\n      }\n    }\n  }\n\n  return this;\n};\n\n/*!\n * ignore\n */\n\nfunction gatherChildSchemas(schema) {\n  const childSchemas = [];\n\n  for (const path of Object.keys(schema.paths)) {\n    const schematype = schema.paths[path];\n    if (schematype.$isMongooseDocumentArray || schematype.$isSingleNested) {\n      childSchemas.push({ schema: schematype.schema, model: schematype.caster });\n    }\n  }\n\n  return childSchemas;\n}\n\n/*!\n * ignore\n */\n\nfunction _getPath(schema, path, cleanPath) {\n  if (schema.paths.hasOwnProperty(path)) {\n    return schema.paths[path];\n  }\n  if (schema.subpaths.hasOwnProperty(cleanPath)) {\n    return schema.subpaths[cleanPath];\n  }\n  if (schema.singleNestedPaths.hasOwnProperty(cleanPath) && typeof schema.singleNestedPaths[cleanPath] === 'object') {\n    return schema.singleNestedPaths[cleanPath];\n  }\n\n  return null;\n}\n\n/*!\n * ignore\n */\n\nfunction _pathToPositionalSyntax(path) {\n  if (!/\\.\\d+/.test(path)) {\n    return path;\n  }\n  return path.replace(/\\.\\d+\\./g, '.$.').replace(/\\.\\d+$/, '.$');\n}\n\n/*!\n * ignore\n */\n\nfunction getMapPath(schema, path) {\n  if (schema.mapPaths.length === 0) {\n    return null;\n  }\n  for (const val of schema.mapPaths) {\n    const _path = val.path;\n    const re = new RegExp('^' + _path.replace(/\\.\\$\\*/g, '\\\\.[^.]+') + '$');\n    if (re.test(path)) {\n      return schema.paths[_path];\n    }\n  }\n\n  return null;\n}\n\n/**\n * The Mongoose instance this schema is associated with\n *\n * @property base\n * @api private\n */\n\nObject.defineProperty(Schema.prototype, 'base', {\n  configurable: true,\n  enumerable: false,\n  writable: true,\n  value: null\n});\n\n/**\n * Converts type arguments into Mongoose Types.\n *\n * @param {String} path\n * @param {Object} obj constructor\n * @param {Object} options\n * @api private\n */\n\nSchema.prototype.interpretAsType = function(path, obj, options) {\n  if (obj instanceof SchemaType) {\n    if (obj.path === path) {\n      return obj;\n    }\n    const clone = obj.clone();\n    clone.path = path;\n    return clone;\n  }\n\n  // If this schema has an associated Mongoose object, use the Mongoose object's\n  // copy of SchemaTypes re: gh-7158 gh-6933\n  const MongooseTypes = this.base != null ? this.base.Schema.Types : Schema.Types;\n  const Types = this.base != null ? this.base.Types : require('./types');\n\n  if (!utils.isPOJO(obj) && !(obj instanceof SchemaTypeOptions)) {\n    const constructorName = utils.getFunctionName(obj.constructor);\n    if (constructorName !== 'Object') {\n      const oldObj = obj;\n      obj = {};\n      obj[options.typeKey] = oldObj;\n    }\n  }\n\n  // Get the type making sure to allow keys named \"type\"\n  // and default to mixed if not specified.\n  // { type: { type: String, default: 'freshcut' } }\n  let type = obj[options.typeKey] && (obj[options.typeKey] instanceof Function || options.typeKey !== 'type' || !obj.type.type)\n    ? obj[options.typeKey]\n    : {};\n  let name;\n\n  if (utils.isPOJO(type) || type === 'mixed') {\n    return new MongooseTypes.Mixed(path, obj);\n  }\n\n  if (Array.isArray(type) || type === Array || type === 'array' || type === MongooseTypes.Array) {\n    // if it was specified through { type } look for `cast`\n    let cast = (type === Array || type === 'array')\n      ? obj.cast || obj.of\n      : type[0];\n\n    // new Schema({ path: [new Schema({ ... })] })\n    if (cast && cast.instanceOfSchema) {\n      if (!(cast instanceof Schema)) {\n        if (this.options._isMerging) {\n          cast = new Schema(cast);\n        } else {\n          throw new TypeError('Schema for array path `' + path +\n            '` is from a different copy of the Mongoose module. ' +\n            'Please make sure you\\'re using the same version ' +\n            'of Mongoose everywhere with `npm list mongoose`. If you are still ' +\n            'getting this error, please add `new Schema()` around the path: ' +\n            `${path}: new Schema(...)`);\n        }\n      }\n      return new MongooseTypes.DocumentArray(path, cast, obj);\n    }\n    if (cast &&\n        cast[options.typeKey] &&\n        cast[options.typeKey].instanceOfSchema) {\n      if (!(cast[options.typeKey] instanceof Schema)) {\n        if (this.options._isMerging) {\n          cast[options.typeKey] = new Schema(cast[options.typeKey]);\n        } else {\n          throw new TypeError('Schema for array path `' + path +\n            '` is from a different copy of the Mongoose module. ' +\n            'Please make sure you\\'re using the same version ' +\n            'of Mongoose everywhere with `npm list mongoose`. If you are still ' +\n            'getting this error, please add `new Schema()` around the path: ' +\n            `${path}: new Schema(...)`);\n        }\n      }\n      return new MongooseTypes.DocumentArray(path, cast[options.typeKey], obj, cast);\n    }\n\n    if (Array.isArray(cast)) {\n      return new MongooseTypes.Array(path, this.interpretAsType(path, cast, options), obj);\n    }\n\n    // Handle both `new Schema({ arr: [{ subpath: String }] })` and `new Schema({ arr: [{ type: { subpath: string } }] })`\n    const castFromTypeKey = (cast != null && cast[options.typeKey] && (options.typeKey !== 'type' || !cast.type.type)) ?\n      cast[options.typeKey] :\n      cast;\n    if (typeof cast === 'string') {\n      cast = MongooseTypes[cast.charAt(0).toUpperCase() + cast.substring(1)];\n    } else if (utils.isPOJO(castFromTypeKey)) {\n      if (Object.keys(castFromTypeKey).length) {\n        // The `minimize` and `typeKey` options propagate to child schemas\n        // declared inline, like `{ arr: [{ val: { $type: String } }] }`.\n        // See gh-3560\n        const childSchemaOptions = { minimize: options.minimize };\n        if (options.typeKey) {\n          childSchemaOptions.typeKey = options.typeKey;\n        }\n        // propagate 'strict' option to child schema\n        if (options.hasOwnProperty('strict')) {\n          childSchemaOptions.strict = options.strict;\n        }\n        if (options.hasOwnProperty('strictQuery')) {\n          childSchemaOptions.strictQuery = options.strictQuery;\n        }\n        if (options.hasOwnProperty('toObject')) {\n          childSchemaOptions.toObject = utils.omit(options.toObject, ['transform']);\n        }\n        if (options.hasOwnProperty('toJSON')) {\n          childSchemaOptions.toJSON = utils.omit(options.toJSON, ['transform']);\n        }\n\n        if (this._userProvidedOptions.hasOwnProperty('_id')) {\n          childSchemaOptions._id = this._userProvidedOptions._id;\n        } else if (Schema.Types.DocumentArray.defaultOptions._id != null) {\n          childSchemaOptions._id = Schema.Types.DocumentArray.defaultOptions._id;\n        }\n\n        const childSchema = new Schema(castFromTypeKey, childSchemaOptions);\n        childSchema.$implicitlyCreated = true;\n        return new MongooseTypes.DocumentArray(path, childSchema, obj);\n      } else {\n        // Special case: empty object becomes mixed\n        return new MongooseTypes.Array(path, MongooseTypes.Mixed, obj);\n      }\n    }\n\n    if (cast) {\n      type = cast[options.typeKey] && (options.typeKey !== 'type' || !cast.type.type)\n        ? cast[options.typeKey]\n        : cast;\n\n      if (Array.isArray(type)) {\n        return new MongooseTypes.Array(path, this.interpretAsType(path, type, options), obj);\n      }\n\n      name = typeof type === 'string'\n        ? type\n        : type.schemaName || utils.getFunctionName(type);\n\n      // For Jest 26+, see #10296\n      if (name === 'ClockDate') {\n        name = 'Date';\n      }\n\n      if (name === void 0) {\n        throw new TypeError('Invalid schema configuration: ' +\n          `Could not determine the embedded type for array \\`${path}\\`. ` +\n          'See https://mongoosejs.com/docs/guide.html#definition for more info on supported schema syntaxes.');\n      }\n      if (!MongooseTypes.hasOwnProperty(name)) {\n        throw new TypeError('Invalid schema configuration: ' +\n          `\\`${name}\\` is not a valid type within the array \\`${path}\\`.` +\n          'See https://bit.ly/mongoose-schematypes for a list of valid schema types.');\n      }\n    }\n\n    return new MongooseTypes.Array(path, cast || MongooseTypes.Mixed, obj, options);\n  }\n\n  if (type && type.instanceOfSchema) {\n    return new MongooseTypes.Subdocument(type, path, obj);\n  }\n\n  if (Buffer.isBuffer(type)) {\n    name = 'Buffer';\n  } else if (typeof type === 'function' || typeof type === 'object') {\n    name = type.schemaName || utils.getFunctionName(type);\n  } else if (type === Types.ObjectId) {\n    name = 'ObjectId';\n  } else if (type === Types.Decimal128) {\n    name = 'Decimal128';\n  } else {\n    name = type == null ? '' + type : type.toString();\n  }\n\n  if (name) {\n    name = name.charAt(0).toUpperCase() + name.substring(1);\n  }\n  // Special case re: gh-7049 because the bson `ObjectID` class' capitalization\n  // doesn't line up with Mongoose's.\n  if (name === 'ObjectID') {\n    name = 'ObjectId';\n  }\n  // For Jest 26+, see #10296\n  if (name === 'ClockDate') {\n    name = 'Date';\n  }\n\n  if (name === void 0) {\n    throw new TypeError(`Invalid schema configuration: \\`${path}\\` schematype definition is ` +\n      'invalid. See ' +\n      'https://mongoosejs.com/docs/guide.html#definition for more info on supported schema syntaxes.');\n  }\n  if (MongooseTypes[name] == null) {\n    throw new TypeError(`Invalid schema configuration: \\`${name}\\` is not ` +\n      `a valid type at path \\`${path}\\`. See ` +\n      'https://bit.ly/mongoose-schematypes for a list of valid schema types.');\n  }\n\n  const schemaType = new MongooseTypes[name](path, obj);\n\n  if (schemaType.$isSchemaMap) {\n    createMapNestedSchemaType(this, schemaType, path, obj, options);\n  }\n\n  return schemaType;\n};\n\n/*!\n * ignore\n */\n\nfunction createMapNestedSchemaType(schema, schemaType, path, obj, options) {\n  const mapPath = path + '.$*';\n  let _mapType = { type: {} };\n  if (utils.hasUserDefinedProperty(obj, 'of')) {\n    const isInlineSchema = utils.isPOJO(obj.of) &&\n      Object.keys(obj.of).length > 0 &&\n      !utils.hasUserDefinedProperty(obj.of, schema.options.typeKey);\n    if (isInlineSchema) {\n      _mapType = { [schema.options.typeKey]: new Schema(obj.of) };\n    } else if (utils.isPOJO(obj.of)) {\n      _mapType = Object.assign({}, obj.of);\n    } else {\n      _mapType = { [schema.options.typeKey]: obj.of };\n    }\n\n    if (_mapType[schema.options.typeKey] && _mapType[schema.options.typeKey].instanceOfSchema) {\n      const subdocumentSchema = _mapType[schema.options.typeKey];\n      subdocumentSchema.eachPath((subpath, type) => {\n        if (type.options.select === true || type.options.select === false) {\n          throw new MongooseError('Cannot use schema-level projections (`select: true` or `select: false`) within maps at path \"' + path + '.' + subpath + '\"');\n        }\n      });\n    }\n\n    if (utils.hasUserDefinedProperty(obj, 'ref')) {\n      _mapType.ref = obj.ref;\n    }\n  }\n  schemaType.$__schemaType = schema.interpretAsType(mapPath, _mapType, options);\n}\n\n/**\n * Iterates the schemas paths similar to Array#forEach.\n *\n * The callback is passed the pathname and the schemaType instance.\n *\n * #### Example:\n *\n *     const userSchema = new Schema({ name: String, registeredAt: Date });\n *     userSchema.eachPath((pathname, schematype) => {\n *       // Prints twice:\n *       // name SchemaString { ... }\n *       // registeredAt SchemaDate { ... }\n *       console.log(pathname, schematype);\n *     });\n *\n * @param {Function} fn callback function\n * @return {Schema} this\n * @api public\n */\n\nSchema.prototype.eachPath = function(fn) {\n  const keys = Object.keys(this.paths);\n  const len = keys.length;\n\n  for (let i = 0; i < len; ++i) {\n    fn(keys[i], this.paths[keys[i]]);\n  }\n\n  return this;\n};\n\n/**\n * Returns an Array of path strings that are required by this schema.\n *\n * #### Example:\n *\n *     const s = new Schema({\n *       name: { type: String, required: true },\n *       age: { type: String, required: true },\n *       notes: String\n *     });\n *     s.requiredPaths(); // [ 'age', 'name' ]\n *\n * @api public\n * @param {Boolean} invalidate Refresh the cache\n * @return {Array}\n */\n\nSchema.prototype.requiredPaths = function requiredPaths(invalidate) {\n  if (this._requiredpaths && !invalidate) {\n    return this._requiredpaths;\n  }\n\n  const paths = Object.keys(this.paths);\n  let i = paths.length;\n  const ret = [];\n\n  while (i--) {\n    const path = paths[i];\n    if (this.paths[path].isRequired) {\n      ret.push(path);\n    }\n  }\n  this._requiredpaths = ret;\n  return this._requiredpaths;\n};\n\n/**\n * Returns indexes from fields and schema-level indexes (cached).\n *\n * @api private\n * @return {Array}\n */\n\nSchema.prototype.indexedPaths = function indexedPaths() {\n  if (this._indexedpaths) {\n    return this._indexedpaths;\n  }\n  this._indexedpaths = this.indexes();\n  return this._indexedpaths;\n};\n\n/**\n * Returns the pathType of `path` for this schema.\n *\n * Given a path, returns whether it is a real, virtual, nested, or ad-hoc/undefined path.\n *\n * #### Example:\n *\n *     const s = new Schema({ name: String, nested: { foo: String } });\n *     s.virtual('foo').get(() => 42);\n *     s.pathType('name'); // \"real\"\n *     s.pathType('nested'); // \"nested\"\n *     s.pathType('foo'); // \"virtual\"\n *     s.pathType('fail'); // \"adhocOrUndefined\"\n *\n * @param {String} path\n * @return {String}\n * @api public\n */\n\nSchema.prototype.pathType = function(path) {\n  if (this.paths.hasOwnProperty(path)) {\n    return 'real';\n  }\n  if (this.virtuals.hasOwnProperty(path)) {\n    return 'virtual';\n  }\n  if (this.nested.hasOwnProperty(path)) {\n    return 'nested';\n  }\n\n  // Convert to '.$' to check subpaths re: gh-6405\n  const cleanPath = _pathToPositionalSyntax(path);\n\n  if (this.subpaths.hasOwnProperty(cleanPath) || this.subpaths.hasOwnProperty(path)) {\n    return 'real';\n  }\n\n  const singleNestedPath = this.singleNestedPaths.hasOwnProperty(cleanPath) || this.singleNestedPaths.hasOwnProperty(path);\n  if (singleNestedPath) {\n    return singleNestedPath === 'nested' ? 'nested' : 'real';\n  }\n\n  // Look for maps\n  const mapPath = getMapPath(this, path);\n  if (mapPath != null) {\n    return 'real';\n  }\n\n  if (/\\.\\d+\\.|\\.\\d+$/.test(path)) {\n    return getPositionalPathType(this, path, cleanPath);\n  }\n  return 'adhocOrUndefined';\n};\n\n/**\n * Returns true iff this path is a child of a mixed schema.\n *\n * @param {String} path\n * @return {Boolean}\n * @api private\n */\n\nSchema.prototype.hasMixedParent = function(path) {\n  const subpaths = path.split(/\\./g);\n  path = '';\n  for (let i = 0; i < subpaths.length; ++i) {\n    path = i > 0 ? path + '.' + subpaths[i] : subpaths[i];\n    if (this.paths.hasOwnProperty(path) &&\n        this.paths[path] instanceof MongooseTypes.Mixed) {\n      return this.paths[path];\n    }\n  }\n\n  return null;\n};\n\n/**\n * Setup updatedAt and createdAt timestamps to documents if enabled\n *\n * @param {Boolean|Object} timestamps timestamps options\n * @api private\n */\nSchema.prototype.setupTimestamp = function(timestamps) {\n  return setupTimestamps(this, timestamps);\n};\n\n/**\n * ignore. Deprecated re: #6405\n * @param {Any} self\n * @param {String} path\n * @api private\n */\n\nfunction getPositionalPathType(self, path, cleanPath) {\n  const subpaths = path.split(/\\.(\\d+)\\.|\\.(\\d+)$/).filter(Boolean);\n  if (subpaths.length < 2) {\n    return self.paths.hasOwnProperty(subpaths[0]) ?\n      self.paths[subpaths[0]] :\n      'adhocOrUndefined';\n  }\n\n  let val = self.path(subpaths[0]);\n  let isNested = false;\n  if (!val) {\n    return 'adhocOrUndefined';\n  }\n\n  const last = subpaths.length - 1;\n\n  for (let i = 1; i < subpaths.length; ++i) {\n    isNested = false;\n    const subpath = subpaths[i];\n\n    if (i === last && val && !/\\D/.test(subpath)) {\n      if (val.$isMongooseDocumentArray) {\n        val = val.$embeddedSchemaType;\n      } else if (val instanceof MongooseTypes.Array) {\n        // StringSchema, NumberSchema, etc\n        val = val.caster;\n      } else {\n        val = undefined;\n      }\n      break;\n    }\n\n    // ignore if its just a position segment: path.0.subpath\n    if (!/\\D/.test(subpath)) {\n      // Nested array\n      if (val instanceof MongooseTypes.Array && i !== last) {\n        val = val.caster;\n      }\n      continue;\n    }\n\n    if (!(val && val.schema)) {\n      val = undefined;\n      break;\n    }\n\n    const type = val.schema.pathType(subpath);\n    isNested = (type === 'nested');\n    val = val.schema.path(subpath);\n  }\n\n  self.subpaths[cleanPath] = val;\n  if (val) {\n    return 'real';\n  }\n  if (isNested) {\n    return 'nested';\n  }\n  return 'adhocOrUndefined';\n}\n\n\n/*!\n * ignore\n */\n\nfunction getPositionalPath(self, path, cleanPath) {\n  getPositionalPathType(self, path, cleanPath);\n  return self.subpaths[cleanPath];\n}\n\n/**\n * Adds a method call to the queue.\n *\n * #### Example:\n *\n *     schema.methods.print = function() { console.log(this); };\n *     schema.queue('print', []); // Print the doc every one is instantiated\n *\n *     const Model = mongoose.model('Test', schema);\n *     new Model({ name: 'test' }); // Prints '{\"_id\": ..., \"name\": \"test\" }'\n *\n * @param {String} name name of the document method to call later\n * @param {Array} args arguments to pass to the method\n * @api public\n */\n\nSchema.prototype.queue = function(name, args) {\n  this.callQueue.push([name, args]);\n  return this;\n};\n\n/**\n * Defines a pre hook for the model.\n *\n * #### Example:\n *\n *     const toySchema = new Schema({ name: String, created: Date });\n *\n *     toySchema.pre('save', function(next) {\n *       if (!this.created) this.created = new Date;\n *       next();\n *     });\n *\n *     toySchema.pre('validate', function(next) {\n *       if (this.name !== 'Woody') this.name = 'Woody';\n *       next();\n *     });\n *\n *     // Equivalent to calling `pre()` on `find`, `findOne`, `findOneAndUpdate`.\n *     toySchema.pre(/^find/, function(next) {\n *       console.log(this.getFilter());\n *     });\n *\n *     // Equivalent to calling `pre()` on `updateOne`, `findOneAndUpdate`.\n *     toySchema.pre(['updateOne', 'findOneAndUpdate'], function(next) {\n *       console.log(this.getFilter());\n *     });\n *\n *     toySchema.pre('deleteOne', function() {\n *       // Runs when you call `Toy.deleteOne()`\n *     });\n *\n *     toySchema.pre('deleteOne', { document: true }, function() {\n *       // Runs when you call `doc.deleteOne()`\n *     });\n *\n * @param {String|RegExp|String[]} methodName The method name or regular expression to match method name\n * @param {Object} [options]\n * @param {Boolean} [options.document] If `name` is a hook for both document and query middleware, set to `true` to run on document middleware. For example, set `options.document` to `true` to apply this hook to `Document#deleteOne()` rather than `Query#deleteOne()`.\n * @param {Boolean} [options.query] If `name` is a hook for both document and query middleware, set to `true` to run on query middleware.\n * @param {Function} callback\n * @api public\n */\n\nSchema.prototype.pre = function(name) {\n  if (name instanceof RegExp) {\n    const remainingArgs = Array.prototype.slice.call(arguments, 1);\n    for (const fn of hookNames) {\n      if (name.test(fn)) {\n        this.pre.apply(this, [fn].concat(remainingArgs));\n      }\n    }\n    return this;\n  }\n  if (Array.isArray(name)) {\n    const remainingArgs = Array.prototype.slice.call(arguments, 1);\n    for (const el of name) {\n      this.pre.apply(this, [el].concat(remainingArgs));\n    }\n    return this;\n  }\n  this.s.hooks.pre.apply(this.s.hooks, arguments);\n  return this;\n};\n\n/**\n * Defines a post hook for the document\n *\n *     const schema = new Schema(..);\n *     schema.post('save', function (doc) {\n *       console.log('this fired after a document was saved');\n *     });\n *\n *     schema.post('find', function(docs) {\n *       console.log('this fired after you ran a find query');\n *     });\n *\n *     schema.post(/Many$/, function(res) {\n *       console.log('this fired after you ran `updateMany()` or `deleteMany()`');\n *     });\n *\n *     const Model = mongoose.model('Model', schema);\n *\n *     const m = new Model(..);\n *     m.save(function(err) {\n *       console.log('this fires after the `post` hook');\n *     });\n *\n *     m.find(function(err, docs) {\n *       console.log('this fires after the post find hook');\n *     });\n *\n * @param {String|RegExp|String[]} methodName The method name or regular expression to match method name\n * @param {Object} [options]\n * @param {Boolean} [options.document] If `name` is a hook for both document and query middleware, set to `true` to run on document middleware.\n * @param {Boolean} [options.query] If `name` is a hook for both document and query middleware, set to `true` to run on query middleware.\n * @param {Function} fn callback\n * @see middleware https://mongoosejs.com/docs/middleware.html\n * @see kareem https://npmjs.org/package/kareem\n * @api public\n */\n\nSchema.prototype.post = function(name) {\n  if (name instanceof RegExp) {\n    const remainingArgs = Array.prototype.slice.call(arguments, 1);\n    for (const fn of hookNames) {\n      if (name.test(fn)) {\n        this.post.apply(this, [fn].concat(remainingArgs));\n      }\n    }\n    return this;\n  }\n  if (Array.isArray(name)) {\n    const remainingArgs = Array.prototype.slice.call(arguments, 1);\n    for (const el of name) {\n      this.post.apply(this, [el].concat(remainingArgs));\n    }\n    return this;\n  }\n  this.s.hooks.post.apply(this.s.hooks, arguments);\n  return this;\n};\n\n/**\n * Registers a plugin for this schema.\n *\n * #### Example:\n *\n *     const s = new Schema({ name: String });\n *     s.plugin(schema => console.log(schema.path('name').path));\n *     mongoose.model('Test', s); // Prints 'name'\n *\n * Or with Options:\n *\n *     const s = new Schema({ name: String });\n *     s.plugin((schema, opts) => console.log(opts.text, schema.path('name').path), { text: \"Schema Path Name:\" });\n *     mongoose.model('Test', s); // Prints 'Schema Path Name: name'\n *\n * @param {Function} plugin The Plugin's callback\n * @param {Object} [opts] Options to pass to the plugin\n * @param {Boolean} [opts.deduplicate=false] If true, ignore duplicate plugins (same `fn` argument using `===`)\n * @see plugins https://mongoosejs.com/docs/plugins.html\n * @api public\n */\n\nSchema.prototype.plugin = function(fn, opts) {\n  if (typeof fn !== 'function') {\n    throw new Error('First param to `schema.plugin()` must be a function, ' +\n      'got \"' + (typeof fn) + '\"');\n  }\n\n  if (opts && opts.deduplicate) {\n    for (const plugin of this.plugins) {\n      if (plugin.fn === fn) {\n        return this;\n      }\n    }\n  }\n  this.plugins.push({ fn: fn, opts: opts });\n\n  fn(this, opts);\n  return this;\n};\n\n/**\n * Adds an instance method to documents constructed from Models compiled from this schema.\n *\n * #### Example:\n *\n *     const schema = kittySchema = new Schema(..);\n *\n *     schema.method('meow', function () {\n *       console.log('meeeeeoooooooooooow');\n *     })\n *\n *     const Kitty = mongoose.model('Kitty', schema);\n *\n *     const fizz = new Kitty;\n *     fizz.meow(); // meeeeeooooooooooooow\n *\n * If a hash of name/fn pairs is passed as the only argument, each name/fn pair will be added as methods.\n *\n *     schema.method({\n *         purr: function () {}\n *       , scratch: function () {}\n *     });\n *\n *     // later\n *     const fizz = new Kitty;\n *     fizz.purr();\n *     fizz.scratch();\n *\n * NOTE: `Schema.method()` adds instance methods to the `Schema.methods` object. You can also add instance methods directly to the `Schema.methods` object as seen in the [guide](https://mongoosejs.com/docs/guide.html#methods)\n *\n * @param {String|Object} name The Method Name for a single function, or a Object of \"string-function\" pairs.\n * @param {Function} [fn] The Function in a single-function definition.\n * @api public\n */\n\nSchema.prototype.method = function(name, fn, options) {\n  if (typeof name !== 'string') {\n    for (const i in name) {\n      this.methods[i] = name[i];\n      this.methodOptions[i] = clone(options);\n    }\n  } else {\n    this.methods[name] = fn;\n    this.methodOptions[name] = clone(options);\n  }\n  return this;\n};\n\n/**\n * Adds static \"class\" methods to Models compiled from this schema.\n *\n * #### Example:\n *\n *     const schema = new Schema(..);\n *     // Equivalent to `schema.statics.findByName = function(name) {}`;\n *     schema.static('findByName', function(name) {\n *       return this.find({ name: name });\n *     });\n *\n *     const Drink = mongoose.model('Drink', schema);\n *     await Drink.findByName('LaCroix');\n *\n * If a hash of name/fn pairs is passed as the only argument, each name/fn pair will be added as methods.\n *\n *     schema.static({\n *         findByName: function () {..}\n *       , findByCost: function () {..}\n *     });\n *\n *     const Drink = mongoose.model('Drink', schema);\n *     await Drink.findByName('LaCroix');\n *     await Drink.findByCost(3);\n *\n * If a hash of name/fn pairs is passed as the only argument, each name/fn pair will be added as statics.\n *\n * @param {String|Object} name The Method Name for a single function, or a Object of \"string-function\" pairs.\n * @param {Function} [fn] The Function in a single-function definition.\n * @api public\n * @see Statics https://mongoosejs.com/docs/guide.html#statics\n */\n\nSchema.prototype.static = function(name, fn) {\n  if (typeof name !== 'string') {\n    for (const i in name) {\n      this.statics[i] = name[i];\n    }\n  } else {\n    this.statics[name] = fn;\n  }\n  return this;\n};\n\n/**\n * Defines an index (most likely compound) for this schema.\n *\n * #### Example:\n *\n *     schema.index({ first: 1, last: -1 })\n *\n * @param {Object} fields The Fields to index, with the order, available values: `1 | -1 | '2d' | '2dsphere' | 'geoHaystack' | 'hashed' | 'text'`\n * @param {Object} [options] Options to pass to [MongoDB driver's `createIndex()` function](https://mongodb.github.io/node-mongodb-native/4.9/classes/Collection.html#createIndex)\n * @param {String | number} [options.expires=null] Mongoose-specific syntactic sugar, uses [ms](https://www.npmjs.com/package/ms) to convert `expires` option into seconds for the `expireAfterSeconds` in the above link.\n * @param {String} [options.language_override=null] Tells mongodb to use the specified field instead of `language` for parsing text indexes.\n * @api public\n */\n\nSchema.prototype.index = function(fields, options) {\n  fields || (fields = {});\n  options || (options = {});\n\n  if (options.expires) {\n    utils.expires(options);\n  }\n  for (const key in fields) {\n    if (this.aliases[key]) {\n      fields = utils.renameObjKey(fields, key, this.aliases[key]);\n    }\n  }\n  for (const field of Object.keys(fields)) {\n    if (fields[field] === 'ascending' || fields[field] === 'asc') {\n      fields[field] = 1;\n    } else if (fields[field] === 'descending' || fields[field] === 'desc') {\n      fields[field] = -1;\n    }\n  }\n\n  this._indexes.push([fields, options]);\n  return this;\n};\n\n/**\n * Sets a schema option.\n *\n * #### Example:\n *\n *     schema.set('strict'); // 'true' by default\n *     schema.set('strict', false); // Sets 'strict' to false\n *     schema.set('strict'); // 'false'\n *\n * @param {String} key The name of the option to set the value to\n * @param {Object} [value] The value to set the option to, if not passed, the option will be reset to default\n * @param {Array<string>} [tags] tags to add to read preference if key === 'read'\n * @see Schema https://mongoosejs.com/docs/api/schema.html#Schema()\n * @api public\n */\n\nSchema.prototype.set = function(key, value, tags) {\n  if (arguments.length === 1) {\n    return this.options[key];\n  }\n\n  switch (key) {\n    case 'read':\n      if (typeof value === 'string') {\n        this.options[key] = { mode: handleReadPreferenceAliases(value), tags };\n      } else if (Array.isArray(value) && typeof value[0] === 'string') {\n        this.options[key] = {\n          mode: handleReadPreferenceAliases(value[0]),\n          tags: value[1]\n        };\n      } else {\n        this.options[key] = value;\n      }\n      this._userProvidedOptions[key] = this.options[key];\n      break;\n    case 'timestamps':\n      this.setupTimestamp(value);\n      this.options[key] = value;\n      this._userProvidedOptions[key] = this.options[key];\n      break;\n    case '_id':\n      this.options[key] = value;\n      this._userProvidedOptions[key] = this.options[key];\n\n      if (value && !this.paths['_id']) {\n        addAutoId(this);\n      } else if (!value && this.paths['_id'] != null && this.paths['_id'].auto) {\n        this.remove('_id');\n      }\n      break;\n    default:\n      this.options[key] = value;\n      this._userProvidedOptions[key] = this.options[key];\n      break;\n  }\n\n  // Propagate `strict` and `strictQuery` changes down to implicitly created schemas\n  if (key === 'strict') {\n    _propagateOptionsToImplicitlyCreatedSchemas(this, { strict: value });\n  }\n  if (key === 'strictQuery') {\n    _propagateOptionsToImplicitlyCreatedSchemas(this, { strictQuery: value });\n  }\n  if (key === 'toObject') {\n    value = { ...value };\n    // Avoid propagating transform to implicitly created schemas re: gh-3279\n    delete value.transform;\n    _propagateOptionsToImplicitlyCreatedSchemas(this, { toObject: value });\n  }\n  if (key === 'toJSON') {\n    value = { ...value };\n    // Avoid propagating transform to implicitly created schemas re: gh-3279\n    delete value.transform;\n    _propagateOptionsToImplicitlyCreatedSchemas(this, { toJSON: value });\n  }\n\n  return this;\n};\n\n/*!\n * Recursively set options on implicitly created schemas\n */\n\nfunction _propagateOptionsToImplicitlyCreatedSchemas(baseSchema, options) {\n  for (const { schema } of baseSchema.childSchemas) {\n    if (!schema.$implicitlyCreated) {\n      continue;\n    }\n    Object.assign(schema.options, options);\n    _propagateOptionsToImplicitlyCreatedSchemas(schema, options);\n  }\n}\n\n/**\n * Gets a schema option.\n *\n * #### Example:\n *\n *     schema.get('strict'); // true\n *     schema.set('strict', false);\n *     schema.get('strict'); // false\n *\n * @param {String} key The name of the Option to get the current value for\n * @api public\n * @return {Any} the option's value\n */\n\nSchema.prototype.get = function(key) {\n  return this.options[key];\n};\n\nconst indexTypes = '2d 2dsphere hashed text'.split(' ');\n\n/**\n * The allowed index types\n *\n * @property {String[]} indexTypes\n * @memberOf Schema\n * @static\n * @api public\n */\n\nObject.defineProperty(Schema, 'indexTypes', {\n  get: function() {\n    return indexTypes;\n  },\n  set: function() {\n    throw new Error('Cannot overwrite Schema.indexTypes');\n  }\n});\n\n/**\n * Returns a list of indexes that this schema declares, via `schema.index()` or by `index: true` in a path's options.\n * Indexes are expressed as an array `[spec, options]`.\n *\n * #### Example:\n *\n *     const userSchema = new Schema({\n *       email: { type: String, required: true, unique: true },\n *       registeredAt: { type: Date, index: true }\n *     });\n *\n *     // [ [ { email: 1 }, { unique: true, background: true } ],\n *     //   [ { registeredAt: 1 }, { background: true } ] ]\n *     userSchema.indexes();\n *\n * [Plugins](https://mongoosejs.com/docs/plugins.html) can use the return value of this function to modify a schema's indexes.\n * For example, the below plugin makes every index unique by default.\n *\n *     function myPlugin(schema) {\n *       for (const index of schema.indexes()) {\n *         if (index[1].unique === undefined) {\n *           index[1].unique = true;\n *         }\n *       }\n *     }\n *\n * @api public\n * @return {Array} list of indexes defined in the schema\n */\n\nSchema.prototype.indexes = function() {\n  return getIndexes(this);\n};\n\n/**\n * Creates a virtual type with the given name.\n *\n * @param {String} name The name of the Virtual\n * @param {Object} [options]\n * @param {String|Model} [options.ref] model name or model instance. Marks this as a [populate virtual](https://mongoosejs.com/docs/populate.html#populate-virtuals).\n * @param {String|Function} [options.localField] Required for populate virtuals. See [populate virtual docs](https://mongoosejs.com/docs/populate.html#populate-virtuals) for more information.\n * @param {String|Function} [options.foreignField] Required for populate virtuals. See [populate virtual docs](https://mongoosejs.com/docs/populate.html#populate-virtuals) for more information.\n * @param {Boolean|Function} [options.justOne=false] Only works with populate virtuals. If [truthy](https://masteringjs.io/tutorials/fundamentals/truthy), will be a single doc or `null`. Otherwise, the populate virtual will be an array.\n * @param {Boolean} [options.count=false] Only works with populate virtuals. If [truthy](https://masteringjs.io/tutorials/fundamentals/truthy), this populate virtual will contain the number of documents rather than the documents themselves when you `populate()`.\n * @param {Function|null} [options.get=null] Adds a [getter](https://mongoosejs.com/docs/tutorials/getters-setters.html) to this virtual to transform the populated doc.\n * @param {Object|Function} [options.match=null] Apply a default [`match` option to populate](https://mongoosejs.com/docs/populate.html#match), adding an additional filter to the populate query.\n * @return {VirtualType}\n */\n\nSchema.prototype.virtual = function(name, options) {\n  if (name instanceof VirtualType || getConstructorName(name) === 'VirtualType') {\n    return this.virtual(name.path, name.options);\n  }\n  options = new VirtualOptions(options);\n\n  if (utils.hasUserDefinedProperty(options, ['ref', 'refPath'])) {\n    if (options.localField == null) {\n      throw new Error('Reference virtuals require `localField` option');\n    }\n\n    if (options.foreignField == null) {\n      throw new Error('Reference virtuals require `foreignField` option');\n    }\n\n    this.pre('init', function virtualPreInit(obj) {\n      if (mpath.has(name, obj)) {\n        const _v = mpath.get(name, obj);\n        if (!this.$$populatedVirtuals) {\n          this.$$populatedVirtuals = {};\n        }\n\n        if (options.justOne || options.count) {\n          this.$$populatedVirtuals[name] = Array.isArray(_v) ?\n            _v[0] :\n            _v;\n        } else {\n          this.$$populatedVirtuals[name] = Array.isArray(_v) ?\n            _v :\n            _v == null ? [] : [_v];\n        }\n\n        mpath.unset(name, obj);\n      }\n    });\n\n    const virtual = this.virtual(name);\n    virtual.options = options;\n\n    virtual.\n      set(function(v) {\n        if (!this.$$populatedVirtuals) {\n          this.$$populatedVirtuals = {};\n        }\n\n        return setPopulatedVirtualValue(\n          this.$$populatedVirtuals,\n          name,\n          v,\n          options\n        );\n      });\n\n    if (typeof options.get === 'function') {\n      virtual.get(options.get);\n    }\n\n    // Workaround for gh-8198: if virtual is under document array, make a fake\n    // virtual. See gh-8210, gh-13189\n    const parts = name.split('.');\n    let cur = parts[0];\n    for (let i = 0; i < parts.length - 1; ++i) {\n      if (this.paths[cur] == null) {\n        continue;\n      }\n\n      if (this.paths[cur].$isMongooseDocumentArray || this.paths[cur].$isSingleNested) {\n        const remnant = parts.slice(i + 1).join('.');\n        this.paths[cur].schema.virtual(remnant, options);\n        break;\n      }\n\n      cur += '.' + parts[i + 1];\n    }\n\n    return virtual;\n  }\n\n  const virtuals = this.virtuals;\n  const parts = name.split('.');\n\n  if (this.pathType(name) === 'real') {\n    throw new Error('Virtual path \"' + name + '\"' +\n      ' conflicts with a real path in the schema');\n  }\n\n  virtuals[name] = parts.reduce(function(mem, part, i) {\n    mem[part] || (mem[part] = (i === parts.length - 1)\n      ? new VirtualType(options, name)\n      : {});\n    return mem[part];\n  }, this.tree);\n\n  return virtuals[name];\n};\n\n/**\n * Returns the virtual type with the given `name`.\n *\n * @param {String} name The name of the Virtual to get\n * @return {VirtualType|null}\n */\n\nSchema.prototype.virtualpath = function(name) {\n  return this.virtuals.hasOwnProperty(name) ? this.virtuals[name] : null;\n};\n\n/**\n * Removes the given `path` (or [`paths`]).\n *\n * #### Example:\n *\n *     const schema = new Schema({ name: String, age: Number });\n *     schema.remove('name');\n *     schema.path('name'); // Undefined\n *     schema.path('age'); // SchemaNumber { ... }\n *\n * Or as a Array:\n *\n *     schema.remove(['name', 'age']);\n *     schema.path('name'); // Undefined\n *     schema.path('age'); // Undefined\n *\n * @param {String|Array} path The Path(s) to remove\n * @return {Schema} the Schema instance\n * @api public\n */\nSchema.prototype.remove = function(path) {\n  if (typeof path === 'string') {\n    path = [path];\n  }\n  if (Array.isArray(path)) {\n    path.forEach(function(name) {\n      if (this.path(name) == null && !this.nested[name]) {\n        return;\n      }\n      if (this.nested[name]) {\n        const allKeys = Object.keys(this.paths).\n          concat(Object.keys(this.nested));\n        for (const path of allKeys) {\n          if (path.startsWith(name + '.')) {\n            delete this.paths[path];\n            delete this.nested[path];\n            _deletePath(this, path);\n          }\n        }\n\n        delete this.nested[name];\n        _deletePath(this, name);\n        return;\n      }\n\n      delete this.paths[name];\n      _deletePath(this, name);\n    }, this);\n  }\n  return this;\n};\n\n/*!\n * ignore\n */\n\nfunction _deletePath(schema, name) {\n  const pieces = name.split('.');\n  const last = pieces.pop();\n\n  let branch = schema.tree;\n\n  for (const piece of pieces) {\n    branch = branch[piece];\n  }\n\n  delete branch[last];\n}\n\n/**\n * Removes the given virtual or virtuals from the schema.\n *\n * @param {String|Array} path The virutal path(s) to remove.\n * @returns {Schema} the Schema instance, or a mongoose error if the virtual does not exist.\n * @api public\n */\n\nSchema.prototype.removeVirtual = function(path) {\n  if (typeof path === 'string') {\n    path = [path];\n  }\n  if (Array.isArray(path)) {\n    for (const virtual of path) {\n      if (this.virtuals[virtual] == null) {\n        throw new MongooseError(`Attempting to remove virtual \"${virtual}\" that does not exist.`);\n      }\n    }\n\n    for (const virtual of path) {\n      delete this.paths[virtual];\n      delete this.virtuals[virtual];\n      if (virtual.indexOf('.') !== -1) {\n        mpath.unset(virtual, this.tree);\n      } else {\n        delete this.tree[virtual];\n      }\n    }\n  }\n  return this;\n};\n\n/**\n * Loads an ES6 class into a schema. Maps [setters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set) + [getters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get), [static methods](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/static),\n * and [instance methods](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes#Class_body_and_method_definitions)\n * to schema [virtuals](https://mongoosejs.com/docs/guide.html#virtuals),\n * [statics](https://mongoosejs.com/docs/guide.html#statics), and\n * [methods](https://mongoosejs.com/docs/guide.html#methods).\n *\n * #### Example:\n *\n * ```javascript\n * const md5 = require('md5');\n * const userSchema = new Schema({ email: String });\n * class UserClass {\n *   // `gravatarImage` becomes a virtual\n *   get gravatarImage() {\n *     const hash = md5(this.email.toLowerCase());\n *     return `https://www.gravatar.com/avatar/${hash}`;\n *   }\n *\n *   // `getProfileUrl()` becomes a document method\n *   getProfileUrl() {\n *     return `https://mysite.com/${this.email}`;\n *   }\n *\n *   // `findByEmail()` becomes a static\n *   static findByEmail(email) {\n *     return this.findOne({ email });\n *   }\n * }\n *\n * // `schema` will now have a `gravatarImage` virtual, a `getProfileUrl()` method,\n * // and a `findByEmail()` static\n * userSchema.loadClass(UserClass);\n * ```\n *\n * @param {Function} model The Class to load\n * @param {Boolean} [virtualsOnly] if truthy, only pulls virtuals from the class, not methods or statics\n */\nSchema.prototype.loadClass = function(model, virtualsOnly) {\n  // Stop copying when hit certain base classes\n  if (model === Object.prototype ||\n      model === Function.prototype ||\n      model.prototype.hasOwnProperty('$isMongooseModelPrototype') ||\n      model.prototype.hasOwnProperty('$isMongooseDocumentPrototype')) {\n    return this;\n  }\n\n  this.loadClass(Object.getPrototypeOf(model), virtualsOnly);\n\n  // Add static methods\n  if (!virtualsOnly) {\n    Object.getOwnPropertyNames(model).forEach(function(name) {\n      if (name.match(/^(length|name|prototype|constructor|__proto__)$/)) {\n        return;\n      }\n      const prop = Object.getOwnPropertyDescriptor(model, name);\n      if (prop.hasOwnProperty('value')) {\n        this.static(name, prop.value);\n      }\n    }, this);\n  }\n\n  // Add methods and virtuals\n  Object.getOwnPropertyNames(model.prototype).forEach(function(name) {\n    if (name.match(/^(constructor)$/)) {\n      return;\n    }\n    const method = Object.getOwnPropertyDescriptor(model.prototype, name);\n    if (!virtualsOnly) {\n      if (typeof method.value === 'function') {\n        this.method(name, method.value);\n      }\n    }\n    if (typeof method.get === 'function') {\n      if (this.virtuals[name]) {\n        this.virtuals[name].getters = [];\n      }\n      this.virtual(name).get(method.get);\n    }\n    if (typeof method.set === 'function') {\n      if (this.virtuals[name]) {\n        this.virtuals[name].setters = [];\n      }\n      this.virtual(name).set(method.set);\n    }\n  }, this);\n\n  return this;\n};\n\n/*!\n * ignore\n */\n\nSchema.prototype._getSchema = function(path) {\n  const _this = this;\n  const pathschema = _this.path(path);\n  const resultPath = [];\n\n  if (pathschema) {\n    pathschema.$fullPath = path;\n    return pathschema;\n  }\n\n  function search(parts, schema) {\n    let p = parts.length + 1;\n    let foundschema;\n    let trypath;\n\n    while (p--) {\n      trypath = parts.slice(0, p).join('.');\n      foundschema = schema.path(trypath);\n      if (foundschema) {\n        resultPath.push(trypath);\n\n        if (foundschema.caster) {\n          // array of Mixed?\n          if (foundschema.caster instanceof MongooseTypes.Mixed) {\n            foundschema.caster.$fullPath = resultPath.join('.');\n            return foundschema.caster;\n          }\n\n          // Now that we found the array, we need to check if there\n          // are remaining document paths to look up for casting.\n          // Also we need to handle array.$.path since schema.path\n          // doesn't work for that.\n          // If there is no foundschema.schema we are dealing with\n          // a path like array.$\n          if (p !== parts.length) {\n            if (foundschema.schema) {\n              let ret;\n              if (parts[p] === '$' || isArrayFilter(parts[p])) {\n                if (p + 1 === parts.length) {\n                  // comments.$\n                  return foundschema.$embeddedSchemaType;\n                }\n                // comments.$.comments.$.title\n                ret = search(parts.slice(p + 1), foundschema.schema);\n                if (ret) {\n                  ret.$parentSchemaDocArray = ret.$parentSchemaDocArray ||\n                    (foundschema.schema.$isSingleNested ? null : foundschema);\n                }\n                return ret;\n              }\n              // this is the last path of the selector\n              ret = search(parts.slice(p), foundschema.schema);\n              if (ret) {\n                ret.$parentSchemaDocArray = ret.$parentSchemaDocArray ||\n                  (foundschema.schema.$isSingleNested ? null : foundschema);\n              }\n              return ret;\n            }\n          }\n        } else if (foundschema.$isSchemaMap) {\n          if (p >= parts.length) {\n            return foundschema;\n          }\n          // Any path in the map will be an instance of the map's embedded schematype\n          if (p + 1 >= parts.length) {\n            return foundschema.$__schemaType;\n          }\n\n          if (foundschema.$__schemaType instanceof MongooseTypes.Mixed) {\n            return foundschema.$__schemaType;\n          }\n          if (foundschema.$__schemaType.schema != null) {\n            // Map of docs\n            const ret = search(parts.slice(p + 1), foundschema.$__schemaType.schema);\n            return ret;\n          }\n        }\n\n        foundschema.$fullPath = resultPath.join('.');\n\n        return foundschema;\n      }\n    }\n  }\n\n  // look for arrays\n  const parts = path.split('.');\n  for (let i = 0; i < parts.length; ++i) {\n    if (parts[i] === '$' || isArrayFilter(parts[i])) {\n      // Re: gh-5628, because `schema.path()` doesn't take $ into account.\n      parts[i] = '0';\n    }\n    if (numberRE.test(parts[i])) {\n      parts[i] = '$';\n    }\n  }\n  return search(parts, _this);\n};\n\n/*!\n * ignore\n */\n\nSchema.prototype._getPathType = function(path) {\n  const _this = this;\n  const pathschema = _this.path(path);\n\n  if (pathschema) {\n    return 'real';\n  }\n\n  function search(parts, schema) {\n    let p = parts.length + 1,\n        foundschema,\n        trypath;\n\n    while (p--) {\n      trypath = parts.slice(0, p).join('.');\n      foundschema = schema.path(trypath);\n      if (foundschema) {\n        if (foundschema.caster) {\n          // array of Mixed?\n          if (foundschema.caster instanceof MongooseTypes.Mixed) {\n            return { schema: foundschema, pathType: 'mixed' };\n          }\n\n          // Now that we found the array, we need to check if there\n          // are remaining document paths to look up for casting.\n          // Also we need to handle array.$.path since schema.path\n          // doesn't work for that.\n          // If there is no foundschema.schema we are dealing with\n          // a path like array.$\n          if (p !== parts.length && foundschema.schema) {\n            if (parts[p] === '$' || isArrayFilter(parts[p])) {\n              if (p === parts.length - 1) {\n                return { schema: foundschema, pathType: 'nested' };\n              }\n              // comments.$.comments.$.title\n              return search(parts.slice(p + 1), foundschema.schema);\n            }\n            // this is the last path of the selector\n            return search(parts.slice(p), foundschema.schema);\n          }\n          return {\n            schema: foundschema,\n            pathType: foundschema.$isSingleNested ? 'nested' : 'array'\n          };\n        }\n        return { schema: foundschema, pathType: 'real' };\n      } else if (p === parts.length && schema.nested[trypath]) {\n        return { schema: schema, pathType: 'nested' };\n      }\n    }\n    return { schema: foundschema || schema, pathType: 'undefined' };\n  }\n\n  // look for arrays\n  return search(path.split('.'), _this);\n};\n\n/*!\n * ignore\n */\n\nfunction isArrayFilter(piece) {\n  return piece.startsWith('$[') && piece.endsWith(']');\n}\n\n/**\n * Called by `compile()` _right before_ compiling. Good for making any changes to\n * the schema that should respect options set by plugins, like `id`\n * @method _preCompile\n * @memberOf Schema\n * @instance\n * @api private\n */\n\nSchema.prototype._preCompile = function _preCompile() {\n  idGetter(this);\n};\n\n/*!\n * Module exports.\n */\n\nmodule.exports = exports = Schema;\n\n// require down here because of reference issues\n\n/**\n * The various built-in Mongoose Schema Types.\n *\n * #### Example:\n *\n *     const mongoose = require('mongoose');\n *     const ObjectId = mongoose.Schema.Types.ObjectId;\n *\n * #### Types:\n *\n * - [String](https://mongoosejs.com/docs/schematypes.html#strings)\n * - [Number](https://mongoosejs.com/docs/schematypes.html#numbers)\n * - [Boolean](https://mongoosejs.com/docs/schematypes.html#booleans) | Bool\n * - [Array](https://mongoosejs.com/docs/schematypes.html#arrays)\n * - [Buffer](https://mongoosejs.com/docs/schematypes.html#buffers)\n * - [Date](https://mongoosejs.com/docs/schematypes.html#dates)\n * - [ObjectId](https://mongoosejs.com/docs/schematypes.html#objectids) | Oid\n * - [Mixed](https://mongoosejs.com/docs/schematypes.html#mixed)\n * - [UUID](https://mongoosejs.com/docs/schematypes.html#uuid)\n * - [BigInt](https://mongoosejs.com/docs/schematypes.html#bigint)\n *\n * Using this exposed access to the `Mixed` SchemaType, we can use them in our schema.\n *\n *     const Mixed = mongoose.Schema.Types.Mixed;\n *     new mongoose.Schema({ _user: Mixed })\n *\n * @api public\n */\n\nSchema.Types = MongooseTypes = require('./schema/index');\n\n/*!\n * ignore\n */\n\nexports.ObjectId = MongooseTypes.ObjectId;\n"],"mappings":"AAAA,YAAY;;AAEZ;AACA;AACA;AAEA,MAAMA,YAAY,GAAGC,OAAO,CAAC,QAAQ,CAAC,CAACD,YAAY;AACnD,MAAME,MAAM,GAAGD,OAAO,CAAC,QAAQ,CAAC;AAChC,MAAME,aAAa,GAAGF,OAAO,CAAC,uBAAuB,CAAC;AACtD,MAAMG,UAAU,GAAGH,OAAO,CAAC,cAAc,CAAC;AAC1C,MAAMI,iBAAiB,GAAGJ,OAAO,CAAC,6BAA6B,CAAC;AAChE,MAAMK,cAAc,GAAGL,OAAO,CAAC,0BAA0B,CAAC;AAC1D,MAAMM,WAAW,GAAGN,OAAO,CAAC,eAAe,CAAC;AAC5C,MAAMO,SAAS,GAAGP,OAAO,CAAC,4BAA4B,CAAC;AACvD,MAAMQ,KAAK,GAAGR,OAAO,CAAC,iBAAiB,CAAC;AACxC,MAAMS,GAAG,GAAGT,OAAO,CAAC,eAAe,CAAC;AACpC,MAAMU,kBAAkB,GAAGV,OAAO,CAAC,8BAA8B,CAAC;AAClE,MAAMW,UAAU,GAAGX,OAAO,CAAC,6BAA6B,CAAC;AACzD,MAAMY,2BAA2B,GAAGZ,OAAO,CAAC,6CAA6C,CAAC;AAC1F,MAAMa,QAAQ,GAAGb,OAAO,CAAC,2BAA2B,CAAC;AACrD,MAAMc,KAAK,GAAGd,OAAO,CAAC,wBAAwB,CAAC;AAC/C,MAAMe,KAAK,GAAGf,OAAO,CAAC,OAAO,CAAC;AAC9B,MAAMgB,wBAAwB,GAAGhB,OAAO,CAAC,6CAA6C,CAAC;AACvF,MAAMiB,eAAe,GAAGjB,OAAO,CAAC,sCAAsC,CAAC;AACvE,MAAMkB,KAAK,GAAGlB,OAAO,CAAC,SAAS,CAAC;AAChC,MAAMmB,WAAW,GAAGnB,OAAO,CAAC,gCAAgC,CAAC;AAC7D,MAAMoB,IAAI,GAAGpB,OAAO,CAAC,MAAM,CAAC;AAE5B,MAAMqB,sBAAsB,GAAG,aAAa;AAE5C,IAAIC,aAAa;AAEjB,MAAMC,UAAU,GAAGvB,OAAO,CAAC,aAAa,CAAC,CAACwB,wBAAwB;AAClE,MAAMC,aAAa,GAAGzB,OAAO,CAAC,4BAA4B,CAAC,CAAC0B,mBAAmB;AAC/E,MAAMC,SAAS,GAAGJ,UAAU,CAACK,MAAM,CAACH,aAAa,CAAC,CAChDI,MAAM,CAAC,CAACC,CAAC,EAAEC,IAAI,KAAKD,CAAC,CAACE,GAAG,CAACD,IAAI,CAAC,EAAE,IAAIE,GAAG,CAAC,CAAC,CAAC;AAE7C,MAAMC,MAAM,GAAGhB,KAAK,CAACgB,MAAM;AAE3B,IAAIC,EAAE,GAAG,CAAC;AAEV,MAAMC,QAAQ,GAAG,OAAO;;AAExB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,MAAMA,CAACC,GAAG,EAAEC,OAAO,EAAE;EAC5B,IAAI,EAAE,IAAI,YAAYF,MAAM,CAAC,EAAE;IAC7B,OAAO,IAAIA,MAAM,CAACC,GAAG,EAAEC,OAAO,CAAC;EACjC;EAEA,IAAI,CAACD,GAAG,GAAGA,GAAG;EACd,IAAI,CAACE,KAAK,GAAG,CAAC,CAAC;EACf,IAAI,CAACC,OAAO,GAAG,CAAC,CAAC;EACjB,IAAI,CAACC,QAAQ,GAAG,CAAC,CAAC;EAClB,IAAI,CAACC,QAAQ,GAAG,CAAC,CAAC;EAClB,IAAI,CAACC,iBAAiB,GAAG,CAAC,CAAC;EAC3B,IAAI,CAACC,MAAM,GAAG,CAAC,CAAC;EAChB,IAAI,CAACC,QAAQ,GAAG,CAAC,CAAC;EAClB,IAAI,CAACC,SAAS,GAAG,EAAE;EACnB,IAAI,CAACC,QAAQ,GAAG,EAAE;EAClB,IAAI,CAACC,cAAc,GAAG,EAAE;EACxB,IAAI,CAACC,OAAO,GAAIX,OAAO,IAAIA,OAAO,CAACW,OAAO,IAAK,CAAC,CAAC;EACjD,IAAI,CAACC,aAAa,GAAG,CAAC,CAAC;EACvB,IAAI,CAACC,OAAO,GAAIb,OAAO,IAAIA,OAAO,CAACa,OAAO,IAAK,CAAC,CAAC;EACjD,IAAI,CAACC,IAAI,GAAG,CAAC,CAAC;EACd,IAAI,CAACC,KAAK,GAAIf,OAAO,IAAIA,OAAO,CAACe,KAAK,IAAK,CAAC,CAAC;EAC7C,IAAI,CAACC,YAAY,GAAG,EAAE;EACtB,IAAI,CAACC,OAAO,GAAG,EAAE;EACjB;EACA,IAAI,CAACC,GAAG,GAAG,EAAEtB,EAAE;EACf,IAAI,CAACuB,QAAQ,GAAG,EAAE;EAElB,IAAI,CAAC5B,CAAC,GAAG;IACP6B,KAAK,EAAE,IAAI1D,MAAM,CAAC;EACpB,CAAC;EACD,IAAI,CAACsC,OAAO,GAAG,IAAI,CAACqB,cAAc,CAACrB,OAAO,CAAC;;EAE3C;EACA,IAAIsB,KAAK,CAACC,OAAO,CAACxB,GAAG,CAAC,EAAE;IACtB,KAAK,MAAMyB,UAAU,IAAIzB,GAAG,EAAE;MAC5B,IAAI,CAACN,GAAG,CAAC+B,UAAU,CAAC;IACtB;EACF,CAAC,MAAM,IAAIzB,GAAG,EAAE;IACd,IAAI,CAACN,GAAG,CAACM,GAAG,CAAC;EACf;;EAEA;EACA,IAAIC,OAAO,IAAIA,OAAO,CAACI,QAAQ,EAAE;IAC/B,MAAMA,QAAQ,GAAGJ,OAAO,CAACI,QAAQ;IACjC,MAAMqB,SAAS,GAAGC,MAAM,CAACC,IAAI,CAACvB,QAAQ,CAAC;IACvC,KAAK,MAAMwB,QAAQ,IAAIH,SAAS,EAAE;MAChC,MAAMI,WAAW,GAAGzB,QAAQ,CAACwB,QAAQ,CAAC,CAAC5B,OAAO,GAAGI,QAAQ,CAACwB,QAAQ,CAAC,CAAC5B,OAAO,GAAG8B,SAAS;MACvF,MAAMC,OAAO,GAAG,IAAI,CAACA,OAAO,CAACH,QAAQ,EAAEC,WAAW,CAAC;MAEnD,IAAIzB,QAAQ,CAACwB,QAAQ,CAAC,CAAC1D,GAAG,EAAE;QAC1B6D,OAAO,CAAC7D,GAAG,CAACkC,QAAQ,CAACwB,QAAQ,CAAC,CAAC1D,GAAG,CAAC;MACrC;MAEA,IAAIkC,QAAQ,CAACwB,QAAQ,CAAC,CAACI,GAAG,EAAE;QAC1BD,OAAO,CAACC,GAAG,CAAC5B,QAAQ,CAACwB,QAAQ,CAAC,CAACI,GAAG,CAAC;MACrC;IACF;EACF;;EAEA;EACA,MAAMC,SAAS,GAAGlC,GAAG,IAAIA,GAAG,CAACmC,GAAG,IAAIvD,KAAK,CAACwD,QAAQ,CAACpC,GAAG,CAACmC,GAAG,CAAC;;EAE3D;EACA,MAAME,OAAO,GAAG,CAAC,IAAI,CAACnC,KAAK,CAAC,KAAK,CAAC,IAC7B,IAAI,CAACD,OAAO,CAACkC,GAAI,IAAI,CAACD,SAAS;EAEpC,IAAIG,OAAO,EAAE;IACXpE,SAAS,CAAC,IAAI,CAAC;EACjB;EAEA,IAAI,CAACqE,cAAc,CAAC,IAAI,CAACrC,OAAO,CAACsC,UAAU,CAAC;AAC9C;;AAEA;AACA;AACA;AACA;AACA,SAASC,WAAWA,CAACC,MAAM,EAAEvC,KAAK,EAAE;EAClC,KAAK,MAAMwC,IAAI,IAAIf,MAAM,CAACC,IAAI,CAAC1B,KAAK,CAAC,EAAE;IACrC,IAAIyC,KAAK,GAAG,IAAI;IAChB,IAAIzC,KAAK,CAACwC,IAAI,CAAC,IAAI,IAAI,EAAE;MACvBC,KAAK,GAAGzC,KAAK,CAACwC,IAAI,CAAC;IACrB,CAAC,MAAM;MACL,MAAMzC,OAAO,GAAG9B,GAAG,CAACsE,MAAM,CAACvC,KAAK,CAACwC,IAAI,CAAC,EAAE,SAAS,CAAC;MAClD,IAAIzC,OAAO,IAAI,IAAI,EAAE;QACnB;MACF;MAEA0C,KAAK,GAAG1C,OAAO,CAAC0C,KAAK;IACvB;IAEA,IAAI,CAACA,KAAK,EAAE;MACV;IACF;IAEA,MAAMC,IAAI,GAAGH,MAAM,CAACvC,KAAK,CAACwC,IAAI,CAAC,CAACA,IAAI;IACpC,IAAInB,KAAK,CAACC,OAAO,CAACmB,KAAK,CAAC,EAAE;MACxB,KAAK,MAAME,CAAC,IAAIF,KAAK,EAAE;QACrB,IAAI,OAAOE,CAAC,KAAK,QAAQ,EAAE;UACzB,MAAM,IAAIC,KAAK,CAAC,oCAAoC,GAAGF,IAAI,GAAG,QAAQ,GAAGC,CAAC,CAAC;QAC7E;QAEAJ,MAAM,CAACtC,OAAO,CAAC0C,CAAC,CAAC,GAAGD,IAAI;QAExBH,MAAM,CACJT,OAAO,CAACa,CAAC,CAAC,CACV1E,GAAG,CAAE,UAAS4E,CAAC,EAAE;UACf,OAAO,YAAW;YAChB,IAAI,OAAO,IAAI,CAAC5E,GAAG,KAAK,UAAU,EAAE;cAClC,OAAO,IAAI,CAACA,GAAG,CAAC4E,CAAC,CAAC;YACpB;YACA,OAAO,IAAI,CAACA,CAAC,CAAC;UAChB,CAAC;QACH,CAAC,CAAEH,IAAI,CAAC,CAAC,CACTX,GAAG,CAAE,UAASc,CAAC,EAAE;UACf,OAAO,UAASC,CAAC,EAAE;YACjB,OAAO,IAAI,CAACC,IAAI,CAACF,CAAC,EAAEC,CAAC,CAAC;UACxB,CAAC;QACH,CAAC,CAAEJ,IAAI,CAAC,CAAC;MACb;MAEA;IACF;IAEA,IAAI,OAAOD,KAAK,KAAK,QAAQ,EAAE;MAC7B,MAAM,IAAIG,KAAK,CAAC,oCAAoC,GAAGF,IAAI,GAAG,QAAQ,GAAGD,KAAK,CAAC;IACjF;IAEAF,MAAM,CAACtC,OAAO,CAACwC,KAAK,CAAC,GAAGC,IAAI;IAE5BH,MAAM,CACJT,OAAO,CAACW,KAAK,CAAC,CACdxE,GAAG,CAAE,UAAS4E,CAAC,EAAE;MACf,OAAO,YAAW;QAChB,IAAI,OAAO,IAAI,CAAC5E,GAAG,KAAK,UAAU,EAAE;UAClC,OAAO,IAAI,CAACA,GAAG,CAAC4E,CAAC,CAAC;QACpB;QACA,OAAO,IAAI,CAACA,CAAC,CAAC;MAChB,CAAC;IACH,CAAC,CAAEH,IAAI,CAAC,CAAC,CACTX,GAAG,CAAE,UAASc,CAAC,EAAE;MACf,OAAO,UAASC,CAAC,EAAE;QACjB,OAAO,IAAI,CAACC,IAAI,CAACF,CAAC,EAAEC,CAAC,CAAC;MACxB,CAAC;IACH,CAAC,CAAEJ,IAAI,CAAC,CAAC;EACb;AACF;;AAEA;AACA;AACA;AACA7C,MAAM,CAACmD,SAAS,GAAGvB,MAAM,CAACwB,MAAM,CAAC1F,YAAY,CAACyF,SAAS,CAAC;AACxDnD,MAAM,CAACmD,SAAS,CAACE,WAAW,GAAGrD,MAAM;AACrCA,MAAM,CAACmD,SAAS,CAACG,gBAAgB,GAAG,IAAI;;AAExC;AACA;AACA;;AAEA1B,MAAM,CAAC2B,cAAc,CAACvD,MAAM,CAACmD,SAAS,EAAE,aAAa,EAAE;EACrDK,YAAY,EAAE,KAAK;EACnBC,UAAU,EAAE,KAAK;EACjBC,QAAQ,EAAE;AACZ,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA9B,MAAM,CAAC2B,cAAc,CAACvD,MAAM,CAACmD,SAAS,EAAE,cAAc,EAAE;EACtDK,YAAY,EAAE,KAAK;EACnBC,UAAU,EAAE,IAAI;EAChBC,QAAQ,EAAE;AACZ,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA9B,MAAM,CAAC2B,cAAc,CAACvD,MAAM,CAACmD,SAAS,EAAE,UAAU,EAAE;EAClDK,YAAY,EAAE,KAAK;EACnBC,UAAU,EAAE,IAAI;EAChBC,QAAQ,EAAE;AACZ,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA1D,MAAM,CAACmD,SAAS,CAAClD,GAAG;;AAEpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAD,MAAM,CAACmD,SAAS,CAAChD,KAAK;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAH,MAAM,CAACmD,SAAS,CAACnC,IAAI;;AAErB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAhB,MAAM,CAACmD,SAAS,CAAChF,KAAK,GAAG,YAAW;EAClC,MAAMsB,CAAC,GAAG,IAAI,CAACkE,MAAM,CAAC,CAAC;;EAEvB;EACAlE,CAAC,CAACmE,EAAE,CAAC,MAAM,EAAEX,CAAC,IAAI,IAAI,CAACY,IAAI,CAAC,MAAM,EAAEZ,CAAC,CAAC,CA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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}