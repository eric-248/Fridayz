{"ast":null,"code":"'use strict';\n\n/*!\n * Module dependencies.\n */\nconst CastError = require('../error/cast');\nconst SchemaType = require('../schemaType');\nconst castBigInt = require('../cast/bigint');\n\n/**\n * BigInt SchemaType constructor.\n *\n * @param {String} path\n * @param {Object} options\n * @inherits SchemaType\n * @api public\n */\n\nfunction SchemaBigInt(path, options) {\n  SchemaType.call(this, path, options, 'BigInt');\n}\n\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api public\n */\nSchemaBigInt.schemaName = 'BigInt';\nSchemaBigInt.defaultOptions = {};\n\n/*!\n * Inherits from SchemaType.\n */\nSchemaBigInt.prototype = Object.create(SchemaType.prototype);\nSchemaBigInt.prototype.constructor = SchemaBigInt;\n\n/*!\n * ignore\n */\n\nSchemaBigInt._cast = castBigInt;\n\n/**\n * Sets a default option for all BigInt instances.\n *\n * #### Example:\n *\n *     // Make all bigints required by default\n *     mongoose.Schema.BigInt.set('required', true);\n *\n * @param {String} option The option you'd like to set the value for\n * @param {Any} value value for option\n * @return {undefined}\n * @function set\n * @static\n * @api public\n */\n\nSchemaBigInt.set = SchemaType.set;\nSchemaBigInt.setters = [];\n\n/**\n * Attaches a getter for all BigInt instances\n *\n * #### Example:\n *\n *     // Convert bigints to numbers\n *     mongoose.Schema.BigInt.get(v => v == null ? v : Number(v));\n *\n * @param {Function} getter\n * @return {this}\n * @function get\n * @static\n * @api public\n */\n\nSchemaBigInt.get = SchemaType.get;\n\n/**\n * Get/set the function used to cast arbitrary values to booleans.\n *\n * #### Example:\n *\n *     // Make Mongoose cast empty string '' to false.\n *     const original = mongoose.Schema.BigInt.cast();\n *     mongoose.Schema.BigInt.cast(v => {\n *       if (v === '') {\n *         return false;\n *       }\n *       return original(v);\n *     });\n *\n *     // Or disable casting entirely\n *     mongoose.Schema.BigInt.cast(false);\n *\n * @param {Function} caster\n * @return {Function}\n * @function get\n * @static\n * @api public\n */\n\nSchemaBigInt.cast = function cast(caster) {\n  if (arguments.length === 0) {\n    return this._cast;\n  }\n  if (caster === false) {\n    caster = this._defaultCaster;\n  }\n  this._cast = caster;\n  return this._cast;\n};\n\n/*!\n * ignore\n */\n\nSchemaBigInt._checkRequired = v => v != null;\n\n/**\n * Override the function the required validator uses to check whether a value\n * passes the `required` check.\n *\n * @param {Function} fn\n * @return {Function}\n * @function checkRequired\n * @static\n * @api public\n */\n\nSchemaBigInt.checkRequired = SchemaType.checkRequired;\n\n/**\n * Check if the given value satisfies a required validator.\n *\n * @param {Any} value\n * @return {Boolean}\n * @api public\n */\n\nSchemaBigInt.prototype.checkRequired = function (value) {\n  return this.constructor._checkRequired(value);\n};\n\n/**\n * Casts to bigint\n *\n * @param {Object} value\n * @param {Object} model this value is optional\n * @api private\n */\n\nSchemaBigInt.prototype.cast = function (value) {\n  let castBigInt;\n  if (typeof this._castFunction === 'function') {\n    castBigInt = this._castFunction;\n  } else if (typeof this.constructor.cast === 'function') {\n    castBigInt = this.constructor.cast();\n  } else {\n    castBigInt = SchemaBigInt.cast();\n  }\n  try {\n    return castBigInt(value);\n  } catch (error) {\n    throw new CastError('BigInt', value, this.path, error, this);\n  }\n};\n\n/*!\n * ignore\n */\n\nSchemaBigInt.$conditionalHandlers = {\n  ...SchemaType.prototype.$conditionalHandlers,\n  $gt: handleSingle,\n  $gte: handleSingle,\n  $lt: handleSingle,\n  $lte: handleSingle\n};\n\n/*!\n * ignore\n */\n\nfunction handleSingle(val, context) {\n  return this.castForQuery(null, val, context);\n}\n\n/**\n * Casts contents for queries.\n *\n * @param {String} $conditional\n * @param {any} val\n * @api private\n */\n\nSchemaBigInt.prototype.castForQuery = function ($conditional, val, context) {\n  let handler;\n  if ($conditional != null) {\n    handler = SchemaBigInt.$conditionalHandlers[$conditional];\n    if (handler) {\n      return handler.call(this, val);\n    }\n    return this.applySetters(null, val, context);\n  }\n  try {\n    return this.applySetters(val, context);\n  } catch (err) {\n    if (err instanceof CastError && err.path === this.path && this.$fullPath != null) {\n      err.path = this.$fullPath;\n    }\n    throw err;\n  }\n};\n\n/**\n *\n * @api private\n */\n\nSchemaBigInt.prototype._castNullish = function _castNullish(v) {\n  if (typeof v === 'undefined') {\n    return v;\n  }\n  const castBigInt = typeof this.constructor.cast === 'function' ? this.constructor.cast() : SchemaBigInt.cast();\n  if (castBigInt == null) {\n    return v;\n  }\n  return v;\n};\n\n/*!\n * Module exports.\n */\n\nmodule.exports = SchemaBigInt;","map":{"version":3,"names":["CastError","require","SchemaType","castBigInt","SchemaBigInt","path","options","call","schemaName","defaultOptions","prototype","Object","create","constructor","_cast","set","setters","get","cast","caster","arguments","length","_defaultCaster","_checkRequired","v","checkRequired","value","_castFunction","error","$conditionalHandlers","$gt","handleSingle","$gte","$lt","$lte","val","context","castForQuery","$conditional","handler","applySetters","err","$fullPath","_castNullish","module","exports"],"sources":["C:/Users/lrmir/OneDrive/Desktop/cs35L/newFridayz/Fridayz/frontend/node_modules/mongoose/lib/schema/bigint.js"],"sourcesContent":["'use strict';\n\n/*!\n * Module dependencies.\n */\n\nconst CastError = require('../error/cast');\nconst SchemaType = require('../schemaType');\nconst castBigInt = require('../cast/bigint');\n\n/**\n * BigInt SchemaType constructor.\n *\n * @param {String} path\n * @param {Object} options\n * @inherits SchemaType\n * @api public\n */\n\nfunction SchemaBigInt(path, options) {\n  SchemaType.call(this, path, options, 'BigInt');\n}\n\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api public\n */\nSchemaBigInt.schemaName = 'BigInt';\n\nSchemaBigInt.defaultOptions = {};\n\n/*!\n * Inherits from SchemaType.\n */\nSchemaBigInt.prototype = Object.create(SchemaType.prototype);\nSchemaBigInt.prototype.constructor = SchemaBigInt;\n\n/*!\n * ignore\n */\n\nSchemaBigInt._cast = castBigInt;\n\n/**\n * Sets a default option for all BigInt instances.\n *\n * #### Example:\n *\n *     // Make all bigints required by default\n *     mongoose.Schema.BigInt.set('required', true);\n *\n * @param {String} option The option you'd like to set the value for\n * @param {Any} value value for option\n * @return {undefined}\n * @function set\n * @static\n * @api public\n */\n\nSchemaBigInt.set = SchemaType.set;\n\nSchemaBigInt.setters = [];\n\n/**\n * Attaches a getter for all BigInt instances\n *\n * #### Example:\n *\n *     // Convert bigints to numbers\n *     mongoose.Schema.BigInt.get(v => v == null ? v : Number(v));\n *\n * @param {Function} getter\n * @return {this}\n * @function get\n * @static\n * @api public\n */\n\nSchemaBigInt.get = SchemaType.get;\n\n/**\n * Get/set the function used to cast arbitrary values to booleans.\n *\n * #### Example:\n *\n *     // Make Mongoose cast empty string '' to false.\n *     const original = mongoose.Schema.BigInt.cast();\n *     mongoose.Schema.BigInt.cast(v => {\n *       if (v === '') {\n *         return false;\n *       }\n *       return original(v);\n *     });\n *\n *     // Or disable casting entirely\n *     mongoose.Schema.BigInt.cast(false);\n *\n * @param {Function} caster\n * @return {Function}\n * @function get\n * @static\n * @api public\n */\n\nSchemaBigInt.cast = function cast(caster) {\n  if (arguments.length === 0) {\n    return this._cast;\n  }\n  if (caster === false) {\n    caster = this._defaultCaster;\n  }\n  this._cast = caster;\n\n  return this._cast;\n};\n\n/*!\n * ignore\n */\n\nSchemaBigInt._checkRequired = v => v != null;\n\n/**\n * Override the function the required validator uses to check whether a value\n * passes the `required` check.\n *\n * @param {Function} fn\n * @return {Function}\n * @function checkRequired\n * @static\n * @api public\n */\n\nSchemaBigInt.checkRequired = SchemaType.checkRequired;\n\n/**\n * Check if the given value satisfies a required validator.\n *\n * @param {Any} value\n * @return {Boolean}\n * @api public\n */\n\nSchemaBigInt.prototype.checkRequired = function(value) {\n  return this.constructor._checkRequired(value);\n};\n\n/**\n * Casts to bigint\n *\n * @param {Object} value\n * @param {Object} model this value is optional\n * @api private\n */\n\nSchemaBigInt.prototype.cast = function(value) {\n  let castBigInt;\n  if (typeof this._castFunction === 'function') {\n    castBigInt = this._castFunction;\n  } else if (typeof this.constructor.cast === 'function') {\n    castBigInt = this.constructor.cast();\n  } else {\n    castBigInt = SchemaBigInt.cast();\n  }\n\n  try {\n    return castBigInt(value);\n  } catch (error) {\n    throw new CastError('BigInt', value, this.path, error, this);\n  }\n};\n\n/*!\n * ignore\n */\n\nSchemaBigInt.$conditionalHandlers = {\n  ...SchemaType.prototype.$conditionalHandlers,\n  $gt: handleSingle,\n  $gte: handleSingle,\n  $lt: handleSingle,\n  $lte: handleSingle\n};\n\n/*!\n * ignore\n */\n\nfunction handleSingle(val, context) {\n  return this.castForQuery(null, val, context);\n}\n\n/**\n * Casts contents for queries.\n *\n * @param {String} $conditional\n * @param {any} val\n * @api private\n */\n\nSchemaBigInt.prototype.castForQuery = function($conditional, val, context) {\n  let handler;\n  if ($conditional != null) {\n    handler = SchemaBigInt.$conditionalHandlers[$conditional];\n\n    if (handler) {\n      return handler.call(this, val);\n    }\n\n    return this.applySetters(null, val, context);\n  }\n\n  try {\n    return this.applySetters(val, context);\n  } catch (err) {\n    if (err instanceof CastError && err.path === this.path && this.$fullPath != null) {\n      err.path = this.$fullPath;\n    }\n    throw err;\n  }\n};\n\n/**\n *\n * @api private\n */\n\nSchemaBigInt.prototype._castNullish = function _castNullish(v) {\n  if (typeof v === 'undefined') {\n    return v;\n  }\n  const castBigInt = typeof this.constructor.cast === 'function' ?\n    this.constructor.cast() :\n    SchemaBigInt.cast();\n  if (castBigInt == null) {\n    return v;\n  }\n  return v;\n};\n\n/*!\n * Module exports.\n */\n\nmodule.exports = SchemaBigInt;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}