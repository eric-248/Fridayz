{"ast":null,"code":"'use strict';\n\nconst Document = require('../../../document');\nconst ArraySubdocument = require('../../arraySubdocument');\nconst MongooseError = require('../../../error/mongooseError');\nconst cleanModifiedSubpaths = require('../../../helpers/document/cleanModifiedSubpaths');\nconst clone = require('../../../helpers/clone');\nconst internalToObjectOptions = require('../../../options').internalToObjectOptions;\nconst mpath = require('mpath');\nconst utils = require('../../../utils');\nconst isBsonType = require('../../../helpers/isBsonType');\nconst arrayAtomicsSymbol = require('../../../helpers/symbols').arrayAtomicsSymbol;\nconst arrayParentSymbol = require('../../../helpers/symbols').arrayParentSymbol;\nconst arrayPathSymbol = require('../../../helpers/symbols').arrayPathSymbol;\nconst arraySchemaSymbol = require('../../../helpers/symbols').arraySchemaSymbol;\nconst populateModelSymbol = require('../../../helpers/symbols').populateModelSymbol;\nconst slicedSymbol = Symbol('mongoose#Array#sliced');\nconst _basePush = Array.prototype.push;\n\n/*!\n * ignore\n */\n\nconst methods = {\n  /**\n   * Depopulates stored atomic operation values as necessary for direct insertion to MongoDB.\n   *\n   * If no atomics exist, we return all array values after conversion.\n   *\n   * @return {Array}\n   * @method $__getAtomics\n   * @memberOf MongooseArray\n   * @instance\n   * @api private\n   */\n\n  $__getAtomics() {\n    const ret = [];\n    const keys = Object.keys(this[arrayAtomicsSymbol] || {});\n    let i = keys.length;\n    const opts = Object.assign({}, internalToObjectOptions, {\n      _isNested: true\n    });\n    if (i === 0) {\n      ret[0] = ['$set', this.toObject(opts)];\n      return ret;\n    }\n    while (i--) {\n      const op = keys[i];\n      let val = this[arrayAtomicsSymbol][op];\n\n      // the atomic values which are arrays are not MongooseArrays. we\n      // need to convert their elements as if they were MongooseArrays\n      // to handle populated arrays versus DocumentArrays properly.\n      if (utils.isMongooseObject(val)) {\n        val = val.toObject(opts);\n      } else if (Array.isArray(val)) {\n        val = this.toObject.call(val, opts);\n      } else if (val != null && Array.isArray(val.$each)) {\n        val.$each = this.toObject.call(val.$each, opts);\n      } else if (val != null && typeof val.valueOf === 'function') {\n        val = val.valueOf();\n      }\n      if (op === '$addToSet') {\n        val = {\n          $each: val\n        };\n      }\n      ret.push([op, val]);\n    }\n    return ret;\n  },\n  /*!\n   * ignore\n   */\n\n  $atomics() {\n    return this[arrayAtomicsSymbol];\n  },\n  /*!\n   * ignore\n   */\n\n  $parent() {\n    return this[arrayParentSymbol];\n  },\n  /*!\n   * ignore\n   */\n\n  $path() {\n    return this[arrayPathSymbol];\n  },\n  /**\n   * Atomically shifts the array at most one time per document `save()`.\n   *\n   * #### Note:\n   *\n   * _Calling this multiple times on an array before saving sends the same command as calling it once._\n   * _This update is implemented using the MongoDB [$pop](https://www.mongodb.com/docs/manual/reference/operator/update/pop/) method which enforces this restriction._\n   *\n   *      doc.array = [1,2,3];\n   *\n   *      const shifted = doc.array.$shift();\n   *      console.log(shifted); // 1\n   *      console.log(doc.array); // [2,3]\n   *\n   *      // no affect\n   *      shifted = doc.array.$shift();\n   *      console.log(doc.array); // [2,3]\n   *\n   *      doc.save(function (err) {\n   *        if (err) return handleError(err);\n   *\n   *        // we saved, now $shift works again\n   *        shifted = doc.array.$shift();\n   *        console.log(shifted ); // 2\n   *        console.log(doc.array); // [3]\n   *      })\n   *\n   * @api public\n   * @memberOf MongooseArray\n   * @instance\n   * @method $shift\n   * @see mongodb https://www.mongodb.com/docs/manual/reference/operator/update/pop/\n   */\n\n  $shift() {\n    this._registerAtomic('$pop', -1);\n    this._markModified();\n\n    // only allow shifting once\n    const __array = this.__array;\n    if (__array._shifted) {\n      return;\n    }\n    __array._shifted = true;\n    return [].shift.call(__array);\n  },\n  /**\n   * Pops the array atomically at most one time per document `save()`.\n   *\n   * #### NOTE:\n   *\n   * _Calling this multiple times on an array before saving sends the same command as calling it once._\n   * _This update is implemented using the MongoDB [$pop](https://www.mongodb.com/docs/manual/reference/operator/update/pop/) method which enforces this restriction._\n   *\n   *      doc.array = [1,2,3];\n   *\n   *      const popped = doc.array.$pop();\n   *      console.log(popped); // 3\n   *      console.log(doc.array); // [1,2]\n   *\n   *      // no affect\n   *      popped = doc.array.$pop();\n   *      console.log(doc.array); // [1,2]\n   *\n   *      doc.save(function (err) {\n   *        if (err) return handleError(err);\n   *\n   *        // we saved, now $pop works again\n   *        popped = doc.array.$pop();\n   *        console.log(popped); // 2\n   *        console.log(doc.array); // [1]\n   *      })\n   *\n   * @api public\n   * @method $pop\n   * @memberOf MongooseArray\n   * @instance\n   * @see mongodb https://www.mongodb.com/docs/manual/reference/operator/update/pop/\n   * @method $pop\n   * @memberOf MongooseArray\n   */\n\n  $pop() {\n    this._registerAtomic('$pop', 1);\n    this._markModified();\n\n    // only allow popping once\n    if (this._popped) {\n      return;\n    }\n    this._popped = true;\n    return [].pop.call(this);\n  },\n  /*!\n   * ignore\n   */\n\n  $schema() {\n    return this[arraySchemaSymbol];\n  },\n  /**\n   * Casts a member based on this arrays schema.\n   *\n   * @param {any} value\n   * @return value the casted value\n   * @method _cast\n   * @api private\n   * @memberOf MongooseArray\n   */\n\n  _cast(value) {\n    let populated = false;\n    let Model;\n    const parent = this[arrayParentSymbol];\n    if (parent) {\n      populated = parent.$populated(this[arrayPathSymbol], true);\n    }\n    if (populated && value !== null && value !== undefined) {\n      // cast to the populated Models schema\n      Model = populated.options[populateModelSymbol];\n      if (Model == null) {\n        throw new MongooseError('No populated model found for path `' + this[arrayPathSymbol] + '`. This is likely a bug in Mongoose, please report an issue on github.com/Automattic/mongoose.');\n      }\n\n      // only objects are permitted so we can safely assume that\n      // non-objects are to be interpreted as _id\n      if (Buffer.isBuffer(value) || isBsonType(value, 'ObjectId') || !utils.isObject(value)) {\n        value = {\n          _id: value\n        };\n      }\n\n      // gh-2399\n      // we should cast model only when it's not a discriminator\n      const isDisc = value.schema && value.schema.discriminatorMapping && value.schema.discriminatorMapping.key !== undefined;\n      if (!isDisc) {\n        value = new Model(value);\n      }\n      return this[arraySchemaSymbol].caster.applySetters(value, parent, true);\n    }\n    return this[arraySchemaSymbol].caster.applySetters(value, parent, false);\n  },\n  /**\n   * Internal helper for .map()\n   *\n   * @api private\n   * @return {Number}\n   * @method _mapCast\n   * @memberOf MongooseArray\n   */\n\n  _mapCast(val, index) {\n    return this._cast(val, this.length + index);\n  },\n  /**\n   * Marks this array as modified.\n   *\n   * If it bubbles up from an embedded document change, then it takes the following arguments (otherwise, takes 0 arguments)\n   *\n   * @param {ArraySubdocument} subdoc the embedded doc that invoked this method on the Array\n   * @param {String} embeddedPath the path which changed in the subdoc\n   * @method _markModified\n   * @api private\n   * @memberOf MongooseArray\n   */\n\n  _markModified(elem) {\n    const parent = this[arrayParentSymbol];\n    let dirtyPath;\n    if (parent) {\n      dirtyPath = this[arrayPathSymbol];\n      if (arguments.length) {\n        dirtyPath = dirtyPath + '.' + elem;\n      }\n      if (dirtyPath != null && dirtyPath.endsWith('.$')) {\n        return this;\n      }\n      parent.markModified(dirtyPath, arguments.length !== 0 ? elem : parent);\n    }\n    return this;\n  },\n  /**\n   * Register an atomic operation with the parent.\n   *\n   * @param {Array} op operation\n   * @param {any} val\n   * @method _registerAtomic\n   * @api private\n   * @memberOf MongooseArray\n   */\n\n  _registerAtomic(op, val) {\n    if (this[slicedSymbol]) {\n      return;\n    }\n    if (op === '$set') {\n      // $set takes precedence over all other ops.\n      // mark entire array modified.\n      this[arrayAtomicsSymbol] = {\n        $set: val\n      };\n      cleanModifiedSubpaths(this[arrayParentSymbol], this[arrayPathSymbol]);\n      this._markModified();\n      return this;\n    }\n    const atomics = this[arrayAtomicsSymbol];\n\n    // reset pop/shift after save\n    if (op === '$pop' && !('$pop' in atomics)) {\n      const _this = this;\n      this[arrayParentSymbol].once('save', function () {\n        _this._popped = _this._shifted = null;\n      });\n    }\n\n    // check for impossible $atomic combos (Mongo denies more than one\n    // $atomic op on a single path\n    if (atomics.$set || Object.keys(atomics).length && !(op in atomics)) {\n      // a different op was previously registered.\n      // save the entire thing.\n      this[arrayAtomicsSymbol] = {\n        $set: this\n      };\n      return this;\n    }\n    let selector;\n    if (op === '$pullAll' || op === '$addToSet') {\n      atomics[op] || (atomics[op] = []);\n      atomics[op] = atomics[op].concat(val);\n    } else if (op === '$pullDocs') {\n      const pullOp = atomics['$pull'] || (atomics['$pull'] = {});\n      if (val[0] instanceof ArraySubdocument) {\n        selector = pullOp['$or'] || (pullOp['$or'] = []);\n        Array.prototype.push.apply(selector, val.map(v => {\n          return v.toObject({\n            transform: (doc, ret) => {\n              if (v == null || v.$__ == null) {\n                return ret;\n              }\n              Object.keys(v.$__.activePaths.getStatePaths('default')).forEach(path => {\n                mpath.unset(path, ret);\n                _minimizePath(ret, path);\n              });\n              return ret;\n            },\n            virtuals: false\n          });\n        }));\n      } else {\n        selector = pullOp['_id'] || (pullOp['_id'] = {\n          $in: []\n        });\n        selector['$in'] = selector['$in'].concat(val);\n      }\n    } else if (op === '$push') {\n      atomics.$push = atomics.$push || {\n        $each: []\n      };\n      if (val != null && utils.hasUserDefinedProperty(val, '$each')) {\n        atomics.$push = val;\n      } else {\n        if (val.length === 1) {\n          atomics.$push.$each.push(val[0]);\n        } else if (val.length < 10000) {\n          atomics.$push.$each.push(...val);\n        } else {\n          for (const v of val) {\n            atomics.$push.$each.push(v);\n          }\n        }\n      }\n    } else {\n      atomics[op] = val;\n    }\n    return this;\n  },\n  /**\n   * Adds values to the array if not already present.\n   *\n   * #### Example:\n   *\n   *     console.log(doc.array) // [2,3,4]\n   *     const added = doc.array.addToSet(4,5);\n   *     console.log(doc.array) // [2,3,4,5]\n   *     console.log(added)     // [5]\n   *\n   * @param {...any} [args]\n   * @return {Array} the values that were added\n   * @memberOf MongooseArray\n   * @api public\n   * @method addToSet\n   */\n\n  addToSet() {\n    _checkManualPopulation(this, arguments);\n    const values = [].map.call(arguments, this._mapCast, this);\n    const added = [];\n    let type = '';\n    if (values[0] instanceof ArraySubdocument) {\n      type = 'doc';\n    } else if (values[0] instanceof Date) {\n      type = 'date';\n    } else if (isBsonType(values[0], 'ObjectId')) {\n      type = 'ObjectId';\n    }\n    const rawValues = utils.isMongooseArray(values) ? values.__array : values;\n    const rawArray = utils.isMongooseArray(this) ? this.__array : this;\n    rawValues.forEach(function (v) {\n      let found;\n      const val = +v;\n      switch (type) {\n        case 'doc':\n          found = this.some(function (doc) {\n            return doc.equals(v);\n          });\n          break;\n        case 'date':\n          found = this.some(function (d) {\n            return +d === val;\n          });\n          break;\n        case 'ObjectId':\n          found = this.find(o => o.toString() === v.toString());\n          break;\n        default:\n          found = ~this.indexOf(v);\n          break;\n      }\n      if (!found) {\n        this._markModified();\n        rawArray.push(v);\n        this._registerAtomic('$addToSet', v);\n        [].push.call(added, v);\n      }\n    }, this);\n    return added;\n  },\n  /**\n   * Returns the number of pending atomic operations to send to the db for this array.\n   *\n   * @api private\n   * @return {Number}\n   * @method hasAtomics\n   * @memberOf MongooseArray\n   */\n\n  hasAtomics() {\n    if (!utils.isPOJO(this[arrayAtomicsSymbol])) {\n      return 0;\n    }\n    return Object.keys(this[arrayAtomicsSymbol]).length;\n  },\n  /**\n   * Return whether or not the `obj` is included in the array.\n   *\n   * @param {Object} obj the item to check\n   * @param {Number} fromIndex\n   * @return {Boolean}\n   * @api public\n   * @method includes\n   * @memberOf MongooseArray\n   */\n\n  includes(obj, fromIndex) {\n    const ret = this.indexOf(obj, fromIndex);\n    return ret !== -1;\n  },\n  /**\n   * Return the index of `obj` or `-1` if not found.\n   *\n   * @param {Object} obj the item to look for\n   * @param {Number} fromIndex\n   * @return {Number}\n   * @api public\n   * @method indexOf\n   * @memberOf MongooseArray\n   */\n\n  indexOf(obj, fromIndex) {\n    if (isBsonType(obj, 'ObjectId')) {\n      obj = obj.toString();\n    }\n    fromIndex = fromIndex == null ? 0 : fromIndex;\n    const len = this.length;\n    for (let i = fromIndex; i < len; ++i) {\n      if (obj == this[i]) {\n        return i;\n      }\n    }\n    return -1;\n  },\n  /**\n   * Helper for console.log\n   *\n   * @api public\n   * @method inspect\n   * @memberOf MongooseArray\n   */\n\n  inspect() {\n    return JSON.stringify(this);\n  },\n  /**\n   * Pushes items to the array non-atomically.\n   *\n   * #### Note:\n   *\n   * _marks the entire array as modified, which if saved, will store it as a `$set` operation, potentially overwritting any changes that happen between when you retrieved the object and when you save it._\n   *\n   * @param {...any} [args]\n   * @api public\n   * @method nonAtomicPush\n   * @memberOf MongooseArray\n   */\n\n  nonAtomicPush() {\n    const values = [].map.call(arguments, this._mapCast, this);\n    this._markModified();\n    const ret = [].push.apply(this, values);\n    this._registerAtomic('$set', this);\n    return ret;\n  },\n  /**\n   * Wraps [`Array#pop`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/pop) with proper change tracking.\n   *\n   * #### Note:\n   *\n   * _marks the entire array as modified which will pass the entire thing to $set potentially overwriting any changes that happen between when you retrieved the object and when you save it._\n   *\n   * @see MongooseArray#$pop https://mongoosejs.com/docs/api/array.html#MongooseArray.prototype.$pop()\n   * @api public\n   * @method pop\n   * @memberOf MongooseArray\n   */\n\n  pop() {\n    this._markModified();\n    const ret = [].pop.call(this);\n    this._registerAtomic('$set', this);\n    return ret;\n  },\n  /**\n   * Pulls items from the array atomically. Equality is determined by casting\n   * the provided value to an embedded document and comparing using\n   * [the `Document.equals()` function.](https://mongoosejs.com/docs/api/document.html#Document.prototype.equals())\n   *\n   * #### Example:\n   *\n   *     doc.array.pull(ObjectId)\n   *     doc.array.pull({ _id: 'someId' })\n   *     doc.array.pull(36)\n   *     doc.array.pull('tag 1', 'tag 2')\n   *\n   * To remove a document from a subdocument array we may pass an object with a matching `_id`.\n   *\n   *     doc.subdocs.push({ _id: 4815162342 })\n   *     doc.subdocs.pull({ _id: 4815162342 }) // removed\n   *\n   * Or we may passing the _id directly and let mongoose take care of it.\n   *\n   *     doc.subdocs.push({ _id: 4815162342 })\n   *     doc.subdocs.pull(4815162342); // works\n   *\n   * The first pull call will result in a atomic operation on the database, if pull is called repeatedly without saving the document, a $set operation is used on the complete array instead, overwriting possible changes that happened on the database in the meantime.\n   *\n   * @param {...any} [args]\n   * @see mongodb https://www.mongodb.com/docs/manual/reference/operator/update/pull/\n   * @api public\n   * @method pull\n   * @memberOf MongooseArray\n   */\n\n  pull() {\n    const values = [].map.call(arguments, (v, i) => this._cast(v, i, {\n      defaults: false\n    }), this);\n    const cur = this[arrayParentSymbol].get(this[arrayPathSymbol]);\n    let i = cur.length;\n    let mem;\n    this._markModified();\n    while (i--) {\n      mem = cur[i];\n      if (mem instanceof Document) {\n        const some = values.some(function (v) {\n          return mem.equals(v);\n        });\n        if (some) {\n          [].splice.call(cur, i, 1);\n        }\n      } else if (~cur.indexOf.call(values, mem)) {\n        [].splice.call(cur, i, 1);\n      }\n    }\n    if (values[0] instanceof ArraySubdocument) {\n      this._registerAtomic('$pullDocs', values.map(function (v) {\n        const _id = v.$__getValue('_id');\n        if (_id === undefined || v.$isDefault('_id')) {\n          return v;\n        }\n        return _id;\n      }));\n    } else {\n      this._registerAtomic('$pullAll', values);\n    }\n\n    // Might have modified child paths and then pulled, like\n    // `doc.children[1].name = 'test';` followed by\n    // `doc.children.remove(doc.children[0]);`. In this case we fall back\n    // to a `$set` on the whole array. See #3511\n    if (cleanModifiedSubpaths(this[arrayParentSymbol], this[arrayPathSymbol]) > 0) {\n      this._registerAtomic('$set', this);\n    }\n    return this;\n  },\n  /**\n   * Wraps [`Array#push`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/push) with proper change tracking.\n   *\n   * #### Example:\n   *\n   *     const schema = Schema({ nums: [Number] });\n   *     const Model = mongoose.model('Test', schema);\n   *\n   *     const doc = await Model.create({ nums: [3, 4] });\n   *     doc.nums.push(5); // Add 5 to the end of the array\n   *     await doc.save();\n   *\n   *     // You can also pass an object with `$each` as the\n   *     // first parameter to use MongoDB's `$position`\n   *     doc.nums.push({\n   *       $each: [1, 2],\n   *       $position: 0\n   *     });\n   *     doc.nums; // [1, 2, 3, 4, 5]\n   *\n   * @param {...Object} [args]\n   * @api public\n   * @method push\n   * @memberOf MongooseArray\n   */\n\n  push() {\n    let values = arguments;\n    let atomic = values;\n    const isOverwrite = values[0] != null && utils.hasUserDefinedProperty(values[0], '$each');\n    const arr = utils.isMongooseArray(this) ? this.__array : this;\n    if (isOverwrite) {\n      atomic = values[0];\n      values = values[0].$each;\n    }\n    if (this[arraySchemaSymbol] == null) {\n      return _basePush.apply(this, values);\n    }\n    _checkManualPopulation(this, values);\n    values = [].map.call(values, this._mapCast, this);\n    let ret;\n    const atomics = this[arrayAtomicsSymbol];\n    this._markModified();\n    if (isOverwrite) {\n      atomic.$each = values;\n      if ((atomics.$push && atomics.$push.$each && atomics.$push.$each.length || 0) !== 0 && atomics.$push.$position != atomic.$position) {\n        throw new MongooseError('Cannot call `Array#push()` multiple times ' + 'with different `$position`');\n      }\n      if (atomic.$position != null) {\n        [].splice.apply(arr, [atomic.$position, 0].concat(values));\n        ret = this.length;\n      } else {\n        ret = [].push.apply(arr, values);\n      }\n    } else {\n      if ((atomics.$push && atomics.$push.$each && atomics.$push.$each.length || 0) !== 0 && atomics.$push.$position != null) {\n        throw new MongooseError('Cannot call `Array#push()` multiple times ' + 'with different `$position`');\n      }\n      atomic = values;\n      ret = _basePush.apply(arr, values);\n    }\n    this._registerAtomic('$push', atomic);\n    return ret;\n  },\n  /**\n   * Alias of [pull](https://mongoosejs.com/docs/api/array.html#MongooseArray.prototype.pull())\n   *\n   * @see MongooseArray#pull https://mongoosejs.com/docs/api/array.html#MongooseArray.prototype.pull()\n   * @see mongodb https://www.mongodb.com/docs/manual/reference/operator/update/pull/\n   * @api public\n   * @memberOf MongooseArray\n   * @instance\n   * @method remove\n   */\n\n  remove() {\n    return this.pull.apply(this, arguments);\n  },\n  /**\n   * Sets the casted `val` at index `i` and marks the array modified.\n   *\n   * #### Example:\n   *\n   *     // given documents based on the following\n   *     const Doc = mongoose.model('Doc', new Schema({ array: [Number] }));\n   *\n   *     const doc = new Doc({ array: [2,3,4] })\n   *\n   *     console.log(doc.array) // [2,3,4]\n   *\n   *     doc.array.set(1,\"5\");\n   *     console.log(doc.array); // [2,5,4] // properly cast to number\n   *     doc.save() // the change is saved\n   *\n   *     // VS not using array#set\n   *     doc.array[1] = \"5\";\n   *     console.log(doc.array); // [2,\"5\",4] // no casting\n   *     doc.save() // change is not saved\n   *\n   * @return {Array} this\n   * @api public\n   * @method set\n   * @memberOf MongooseArray\n   */\n\n  set(i, val, skipModified) {\n    const arr = this.__array;\n    if (skipModified) {\n      arr[i] = val;\n      return this;\n    }\n    const value = methods._cast.call(this, val, i);\n    methods._markModified.call(this, i);\n    arr[i] = value;\n    return this;\n  },\n  /**\n   * Wraps [`Array#shift`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/unshift) with proper change tracking.\n   *\n   * #### Example:\n   *\n   *     doc.array = [2,3];\n   *     const res = doc.array.shift();\n   *     console.log(res) // 2\n   *     console.log(doc.array) // [3]\n   *\n   * #### Note:\n   *\n   * _marks the entire array as modified, which if saved, will store it as a `$set` operation, potentially overwritting any changes that happen between when you retrieved the object and when you save it._\n   *\n   * @api public\n   * @method shift\n   * @memberOf MongooseArray\n   */\n\n  shift() {\n    const arr = utils.isMongooseArray(this) ? this.__array : this;\n    this._markModified();\n    const ret = [].shift.call(arr);\n    this._registerAtomic('$set', this);\n    return ret;\n  },\n  /**\n   * Wraps [`Array#sort`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/sort) with proper change tracking.\n   *\n   * #### Note:\n   *\n   * _marks the entire array as modified, which if saved, will store it as a `$set` operation, potentially overwritting any changes that happen between when you retrieved the object and when you save it._\n   *\n   * @api public\n   * @method sort\n   * @memberOf MongooseArray\n   * @see MasteringJS: Array sort https://masteringjs.io/tutorials/fundamentals/array-sort\n   */\n\n  sort() {\n    const arr = utils.isMongooseArray(this) ? this.__array : this;\n    const ret = [].sort.apply(arr, arguments);\n    this._registerAtomic('$set', this);\n    return ret;\n  },\n  /**\n   * Wraps [`Array#splice`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/splice) with proper change tracking and casting.\n   *\n   * #### Note:\n   *\n   * _marks the entire array as modified, which if saved, will store it as a `$set` operation, potentially overwritting any changes that happen between when you retrieved the object and when you save it._\n   *\n   * @api public\n   * @method splice\n   * @memberOf MongooseArray\n   * @see MasteringJS: Array splice https://masteringjs.io/tutorials/fundamentals/array-splice\n   */\n\n  splice() {\n    let ret;\n    const arr = utils.isMongooseArray(this) ? this.__array : this;\n    this._markModified();\n    _checkManualPopulation(this, Array.prototype.slice.call(arguments, 2));\n    if (arguments.length) {\n      let vals;\n      if (this[arraySchemaSymbol] == null) {\n        vals = arguments;\n      } else {\n        vals = [];\n        for (let i = 0; i < arguments.length; ++i) {\n          vals[i] = i < 2 ? arguments[i] : this._cast(arguments[i], arguments[0] + (i - 2));\n        }\n      }\n      ret = [].splice.apply(arr, vals);\n      this._registerAtomic('$set', this);\n    }\n    return ret;\n  },\n  /*!\n   * ignore\n   */\n\n  toBSON() {\n    return this.toObject(internalToObjectOptions);\n  },\n  /**\n   * Returns a native js Array.\n   *\n   * @param {Object} options\n   * @return {Array}\n   * @api public\n   * @method toObject\n   * @memberOf MongooseArray\n   */\n\n  toObject(options) {\n    const arr = utils.isMongooseArray(this) ? this.__array : this;\n    if (options && options.depopulate) {\n      options = clone(options);\n      options._isNested = true;\n      // Ensure return value is a vanilla array, because in Node.js 6+ `map()`\n      // is smart enough to use the inherited array's constructor.\n      return [].concat(arr).map(function (doc) {\n        return doc instanceof Document ? doc.toObject(options) : doc;\n      });\n    }\n    return [].concat(arr);\n  },\n  $toObject() {\n    return this.constructor.prototype.toObject.apply(this, arguments);\n  },\n  /**\n   * Wraps [`Array#unshift`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/unshift) with proper change tracking.\n   *\n   * #### Note:\n   *\n   * _marks the entire array as modified, which if saved, will store it as a `$set` operation, potentially overwriting any changes that happen between when you retrieved the object and when you save it._\n   *\n   * @api public\n   * @method unshift\n   * @memberOf MongooseArray\n   */\n\n  unshift() {\n    _checkManualPopulation(this, arguments);\n    let values;\n    if (this[arraySchemaSymbol] == null) {\n      values = arguments;\n    } else {\n      values = [].map.call(arguments, this._cast, this);\n    }\n    const arr = utils.isMongooseArray(this) ? this.__array : this;\n    this._markModified();\n    [].unshift.apply(arr, values);\n    this._registerAtomic('$set', this);\n    return this.length;\n  }\n};\n\n/*!\n * ignore\n */\n\nfunction _isAllSubdocs(docs, ref) {\n  if (!ref) {\n    return false;\n  }\n  for (const arg of docs) {\n    if (arg == null) {\n      return false;\n    }\n    const model = arg.constructor;\n    if (!(arg instanceof Document) || model.modelName !== ref && model.baseModelName !== ref) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/*!\n * Minimize _just_ empty objects along the path chain specified\n * by `parts`, ignoring all other paths. Useful in cases where\n * you want to minimize after unsetting a path.\n *\n * #### Example:\n *\n *     const obj = { foo: { bar: { baz: {} } }, a: {} };\n *     _minimizePath(obj, 'foo.bar.baz');\n *     obj; // { a: {} }\n */\n\nfunction _minimizePath(obj, parts, i) {\n  if (typeof parts === 'string') {\n    if (parts.indexOf('.') === -1) {\n      return;\n    }\n    parts = mpath.stringToParts(parts);\n  }\n  i = i || 0;\n  if (i >= parts.length) {\n    return;\n  }\n  if (obj == null || typeof obj !== 'object') {\n    return;\n  }\n  _minimizePath(obj[parts[0]], parts, i + 1);\n  if (obj[parts[0]] != null && typeof obj[parts[0]] === 'object' && Object.keys(obj[parts[0]]).length === 0) {\n    delete obj[parts[0]];\n  }\n}\n\n/*!\n * ignore\n */\n\nfunction _checkManualPopulation(arr, docs) {\n  const ref = arr == null ? null : arr[arraySchemaSymbol] && arr[arraySchemaSymbol].caster && arr[arraySchemaSymbol].caster.options && arr[arraySchemaSymbol].caster.options.ref || null;\n  if (arr.length === 0 && docs.length !== 0) {\n    if (_isAllSubdocs(docs, ref)) {\n      arr[arrayParentSymbol].$populated(arr[arrayPathSymbol], [], {\n        [populateModelSymbol]: docs[0].constructor\n      });\n    }\n  }\n}\nconst returnVanillaArrayMethods = ['filter', 'flat', 'flatMap', 'map', 'slice'];\nfor (const method of returnVanillaArrayMethods) {\n  if (Array.prototype[method] == null) {\n    continue;\n  }\n  methods[method] = function () {\n    const _arr = utils.isMongooseArray(this) ? this.__array : this;\n    const arr = [].concat(_arr);\n    return arr[method].apply(arr, arguments);\n  };\n}\nmodule.exports = methods;","map":{"version":3,"names":["Document","require","ArraySubdocument","MongooseError","cleanModifiedSubpaths","clone","internalToObjectOptions","mpath","utils","isBsonType","arrayAtomicsSymbol","arrayParentSymbol","arrayPathSymbol","arraySchemaSymbol","populateModelSymbol","slicedSymbol","Symbol","_basePush","Array","prototype","push","methods","$__getAtomics","ret","keys","Object","i","length","opts","assign","_isNested","toObject","op","val","isMongooseObject","isArray","call","$each","valueOf","$atomics","$parent","$path","$shift","_registerAtomic","_markModified","__array","_shifted","shift","$pop","_popped","pop","$schema","_cast","value","populated","Model","parent","$populated","undefined","options","Buffer","isBuffer","isObject","_id","isDisc","schema","discriminatorMapping","key","caster","applySetters","_mapCast","index","elem","dirtyPath","arguments","endsWith","markModified","$set","atomics","_this","once","selector","concat","pullOp","apply","map","v","transform","doc","$__","activePaths","getStatePaths","forEach","path","unset","_minimizePath","virtuals","$in","$push","hasUserDefinedProperty","addToSet","_checkManualPopulation","values","added","type","Date","rawValues","isMongooseArray","rawArray","found","some","equals","d","find","o","toString","indexOf","hasAtomics","isPOJO","includes","obj","fromIndex","len","inspect","JSON","stringify","nonAtomicPush","pull","defaults","cur","get","mem","splice","$__getValue","$isDefault","atomic","isOverwrite","arr","$position","remove","set","skipModified","sort","slice","vals","toBSON","depopulate","$toObject","constructor","unshift","_isAllSubdocs","docs","ref","arg","model","modelName","baseModelName","parts","stringToParts","returnVanillaArrayMethods","method","_arr","module","exports"],"sources":["C:/Users/lrmir/OneDrive/Desktop/cs35L/newFridayz/Fridayz/frontend/node_modules/mongoose/lib/types/array/methods/index.js"],"sourcesContent":["'use strict';\n\nconst Document = require('../../../document');\nconst ArraySubdocument = require('../../arraySubdocument');\nconst MongooseError = require('../../../error/mongooseError');\nconst cleanModifiedSubpaths = require('../../../helpers/document/cleanModifiedSubpaths');\nconst clone = require('../../../helpers/clone');\nconst internalToObjectOptions = require('../../../options').internalToObjectOptions;\nconst mpath = require('mpath');\nconst utils = require('../../../utils');\nconst isBsonType = require('../../../helpers/isBsonType');\n\nconst arrayAtomicsSymbol = require('../../../helpers/symbols').arrayAtomicsSymbol;\nconst arrayParentSymbol = require('../../../helpers/symbols').arrayParentSymbol;\nconst arrayPathSymbol = require('../../../helpers/symbols').arrayPathSymbol;\nconst arraySchemaSymbol = require('../../../helpers/symbols').arraySchemaSymbol;\nconst populateModelSymbol = require('../../../helpers/symbols').populateModelSymbol;\nconst slicedSymbol = Symbol('mongoose#Array#sliced');\n\nconst _basePush = Array.prototype.push;\n\n/*!\n * ignore\n */\n\nconst methods = {\n  /**\n   * Depopulates stored atomic operation values as necessary for direct insertion to MongoDB.\n   *\n   * If no atomics exist, we return all array values after conversion.\n   *\n   * @return {Array}\n   * @method $__getAtomics\n   * @memberOf MongooseArray\n   * @instance\n   * @api private\n   */\n\n  $__getAtomics() {\n    const ret = [];\n    const keys = Object.keys(this[arrayAtomicsSymbol] || {});\n    let i = keys.length;\n\n    const opts = Object.assign({}, internalToObjectOptions, { _isNested: true });\n\n    if (i === 0) {\n      ret[0] = ['$set', this.toObject(opts)];\n      return ret;\n    }\n\n    while (i--) {\n      const op = keys[i];\n      let val = this[arrayAtomicsSymbol][op];\n\n      // the atomic values which are arrays are not MongooseArrays. we\n      // need to convert their elements as if they were MongooseArrays\n      // to handle populated arrays versus DocumentArrays properly.\n      if (utils.isMongooseObject(val)) {\n        val = val.toObject(opts);\n      } else if (Array.isArray(val)) {\n        val = this.toObject.call(val, opts);\n      } else if (val != null && Array.isArray(val.$each)) {\n        val.$each = this.toObject.call(val.$each, opts);\n      } else if (val != null && typeof val.valueOf === 'function') {\n        val = val.valueOf();\n      }\n\n      if (op === '$addToSet') {\n        val = { $each: val };\n      }\n\n      ret.push([op, val]);\n    }\n\n    return ret;\n  },\n\n  /*!\n   * ignore\n   */\n\n  $atomics() {\n    return this[arrayAtomicsSymbol];\n  },\n\n  /*!\n   * ignore\n   */\n\n  $parent() {\n    return this[arrayParentSymbol];\n  },\n\n  /*!\n   * ignore\n   */\n\n  $path() {\n    return this[arrayPathSymbol];\n  },\n\n  /**\n   * Atomically shifts the array at most one time per document `save()`.\n   *\n   * #### Note:\n   *\n   * _Calling this multiple times on an array before saving sends the same command as calling it once._\n   * _This update is implemented using the MongoDB [$pop](https://www.mongodb.com/docs/manual/reference/operator/update/pop/) method which enforces this restriction._\n   *\n   *      doc.array = [1,2,3];\n   *\n   *      const shifted = doc.array.$shift();\n   *      console.log(shifted); // 1\n   *      console.log(doc.array); // [2,3]\n   *\n   *      // no affect\n   *      shifted = doc.array.$shift();\n   *      console.log(doc.array); // [2,3]\n   *\n   *      doc.save(function (err) {\n   *        if (err) return handleError(err);\n   *\n   *        // we saved, now $shift works again\n   *        shifted = doc.array.$shift();\n   *        console.log(shifted ); // 2\n   *        console.log(doc.array); // [3]\n   *      })\n   *\n   * @api public\n   * @memberOf MongooseArray\n   * @instance\n   * @method $shift\n   * @see mongodb https://www.mongodb.com/docs/manual/reference/operator/update/pop/\n   */\n\n  $shift() {\n    this._registerAtomic('$pop', -1);\n    this._markModified();\n\n    // only allow shifting once\n    const __array = this.__array;\n    if (__array._shifted) {\n      return;\n    }\n    __array._shifted = true;\n\n    return [].shift.call(__array);\n  },\n\n  /**\n   * Pops the array atomically at most one time per document `save()`.\n   *\n   * #### NOTE:\n   *\n   * _Calling this multiple times on an array before saving sends the same command as calling it once._\n   * _This update is implemented using the MongoDB [$pop](https://www.mongodb.com/docs/manual/reference/operator/update/pop/) method which enforces this restriction._\n   *\n   *      doc.array = [1,2,3];\n   *\n   *      const popped = doc.array.$pop();\n   *      console.log(popped); // 3\n   *      console.log(doc.array); // [1,2]\n   *\n   *      // no affect\n   *      popped = doc.array.$pop();\n   *      console.log(doc.array); // [1,2]\n   *\n   *      doc.save(function (err) {\n   *        if (err) return handleError(err);\n   *\n   *        // we saved, now $pop works again\n   *        popped = doc.array.$pop();\n   *        console.log(popped); // 2\n   *        console.log(doc.array); // [1]\n   *      })\n   *\n   * @api public\n   * @method $pop\n   * @memberOf MongooseArray\n   * @instance\n   * @see mongodb https://www.mongodb.com/docs/manual/reference/operator/update/pop/\n   * @method $pop\n   * @memberOf MongooseArray\n   */\n\n  $pop() {\n    this._registerAtomic('$pop', 1);\n    this._markModified();\n\n    // only allow popping once\n    if (this._popped) {\n      return;\n    }\n    this._popped = true;\n\n    return [].pop.call(this);\n  },\n\n  /*!\n   * ignore\n   */\n\n  $schema() {\n    return this[arraySchemaSymbol];\n  },\n\n  /**\n   * Casts a member based on this arrays schema.\n   *\n   * @param {any} value\n   * @return value the casted value\n   * @method _cast\n   * @api private\n   * @memberOf MongooseArray\n   */\n\n  _cast(value) {\n    let populated = false;\n    let Model;\n\n    const parent = this[arrayParentSymbol];\n    if (parent) {\n      populated = parent.$populated(this[arrayPathSymbol], true);\n    }\n\n    if (populated && value !== null && value !== undefined) {\n      // cast to the populated Models schema\n      Model = populated.options[populateModelSymbol];\n      if (Model == null) {\n        throw new MongooseError('No populated model found for path `' + this[arrayPathSymbol] + '`. This is likely a bug in Mongoose, please report an issue on github.com/Automattic/mongoose.');\n      }\n\n      // only objects are permitted so we can safely assume that\n      // non-objects are to be interpreted as _id\n      if (Buffer.isBuffer(value) ||\n          isBsonType(value, 'ObjectId') || !utils.isObject(value)) {\n        value = { _id: value };\n      }\n\n      // gh-2399\n      // we should cast model only when it's not a discriminator\n      const isDisc = value.schema && value.schema.discriminatorMapping &&\n          value.schema.discriminatorMapping.key !== undefined;\n      if (!isDisc) {\n        value = new Model(value);\n      }\n      return this[arraySchemaSymbol].caster.applySetters(value, parent, true);\n    }\n\n    return this[arraySchemaSymbol].caster.applySetters(value, parent, false);\n  },\n\n  /**\n   * Internal helper for .map()\n   *\n   * @api private\n   * @return {Number}\n   * @method _mapCast\n   * @memberOf MongooseArray\n   */\n\n  _mapCast(val, index) {\n    return this._cast(val, this.length + index);\n  },\n\n  /**\n   * Marks this array as modified.\n   *\n   * If it bubbles up from an embedded document change, then it takes the following arguments (otherwise, takes 0 arguments)\n   *\n   * @param {ArraySubdocument} subdoc the embedded doc that invoked this method on the Array\n   * @param {String} embeddedPath the path which changed in the subdoc\n   * @method _markModified\n   * @api private\n   * @memberOf MongooseArray\n   */\n\n  _markModified(elem) {\n    const parent = this[arrayParentSymbol];\n    let dirtyPath;\n\n    if (parent) {\n      dirtyPath = this[arrayPathSymbol];\n\n      if (arguments.length) {\n        dirtyPath = dirtyPath + '.' + elem;\n      }\n\n      if (dirtyPath != null && dirtyPath.endsWith('.$')) {\n        return this;\n      }\n\n      parent.markModified(dirtyPath, arguments.length !== 0 ? elem : parent);\n    }\n\n    return this;\n  },\n\n  /**\n   * Register an atomic operation with the parent.\n   *\n   * @param {Array} op operation\n   * @param {any} val\n   * @method _registerAtomic\n   * @api private\n   * @memberOf MongooseArray\n   */\n\n  _registerAtomic(op, val) {\n    if (this[slicedSymbol]) {\n      return;\n    }\n    if (op === '$set') {\n      // $set takes precedence over all other ops.\n      // mark entire array modified.\n      this[arrayAtomicsSymbol] = { $set: val };\n      cleanModifiedSubpaths(this[arrayParentSymbol], this[arrayPathSymbol]);\n      this._markModified();\n      return this;\n    }\n\n    const atomics = this[arrayAtomicsSymbol];\n\n    // reset pop/shift after save\n    if (op === '$pop' && !('$pop' in atomics)) {\n      const _this = this;\n      this[arrayParentSymbol].once('save', function() {\n        _this._popped = _this._shifted = null;\n      });\n    }\n\n    // check for impossible $atomic combos (Mongo denies more than one\n    // $atomic op on a single path\n    if (atomics.$set || Object.keys(atomics).length && !(op in atomics)) {\n      // a different op was previously registered.\n      // save the entire thing.\n      this[arrayAtomicsSymbol] = { $set: this };\n      return this;\n    }\n\n    let selector;\n\n    if (op === '$pullAll' || op === '$addToSet') {\n      atomics[op] || (atomics[op] = []);\n      atomics[op] = atomics[op].concat(val);\n    } else if (op === '$pullDocs') {\n      const pullOp = atomics['$pull'] || (atomics['$pull'] = {});\n      if (val[0] instanceof ArraySubdocument) {\n        selector = pullOp['$or'] || (pullOp['$or'] = []);\n        Array.prototype.push.apply(selector, val.map(v => {\n          return v.toObject({\n            transform: (doc, ret) => {\n              if (v == null || v.$__ == null) {\n                return ret;\n              }\n\n              Object.keys(v.$__.activePaths.getStatePaths('default')).forEach(path => {\n                mpath.unset(path, ret);\n\n                _minimizePath(ret, path);\n              });\n\n              return ret;\n            },\n            virtuals: false\n          });\n        }));\n      } else {\n        selector = pullOp['_id'] || (pullOp['_id'] = { $in: [] });\n        selector['$in'] = selector['$in'].concat(val);\n      }\n    } else if (op === '$push') {\n      atomics.$push = atomics.$push || { $each: [] };\n      if (val != null && utils.hasUserDefinedProperty(val, '$each')) {\n        atomics.$push = val;\n      } else {\n        if (val.length === 1) {\n          atomics.$push.$each.push(val[0]);\n        } else if (val.length < 10000) {\n          atomics.$push.$each.push(...val);\n        } else {\n          for (const v of val) {\n            atomics.$push.$each.push(v);\n          }\n        }\n      }\n    } else {\n      atomics[op] = val;\n    }\n\n    return this;\n  },\n\n  /**\n   * Adds values to the array if not already present.\n   *\n   * #### Example:\n   *\n   *     console.log(doc.array) // [2,3,4]\n   *     const added = doc.array.addToSet(4,5);\n   *     console.log(doc.array) // [2,3,4,5]\n   *     console.log(added)     // [5]\n   *\n   * @param {...any} [args]\n   * @return {Array} the values that were added\n   * @memberOf MongooseArray\n   * @api public\n   * @method addToSet\n   */\n\n  addToSet() {\n    _checkManualPopulation(this, arguments);\n\n    const values = [].map.call(arguments, this._mapCast, this);\n    const added = [];\n    let type = '';\n    if (values[0] instanceof ArraySubdocument) {\n      type = 'doc';\n    } else if (values[0] instanceof Date) {\n      type = 'date';\n    } else if (isBsonType(values[0], 'ObjectId')) {\n      type = 'ObjectId';\n    }\n\n    const rawValues = utils.isMongooseArray(values) ? values.__array : values;\n    const rawArray = utils.isMongooseArray(this) ? this.__array : this;\n\n    rawValues.forEach(function(v) {\n      let found;\n      const val = +v;\n      switch (type) {\n        case 'doc':\n          found = this.some(function(doc) {\n            return doc.equals(v);\n          });\n          break;\n        case 'date':\n          found = this.some(function(d) {\n            return +d === val;\n          });\n          break;\n        case 'ObjectId':\n          found = this.find(o => o.toString() === v.toString());\n          break;\n        default:\n          found = ~this.indexOf(v);\n          break;\n      }\n\n      if (!found) {\n        this._markModified();\n        rawArray.push(v);\n        this._registerAtomic('$addToSet', v);\n        [].push.call(added, v);\n      }\n    }, this);\n\n    return added;\n  },\n\n  /**\n   * Returns the number of pending atomic operations to send to the db for this array.\n   *\n   * @api private\n   * @return {Number}\n   * @method hasAtomics\n   * @memberOf MongooseArray\n   */\n\n  hasAtomics() {\n    if (!utils.isPOJO(this[arrayAtomicsSymbol])) {\n      return 0;\n    }\n\n    return Object.keys(this[arrayAtomicsSymbol]).length;\n  },\n\n  /**\n   * Return whether or not the `obj` is included in the array.\n   *\n   * @param {Object} obj the item to check\n   * @param {Number} fromIndex\n   * @return {Boolean}\n   * @api public\n   * @method includes\n   * @memberOf MongooseArray\n   */\n\n  includes(obj, fromIndex) {\n    const ret = this.indexOf(obj, fromIndex);\n    return ret !== -1;\n  },\n\n  /**\n   * Return the index of `obj` or `-1` if not found.\n   *\n   * @param {Object} obj the item to look for\n   * @param {Number} fromIndex\n   * @return {Number}\n   * @api public\n   * @method indexOf\n   * @memberOf MongooseArray\n   */\n\n  indexOf(obj, fromIndex) {\n    if (isBsonType(obj, 'ObjectId')) {\n      obj = obj.toString();\n    }\n\n    fromIndex = fromIndex == null ? 0 : fromIndex;\n    const len = this.length;\n    for (let i = fromIndex; i < len; ++i) {\n      if (obj == this[i]) {\n        return i;\n      }\n    }\n    return -1;\n  },\n\n  /**\n   * Helper for console.log\n   *\n   * @api public\n   * @method inspect\n   * @memberOf MongooseArray\n   */\n\n  inspect() {\n    return JSON.stringify(this);\n  },\n\n  /**\n   * Pushes items to the array non-atomically.\n   *\n   * #### Note:\n   *\n   * _marks the entire array as modified, which if saved, will store it as a `$set` operation, potentially overwritting any changes that happen between when you retrieved the object and when you save it._\n   *\n   * @param {...any} [args]\n   * @api public\n   * @method nonAtomicPush\n   * @memberOf MongooseArray\n   */\n\n  nonAtomicPush() {\n    const values = [].map.call(arguments, this._mapCast, this);\n    this._markModified();\n    const ret = [].push.apply(this, values);\n    this._registerAtomic('$set', this);\n    return ret;\n  },\n\n  /**\n   * Wraps [`Array#pop`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/pop) with proper change tracking.\n   *\n   * #### Note:\n   *\n   * _marks the entire array as modified which will pass the entire thing to $set potentially overwriting any changes that happen between when you retrieved the object and when you save it._\n   *\n   * @see MongooseArray#$pop https://mongoosejs.com/docs/api/array.html#MongooseArray.prototype.$pop()\n   * @api public\n   * @method pop\n   * @memberOf MongooseArray\n   */\n\n  pop() {\n    this._markModified();\n    const ret = [].pop.call(this);\n    this._registerAtomic('$set', this);\n    return ret;\n  },\n\n  /**\n   * Pulls items from the array atomically. Equality is determined by casting\n   * the provided value to an embedded document and comparing using\n   * [the `Document.equals()` function.](https://mongoosejs.com/docs/api/document.html#Document.prototype.equals())\n   *\n   * #### Example:\n   *\n   *     doc.array.pull(ObjectId)\n   *     doc.array.pull({ _id: 'someId' })\n   *     doc.array.pull(36)\n   *     doc.array.pull('tag 1', 'tag 2')\n   *\n   * To remove a document from a subdocument array we may pass an object with a matching `_id`.\n   *\n   *     doc.subdocs.push({ _id: 4815162342 })\n   *     doc.subdocs.pull({ _id: 4815162342 }) // removed\n   *\n   * Or we may passing the _id directly and let mongoose take care of it.\n   *\n   *     doc.subdocs.push({ _id: 4815162342 })\n   *     doc.subdocs.pull(4815162342); // works\n   *\n   * The first pull call will result in a atomic operation on the database, if pull is called repeatedly without saving the document, a $set operation is used on the complete array instead, overwriting possible changes that happened on the database in the meantime.\n   *\n   * @param {...any} [args]\n   * @see mongodb https://www.mongodb.com/docs/manual/reference/operator/update/pull/\n   * @api public\n   * @method pull\n   * @memberOf MongooseArray\n   */\n\n  pull() {\n    const values = [].map.call(arguments, (v, i) => this._cast(v, i, { defaults: false }), this);\n    const cur = this[arrayParentSymbol].get(this[arrayPathSymbol]);\n    let i = cur.length;\n    let mem;\n    this._markModified();\n\n    while (i--) {\n      mem = cur[i];\n      if (mem instanceof Document) {\n        const some = values.some(function(v) {\n          return mem.equals(v);\n        });\n        if (some) {\n          [].splice.call(cur, i, 1);\n        }\n      } else if (~cur.indexOf.call(values, mem)) {\n        [].splice.call(cur, i, 1);\n      }\n    }\n\n    if (values[0] instanceof ArraySubdocument) {\n      this._registerAtomic('$pullDocs', values.map(function(v) {\n        const _id = v.$__getValue('_id');\n        if (_id === undefined || v.$isDefault('_id')) {\n          return v;\n        }\n        return _id;\n      }));\n    } else {\n      this._registerAtomic('$pullAll', values);\n    }\n\n\n    // Might have modified child paths and then pulled, like\n    // `doc.children[1].name = 'test';` followed by\n    // `doc.children.remove(doc.children[0]);`. In this case we fall back\n    // to a `$set` on the whole array. See #3511\n    if (cleanModifiedSubpaths(this[arrayParentSymbol], this[arrayPathSymbol]) > 0) {\n      this._registerAtomic('$set', this);\n    }\n\n    return this;\n  },\n\n  /**\n   * Wraps [`Array#push`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/push) with proper change tracking.\n   *\n   * #### Example:\n   *\n   *     const schema = Schema({ nums: [Number] });\n   *     const Model = mongoose.model('Test', schema);\n   *\n   *     const doc = await Model.create({ nums: [3, 4] });\n   *     doc.nums.push(5); // Add 5 to the end of the array\n   *     await doc.save();\n   *\n   *     // You can also pass an object with `$each` as the\n   *     // first parameter to use MongoDB's `$position`\n   *     doc.nums.push({\n   *       $each: [1, 2],\n   *       $position: 0\n   *     });\n   *     doc.nums; // [1, 2, 3, 4, 5]\n   *\n   * @param {...Object} [args]\n   * @api public\n   * @method push\n   * @memberOf MongooseArray\n   */\n\n  push() {\n    let values = arguments;\n    let atomic = values;\n    const isOverwrite = values[0] != null &&\n      utils.hasUserDefinedProperty(values[0], '$each');\n    const arr = utils.isMongooseArray(this) ? this.__array : this;\n    if (isOverwrite) {\n      atomic = values[0];\n      values = values[0].$each;\n    }\n\n    if (this[arraySchemaSymbol] == null) {\n      return _basePush.apply(this, values);\n    }\n\n    _checkManualPopulation(this, values);\n\n    values = [].map.call(values, this._mapCast, this);\n    let ret;\n    const atomics = this[arrayAtomicsSymbol];\n    this._markModified();\n    if (isOverwrite) {\n      atomic.$each = values;\n\n      if ((atomics.$push && atomics.$push.$each && atomics.$push.$each.length || 0) !== 0 &&\n          atomics.$push.$position != atomic.$position) {\n        throw new MongooseError('Cannot call `Array#push()` multiple times ' +\n          'with different `$position`');\n      }\n\n      if (atomic.$position != null) {\n        [].splice.apply(arr, [atomic.$position, 0].concat(values));\n        ret = this.length;\n      } else {\n        ret = [].push.apply(arr, values);\n      }\n    } else {\n      if ((atomics.$push && atomics.$push.$each && atomics.$push.$each.length || 0) !== 0 &&\n          atomics.$push.$position != null) {\n        throw new MongooseError('Cannot call `Array#push()` multiple times ' +\n          'with different `$position`');\n      }\n      atomic = values;\n      ret = _basePush.apply(arr, values);\n    }\n\n    this._registerAtomic('$push', atomic);\n    return ret;\n  },\n\n  /**\n   * Alias of [pull](https://mongoosejs.com/docs/api/array.html#MongooseArray.prototype.pull())\n   *\n   * @see MongooseArray#pull https://mongoosejs.com/docs/api/array.html#MongooseArray.prototype.pull()\n   * @see mongodb https://www.mongodb.com/docs/manual/reference/operator/update/pull/\n   * @api public\n   * @memberOf MongooseArray\n   * @instance\n   * @method remove\n   */\n\n  remove() {\n    return this.pull.apply(this, arguments);\n  },\n\n  /**\n   * Sets the casted `val` at index `i` and marks the array modified.\n   *\n   * #### Example:\n   *\n   *     // given documents based on the following\n   *     const Doc = mongoose.model('Doc', new Schema({ array: [Number] }));\n   *\n   *     const doc = new Doc({ array: [2,3,4] })\n   *\n   *     console.log(doc.array) // [2,3,4]\n   *\n   *     doc.array.set(1,\"5\");\n   *     console.log(doc.array); // [2,5,4] // properly cast to number\n   *     doc.save() // the change is saved\n   *\n   *     // VS not using array#set\n   *     doc.array[1] = \"5\";\n   *     console.log(doc.array); // [2,\"5\",4] // no casting\n   *     doc.save() // change is not saved\n   *\n   * @return {Array} this\n   * @api public\n   * @method set\n   * @memberOf MongooseArray\n   */\n\n  set(i, val, skipModified) {\n    const arr = this.__array;\n    if (skipModified) {\n      arr[i] = val;\n      return this;\n    }\n    const value = methods._cast.call(this, val, i);\n    methods._markModified.call(this, i);\n    arr[i] = value;\n    return this;\n  },\n\n  /**\n   * Wraps [`Array#shift`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/unshift) with proper change tracking.\n   *\n   * #### Example:\n   *\n   *     doc.array = [2,3];\n   *     const res = doc.array.shift();\n   *     console.log(res) // 2\n   *     console.log(doc.array) // [3]\n   *\n   * #### Note:\n   *\n   * _marks the entire array as modified, which if saved, will store it as a `$set` operation, potentially overwritting any changes that happen between when you retrieved the object and when you save it._\n   *\n   * @api public\n   * @method shift\n   * @memberOf MongooseArray\n   */\n\n  shift() {\n    const arr = utils.isMongooseArray(this) ? this.__array : this;\n    this._markModified();\n    const ret = [].shift.call(arr);\n    this._registerAtomic('$set', this);\n    return ret;\n  },\n\n  /**\n   * Wraps [`Array#sort`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/sort) with proper change tracking.\n   *\n   * #### Note:\n   *\n   * _marks the entire array as modified, which if saved, will store it as a `$set` operation, potentially overwritting any changes that happen between when you retrieved the object and when you save it._\n   *\n   * @api public\n   * @method sort\n   * @memberOf MongooseArray\n   * @see MasteringJS: Array sort https://masteringjs.io/tutorials/fundamentals/array-sort\n   */\n\n  sort() {\n    const arr = utils.isMongooseArray(this) ? this.__array : this;\n    const ret = [].sort.apply(arr, arguments);\n    this._registerAtomic('$set', this);\n    return ret;\n  },\n\n  /**\n   * Wraps [`Array#splice`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/splice) with proper change tracking and casting.\n   *\n   * #### Note:\n   *\n   * _marks the entire array as modified, which if saved, will store it as a `$set` operation, potentially overwritting any changes that happen between when you retrieved the object and when you save it._\n   *\n   * @api public\n   * @method splice\n   * @memberOf MongooseArray\n   * @see MasteringJS: Array splice https://masteringjs.io/tutorials/fundamentals/array-splice\n   */\n\n  splice() {\n    let ret;\n    const arr = utils.isMongooseArray(this) ? this.__array : this;\n\n    this._markModified();\n    _checkManualPopulation(this, Array.prototype.slice.call(arguments, 2));\n\n    if (arguments.length) {\n      let vals;\n      if (this[arraySchemaSymbol] == null) {\n        vals = arguments;\n      } else {\n        vals = [];\n        for (let i = 0; i < arguments.length; ++i) {\n          vals[i] = i < 2 ?\n            arguments[i] :\n            this._cast(arguments[i], arguments[0] + (i - 2));\n        }\n      }\n\n      ret = [].splice.apply(arr, vals);\n      this._registerAtomic('$set', this);\n    }\n\n    return ret;\n  },\n\n  /*!\n   * ignore\n   */\n\n  toBSON() {\n    return this.toObject(internalToObjectOptions);\n  },\n\n  /**\n   * Returns a native js Array.\n   *\n   * @param {Object} options\n   * @return {Array}\n   * @api public\n   * @method toObject\n   * @memberOf MongooseArray\n   */\n\n  toObject(options) {\n    const arr = utils.isMongooseArray(this) ? this.__array : this;\n    if (options && options.depopulate) {\n      options = clone(options);\n      options._isNested = true;\n      // Ensure return value is a vanilla array, because in Node.js 6+ `map()`\n      // is smart enough to use the inherited array's constructor.\n      return [].concat(arr).map(function(doc) {\n        return doc instanceof Document\n          ? doc.toObject(options)\n          : doc;\n      });\n    }\n\n    return [].concat(arr);\n  },\n\n  $toObject() {\n    return this.constructor.prototype.toObject.apply(this, arguments);\n  },\n  /**\n   * Wraps [`Array#unshift`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/unshift) with proper change tracking.\n   *\n   * #### Note:\n   *\n   * _marks the entire array as modified, which if saved, will store it as a `$set` operation, potentially overwriting any changes that happen between when you retrieved the object and when you save it._\n   *\n   * @api public\n   * @method unshift\n   * @memberOf MongooseArray\n   */\n\n  unshift() {\n    _checkManualPopulation(this, arguments);\n\n    let values;\n    if (this[arraySchemaSymbol] == null) {\n      values = arguments;\n    } else {\n      values = [].map.call(arguments, this._cast, this);\n    }\n\n    const arr = utils.isMongooseArray(this) ? this.__array : this;\n    this._markModified();\n    [].unshift.apply(arr, values);\n    this._registerAtomic('$set', this);\n    return this.length;\n  }\n};\n\n/*!\n * ignore\n */\n\nfunction _isAllSubdocs(docs, ref) {\n  if (!ref) {\n    return false;\n  }\n\n  for (const arg of docs) {\n    if (arg == null) {\n      return false;\n    }\n    const model = arg.constructor;\n    if (!(arg instanceof Document) ||\n      (model.modelName !== ref && model.baseModelName !== ref)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/*!\n * Minimize _just_ empty objects along the path chain specified\n * by `parts`, ignoring all other paths. Useful in cases where\n * you want to minimize after unsetting a path.\n *\n * #### Example:\n *\n *     const obj = { foo: { bar: { baz: {} } }, a: {} };\n *     _minimizePath(obj, 'foo.bar.baz');\n *     obj; // { a: {} }\n */\n\nfunction _minimizePath(obj, parts, i) {\n  if (typeof parts === 'string') {\n    if (parts.indexOf('.') === -1) {\n      return;\n    }\n\n    parts = mpath.stringToParts(parts);\n  }\n  i = i || 0;\n  if (i >= parts.length) {\n    return;\n  }\n  if (obj == null || typeof obj !== 'object') {\n    return;\n  }\n\n  _minimizePath(obj[parts[0]], parts, i + 1);\n  if (obj[parts[0]] != null && typeof obj[parts[0]] === 'object' && Object.keys(obj[parts[0]]).length === 0) {\n    delete obj[parts[0]];\n  }\n}\n\n/*!\n * ignore\n */\n\nfunction _checkManualPopulation(arr, docs) {\n  const ref = arr == null ?\n    null :\n    arr[arraySchemaSymbol] && arr[arraySchemaSymbol].caster && arr[arraySchemaSymbol].caster.options && arr[arraySchemaSymbol].caster.options.ref || null;\n  if (arr.length === 0 &&\n      docs.length !== 0) {\n    if (_isAllSubdocs(docs, ref)) {\n      arr[arrayParentSymbol].$populated(arr[arrayPathSymbol], [], {\n        [populateModelSymbol]: docs[0].constructor\n      });\n    }\n  }\n}\n\nconst returnVanillaArrayMethods = [\n  'filter',\n  'flat',\n  'flatMap',\n  'map',\n  'slice'\n];\nfor (const method of returnVanillaArrayMethods) {\n  if (Array.prototype[method] == null) {\n    continue;\n  }\n\n  methods[method] = function() {\n    const _arr = utils.isMongooseArray(this) ? this.__array : this;\n    const arr = [].concat(_arr);\n\n    return arr[method].apply(arr, arguments);\n  };\n}\n\nmodule.exports = methods;\n"],"mappings":"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AAA,EAAG;IACN,OAAO,IAAI,CAAC7B,eAAe,CAAC;EAC9B,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE8B,MAAMA,CAAA,EAAG;IACP,IAAI,CAACC,eAAe,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;IAChC,IAAI,CAACC,aAAa,CAAC,CAAC;;IAEpB;IACA,MAAMC,OAAO,GAAG,IAAI,CAACA,OAAO;IAC5B,IAAIA,OAAO,CAACC,QAAQ,EAAE;MACpB;IACF;IACAD,OAAO,CAACC,QAAQ,GAAG,IAAI;IAEvB,OAAO,EAAE,CAACC,KAAK,CAACX,IAAI,CAACS,OAAO,CAAC;EAC/B,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEEG,IAAIA,CAAA,EAAG;IACL,IAAI,CAACL,eAAe,CAAC,MAAM,EAAE,CAAC,CAAC;IAC/B,IAAI,CAACC,aAAa,CAAC,CAAC;;IAEpB;IACA,IAAI,IAAI,CAACK,OAAO,EAAE;MAChB;IACF;IACA,IAAI,CAACA,OAAO,GAAG,IAAI;IAEnB,OAAO,EAAE,CAACC,GAAG,CAACd,IAAI,CAAC,IAAI,CAAC;EAC1B,CAAC;EAED;AACF;AACA;;EAEEe,OAAOA,CAAA,EAAG;IACR,OAAO,IAAI,CAACtC,iBAAiB,CAAC;EAChC,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEEuC,KAAKA,CAACC,KAAK,EAAE;IACX,IAAIC,SAAS,GAAG,KAAK;IACrB,IAAIC,KAAK;IAET,MAAMC,MAAM,GAAG,IAAI,CAAC7C,iBAAiB,CAAC;IACtC,IAAI6C,MAAM,EAAE;MA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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}