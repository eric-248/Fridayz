{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MonitorInterval = exports.RTTPinger = exports.Monitor = exports.ServerMonitoringMode = void 0;\nconst timers_1 = require(\"timers\");\nconst bson_1 = require(\"../bson\");\nconst connect_1 = require(\"../cmap/connect\");\nconst connection_1 = require(\"../cmap/connection\");\nconst client_metadata_1 = require(\"../cmap/handshake/client_metadata\");\nconst constants_1 = require(\"../constants\");\nconst error_1 = require(\"../error\");\nconst mongo_types_1 = require(\"../mongo_types\");\nconst utils_1 = require(\"../utils\");\nconst common_1 = require(\"./common\");\nconst events_1 = require(\"./events\");\nconst server_1 = require(\"./server\");\n/** @internal */\nconst kServer = Symbol('server');\n/** @internal */\nconst kMonitorId = Symbol('monitorId');\n/** @internal */\nconst kConnection = Symbol('connection');\n/** @internal */\nconst kCancellationToken = Symbol('cancellationToken');\n/** @internal */\nconst kRoundTripTime = Symbol('roundTripTime');\nconst STATE_IDLE = 'idle';\nconst STATE_MONITORING = 'monitoring';\nconst stateTransition = (0, utils_1.makeStateMachine)({\n  [common_1.STATE_CLOSING]: [common_1.STATE_CLOSING, STATE_IDLE, common_1.STATE_CLOSED],\n  [common_1.STATE_CLOSED]: [common_1.STATE_CLOSED, STATE_MONITORING],\n  [STATE_IDLE]: [STATE_IDLE, STATE_MONITORING, common_1.STATE_CLOSING],\n  [STATE_MONITORING]: [STATE_MONITORING, STATE_IDLE, common_1.STATE_CLOSING]\n});\nconst INVALID_REQUEST_CHECK_STATES = new Set([common_1.STATE_CLOSING, common_1.STATE_CLOSED, STATE_MONITORING]);\nfunction isInCloseState(monitor) {\n  return monitor.s.state === common_1.STATE_CLOSED || monitor.s.state === common_1.STATE_CLOSING;\n}\n/** @public */\nexports.ServerMonitoringMode = Object.freeze({\n  auto: 'auto',\n  poll: 'poll',\n  stream: 'stream'\n});\n/** @internal */\nclass Monitor extends mongo_types_1.TypedEventEmitter {\n  get connection() {\n    return this[kConnection];\n  }\n  constructor(server, options) {\n    super();\n    this[kServer] = server;\n    this[kConnection] = undefined;\n    this[kCancellationToken] = new mongo_types_1.CancellationToken();\n    this[kCancellationToken].setMaxListeners(Infinity);\n    this[kMonitorId] = undefined;\n    this.s = {\n      state: common_1.STATE_CLOSED\n    };\n    this.address = server.description.address;\n    this.options = Object.freeze({\n      connectTimeoutMS: options.connectTimeoutMS ?? 10000,\n      heartbeatFrequencyMS: options.heartbeatFrequencyMS ?? 10000,\n      minHeartbeatFrequencyMS: options.minHeartbeatFrequencyMS ?? 500,\n      serverMonitoringMode: options.serverMonitoringMode\n    });\n    this.isRunningInFaasEnv = (0, client_metadata_1.getFAASEnv)() != null;\n    const cancellationToken = this[kCancellationToken];\n    // TODO: refactor this to pull it directly from the pool, requires new ConnectionPool integration\n    const connectOptions = Object.assign({\n      id: '<monitor>',\n      generation: server.pool.generation,\n      connectionType: connection_1.Connection,\n      cancellationToken,\n      hostAddress: server.description.hostAddress\n    }, options,\n    // force BSON serialization options\n    {\n      raw: false,\n      useBigInt64: false,\n      promoteLongs: true,\n      promoteValues: true,\n      promoteBuffers: true\n    });\n    // ensure no authentication is used for monitoring\n    delete connectOptions.credentials;\n    if (connectOptions.autoEncrypter) {\n      delete connectOptions.autoEncrypter;\n    }\n    this.connectOptions = Object.freeze(connectOptions);\n  }\n  connect() {\n    if (this.s.state !== common_1.STATE_CLOSED) {\n      return;\n    }\n    // start\n    const heartbeatFrequencyMS = this.options.heartbeatFrequencyMS;\n    const minHeartbeatFrequencyMS = this.options.minHeartbeatFrequencyMS;\n    this[kMonitorId] = new MonitorInterval(monitorServer(this), {\n      heartbeatFrequencyMS: heartbeatFrequencyMS,\n      minHeartbeatFrequencyMS: minHeartbeatFrequencyMS,\n      immediate: true\n    });\n  }\n  requestCheck() {\n    if (INVALID_REQUEST_CHECK_STATES.has(this.s.state)) {\n      return;\n    }\n    this[kMonitorId]?.wake();\n  }\n  reset() {\n    const topologyVersion = this[kServer].description.topologyVersion;\n    if (isInCloseState(this) || topologyVersion == null) {\n      return;\n    }\n    stateTransition(this, common_1.STATE_CLOSING);\n    resetMonitorState(this);\n    // restart monitor\n    stateTransition(this, STATE_IDLE);\n    // restart monitoring\n    const heartbeatFrequencyMS = this.options.heartbeatFrequencyMS;\n    const minHeartbeatFrequencyMS = this.options.minHeartbeatFrequencyMS;\n    this[kMonitorId] = new MonitorInterval(monitorServer(this), {\n      heartbeatFrequencyMS: heartbeatFrequencyMS,\n      minHeartbeatFrequencyMS: minHeartbeatFrequencyMS\n    });\n  }\n  close() {\n    if (isInCloseState(this)) {\n      return;\n    }\n    stateTransition(this, common_1.STATE_CLOSING);\n    resetMonitorState(this);\n    // close monitor\n    this.emit('close');\n    stateTransition(this, common_1.STATE_CLOSED);\n  }\n}\nexports.Monitor = Monitor;\nfunction resetMonitorState(monitor) {\n  monitor[kMonitorId]?.stop();\n  monitor[kMonitorId] = undefined;\n  monitor.rttPinger?.close();\n  monitor.rttPinger = undefined;\n  monitor[kCancellationToken].emit('cancel');\n  monitor[kConnection]?.destroy({\n    force: true\n  });\n  monitor[kConnection] = undefined;\n}\nfunction useStreamingProtocol(monitor, topologyVersion) {\n  // If we have no topology version we always poll no matter\n  // what the user provided, since the server does not support\n  // the streaming protocol.\n  if (topologyVersion == null) return false;\n  const serverMonitoringMode = monitor.options.serverMonitoringMode;\n  if (serverMonitoringMode === exports.ServerMonitoringMode.poll) return false;\n  if (serverMonitoringMode === exports.ServerMonitoringMode.stream) return true;\n  // If we are in auto mode, we need to figure out if we're in a FaaS\n  // environment or not and choose the appropriate mode.\n  if (monitor.isRunningInFaasEnv) return false;\n  return true;\n}\nfunction checkServer(monitor, callback) {\n  let start = (0, utils_1.now)();\n  const topologyVersion = monitor[kServer].description.topologyVersion;\n  const isAwaitable = useStreamingProtocol(monitor, topologyVersion);\n  monitor.emit(server_1.Server.SERVER_HEARTBEAT_STARTED, new events_1.ServerHeartbeatStartedEvent(monitor.address, isAwaitable));\n  function failureHandler(err, awaited) {\n    monitor[kConnection]?.destroy({\n      force: true\n    });\n    monitor[kConnection] = undefined;\n    monitor.emit(server_1.Server.SERVER_HEARTBEAT_FAILED, new events_1.ServerHeartbeatFailedEvent(monitor.address, (0, utils_1.calculateDurationInMs)(start), err, awaited));\n    const error = !(err instanceof error_1.MongoError) ? new error_1.MongoError(error_1.MongoError.buildErrorMessage(err), {\n      cause: err\n    }) : err;\n    error.addErrorLabel(error_1.MongoErrorLabel.ResetPool);\n    if (error instanceof error_1.MongoNetworkTimeoutError) {\n      error.addErrorLabel(error_1.MongoErrorLabel.InterruptInUseConnections);\n    }\n    monitor.emit('resetServer', error);\n    callback(err);\n  }\n  const connection = monitor[kConnection];\n  if (connection && !connection.closed) {\n    const {\n      serverApi,\n      helloOk\n    } = connection;\n    const connectTimeoutMS = monitor.options.connectTimeoutMS;\n    const maxAwaitTimeMS = monitor.options.heartbeatFrequencyMS;\n    const cmd = {\n      [serverApi?.version || helloOk ? 'hello' : constants_1.LEGACY_HELLO_COMMAND]: 1,\n      ...(isAwaitable && topologyVersion ? {\n        maxAwaitTimeMS,\n        topologyVersion: makeTopologyVersion(topologyVersion)\n      } : {})\n    };\n    const options = isAwaitable ? {\n      socketTimeoutMS: connectTimeoutMS ? connectTimeoutMS + maxAwaitTimeMS : 0,\n      exhaustAllowed: true\n    } : {\n      socketTimeoutMS: connectTimeoutMS\n    };\n    if (isAwaitable && monitor.rttPinger == null) {\n      monitor.rttPinger = new RTTPinger(monitor[kCancellationToken], Object.assign({\n        heartbeatFrequencyMS: monitor.options.heartbeatFrequencyMS\n      }, monitor.connectOptions));\n    }\n    connection.command((0, utils_1.ns)('admin.$cmd'), cmd, options, (err, hello) => {\n      if (err) {\n        return failureHandler(err, isAwaitable);\n      }\n      if (!('isWritablePrimary' in hello)) {\n        // Provide hello-style response document.\n        hello.isWritablePrimary = hello[constants_1.LEGACY_HELLO_COMMAND];\n      }\n      const duration = isAwaitable && monitor.rttPinger ? monitor.rttPinger.roundTripTime : (0, utils_1.calculateDurationInMs)(start);\n      monitor.emit(server_1.Server.SERVER_HEARTBEAT_SUCCEEDED, new events_1.ServerHeartbeatSucceededEvent(monitor.address, duration, hello, isAwaitable));\n      // If we are using the streaming protocol then we immediately issue another 'started'\n      // event, otherwise the \"check\" is complete and return to the main monitor loop.\n      if (isAwaitable) {\n        monitor.emit(server_1.Server.SERVER_HEARTBEAT_STARTED, new events_1.ServerHeartbeatStartedEvent(monitor.address, true));\n        start = (0, utils_1.now)();\n      } else {\n        monitor.rttPinger?.close();\n        monitor.rttPinger = undefined;\n        callback(undefined, hello);\n      }\n    });\n    return;\n  }\n  // connecting does an implicit `hello`\n  (0, connect_1.connect)(monitor.connectOptions, (err, conn) => {\n    if (err) {\n      monitor[kConnection] = undefined;\n      failureHandler(err, false);\n      return;\n    }\n    if (conn) {\n      // Tell the connection that we are using the streaming protocol so that the\n      // connection's message stream will only read the last hello on the buffer.\n      conn.isMonitoringConnection = true;\n      if (isInCloseState(monitor)) {\n        conn.destroy({\n          force: true\n        });\n        return;\n      }\n      monitor[kConnection] = conn;\n      monitor.emit(server_1.Server.SERVER_HEARTBEAT_SUCCEEDED, new events_1.ServerHeartbeatSucceededEvent(monitor.address, (0, utils_1.calculateDurationInMs)(start), conn.hello, useStreamingProtocol(monitor, conn.hello?.topologyVersion)));\n      callback(undefined, conn.hello);\n    }\n  });\n}\nfunction monitorServer(monitor) {\n  return callback => {\n    if (monitor.s.state === STATE_MONITORING) {\n      process.nextTick(callback);\n      return;\n    }\n    stateTransition(monitor, STATE_MONITORING);\n    function done() {\n      if (!isInCloseState(monitor)) {\n        stateTransition(monitor, STATE_IDLE);\n      }\n      callback();\n    }\n    checkServer(monitor, (err, hello) => {\n      if (err) {\n        // otherwise an error occurred on initial discovery, also bail\n        if (monitor[kServer].description.type === common_1.ServerType.Unknown) {\n          return done();\n        }\n      }\n      // if the check indicates streaming is supported, immediately reschedule monitoring\n      if (useStreamingProtocol(monitor, hello?.topologyVersion)) {\n        (0, timers_1.setTimeout)(() => {\n          if (!isInCloseState(monitor)) {\n            monitor[kMonitorId]?.wake();\n          }\n        }, 0);\n      }\n      done();\n    });\n  };\n}\nfunction makeTopologyVersion(tv) {\n  return {\n    processId: tv.processId,\n    // tests mock counter as just number, but in a real situation counter should always be a Long\n    // TODO(NODE-2674): Preserve int64 sent from MongoDB\n    counter: bson_1.Long.isLong(tv.counter) ? tv.counter : bson_1.Long.fromNumber(tv.counter)\n  };\n}\n/** @internal */\nclass RTTPinger {\n  constructor(cancellationToken, options) {\n    this.connection = undefined;\n    this[kCancellationToken] = cancellationToken;\n    this[kRoundTripTime] = 0;\n    this.closed = false;\n    const heartbeatFrequencyMS = options.heartbeatFrequencyMS;\n    this[kMonitorId] = (0, timers_1.setTimeout)(() => measureRoundTripTime(this, options), heartbeatFrequencyMS);\n  }\n  get roundTripTime() {\n    return this[kRoundTripTime];\n  }\n  close() {\n    this.closed = true;\n    (0, timers_1.clearTimeout)(this[kMonitorId]);\n    this.connection?.destroy({\n      force: true\n    });\n    this.connection = undefined;\n  }\n}\nexports.RTTPinger = RTTPinger;\nfunction measureRoundTripTime(rttPinger, options) {\n  const start = (0, utils_1.now)();\n  options.cancellationToken = rttPinger[kCancellationToken];\n  const heartbeatFrequencyMS = options.heartbeatFrequencyMS;\n  if (rttPinger.closed) {\n    return;\n  }\n  function measureAndReschedule(conn) {\n    if (rttPinger.closed) {\n      conn?.destroy({\n        force: true\n      });\n      return;\n    }\n    if (rttPinger.connection == null) {\n      rttPinger.connection = conn;\n    }\n    rttPinger[kRoundTripTime] = (0, utils_1.calculateDurationInMs)(start);\n    rttPinger[kMonitorId] = (0, timers_1.setTimeout)(() => measureRoundTripTime(rttPinger, options), heartbeatFrequencyMS);\n  }\n  const connection = rttPinger.connection;\n  if (connection == null) {\n    (0, connect_1.connect)(options, (err, conn) => {\n      if (err) {\n        rttPinger.connection = undefined;\n        rttPinger[kRoundTripTime] = 0;\n        return;\n      }\n      measureAndReschedule(conn);\n    });\n    return;\n  }\n  const commandName = connection.serverApi?.version || connection.helloOk ? 'hello' : constants_1.LEGACY_HELLO_COMMAND;\n  connection.commandAsync((0, utils_1.ns)('admin.$cmd'), {\n    [commandName]: 1\n  }, undefined).then(() => measureAndReschedule(), () => {\n    rttPinger.connection?.destroy({\n      force: true\n    });\n    rttPinger.connection = undefined;\n    rttPinger[kRoundTripTime] = 0;\n    return;\n  });\n}\n/**\n * @internal\n */\nclass MonitorInterval {\n  constructor(fn, options = {}) {\n    this.isExpeditedCallToFnScheduled = false;\n    this.stopped = false;\n    this.isExecutionInProgress = false;\n    this.hasExecutedOnce = false;\n    this._executeAndReschedule = () => {\n      if (this.stopped) return;\n      if (this.timerId) {\n        (0, timers_1.clearTimeout)(this.timerId);\n      }\n      this.isExpeditedCallToFnScheduled = false;\n      this.isExecutionInProgress = true;\n      this.fn(() => {\n        this.lastExecutionEnded = (0, utils_1.now)();\n        this.isExecutionInProgress = false;\n        this._reschedule(this.heartbeatFrequencyMS);\n      });\n    };\n    this.fn = fn;\n    this.lastExecutionEnded = -Infinity;\n    this.heartbeatFrequencyMS = options.heartbeatFrequencyMS ?? 1000;\n    this.minHeartbeatFrequencyMS = options.minHeartbeatFrequencyMS ?? 500;\n    if (options.immediate) {\n      this._executeAndReschedule();\n    } else {\n      this._reschedule(undefined);\n    }\n  }\n  wake() {\n    const currentTime = (0, utils_1.now)();\n    const timeSinceLastCall = currentTime - this.lastExecutionEnded;\n    // TODO(NODE-4674): Add error handling and logging to the monitor\n    if (timeSinceLastCall < 0) {\n      return this._executeAndReschedule();\n    }\n    if (this.isExecutionInProgress) {\n      return;\n    }\n    // debounce multiple calls to wake within the `minInterval`\n    if (this.isExpeditedCallToFnScheduled) {\n      return;\n    }\n    // reschedule a call as soon as possible, ensuring the call never happens\n    // faster than the `minInterval`\n    if (timeSinceLastCall < this.minHeartbeatFrequencyMS) {\n      this.isExpeditedCallToFnScheduled = true;\n      this._reschedule(this.minHeartbeatFrequencyMS - timeSinceLastCall);\n      return;\n    }\n    this._executeAndReschedule();\n  }\n  stop() {\n    this.stopped = true;\n    if (this.timerId) {\n      (0, timers_1.clearTimeout)(this.timerId);\n      this.timerId = undefined;\n    }\n    this.lastExecutionEnded = -Infinity;\n    this.isExpeditedCallToFnScheduled = false;\n  }\n  toString() {\n    return JSON.stringify(this);\n  }\n  toJSON() {\n    const currentTime = (0, utils_1.now)();\n    const timeSinceLastCall = currentTime - this.lastExecutionEnded;\n    return {\n      timerId: this.timerId != null ? 'set' : 'cleared',\n      lastCallTime: this.lastExecutionEnded,\n      isExpeditedCheckScheduled: this.isExpeditedCallToFnScheduled,\n      stopped: this.stopped,\n      heartbeatFrequencyMS: this.heartbeatFrequencyMS,\n      minHeartbeatFrequencyMS: this.minHeartbeatFrequencyMS,\n      currentTime,\n      timeSinceLastCall\n    };\n  }\n  _reschedule(ms) {\n    if (this.stopped) return;\n    if (this.timerId) {\n      (0, timers_1.clearTimeout)(this.timerId);\n    }\n    this.timerId = (0, timers_1.setTimeout)(this._executeAndReschedule, ms || this.heartbeatFrequencyMS);\n  }\n}\nexports.MonitorInterval = MonitorInterval;","map":{"version":3,"names":["timers_1","require","bson_1","connect_1","connection_1","client_metadata_1","constants_1","error_1","mongo_types_1","utils_1","common_1","events_1","server_1","kServer","Symbol","kMonitorId","kConnection","kCancellationToken","kRoundTripTime","STATE_IDLE","STATE_MONITORING","stateTransition","makeStateMachine","STATE_CLOSING","STATE_CLOSED","INVALID_REQUEST_CHECK_STATES","Set","isInCloseState","monitor","s","state","exports","ServerMonitoringMode","Object","freeze","auto","poll","stream","Monitor","TypedEventEmitter","connection","constructor","server","options","undefined","CancellationToken","setMaxListeners","Infinity","address","description","connectTimeoutMS","heartbeatFrequencyMS","minHeartbeatFrequencyMS","serverMonitoringMode","isRunningInFaasEnv","getFAASEnv","cancellationToken","connectOptions","assign","id","generation","pool","connectionType","Connection","hostAddress","raw","useBigInt64","promoteLongs","promoteValues","promoteBuffers","credentials","autoEncrypter","connect","MonitorInterval","monitorServer","immediate","requestCheck","has","wake","reset","topologyVersion","resetMonitorState","close","emit","stop","rttPinger","destroy","force","useStreamingProtocol","checkServer","callback","start","now","isAwaitable","Server","SERVER_HEARTBEAT_STARTED","ServerHeartbeatStartedEvent","failureHandler","err","awaited","SERVER_HEARTBEAT_FAILED","ServerHeartbeatFailedEvent","calculateDurationInMs","error","MongoError","buildErrorMessage","cause","addErrorLabel","MongoErrorLabel","ResetPool","MongoNetworkTimeoutError","InterruptInUseConnections","closed","serverApi","helloOk","maxAwaitTimeMS","cmd","version","LEGACY_HELLO_COMMAND","makeTopologyVersion","socketTimeoutMS","exhaustAllowed","RTTPinger","command","ns","hello","isWritablePrimary","duration","roundTripTime","SERVER_HEARTBEAT_SUCCEEDED","ServerHeartbeatSucceededEvent","conn","isMonitoringConnection","process","nextTick","done","type","ServerType","Unknown","setTimeout","tv","processId","counter","Long","isLong","fromNumber","measureRoundTripTime","clearTimeout","measureAndReschedule","commandName","commandAsync","then","fn","isExpeditedCallToFnScheduled","stopped","isExecutionInProgress","hasExecutedOnce","_executeAndReschedule","timerId","lastExecutionEnded","_reschedule","currentTime","timeSinceLastCall","toString","JSON","stringify","toJSON","lastCallTime","isExpeditedCheckScheduled","ms"],"sources":["C:\\Users\\lrmir\\OneDrive\\Desktop\\cs35L\\newFridayz\\Fridayz\\frontend\\node_modules\\mongodb\\src\\sdam\\monitor.ts"],"sourcesContent":["import { clearTimeout, setTimeout } from 'timers';\n\nimport { type Document, Long } from '../bson';\nimport { connect } from '../cmap/connect';\nimport { Connection, type ConnectionOptions } from '../cmap/connection';\nimport { getFAASEnv } from '../cmap/handshake/client_metadata';\nimport { LEGACY_HELLO_COMMAND } from '../constants';\nimport { MongoError, MongoErrorLabel, MongoNetworkTimeoutError } from '../error';\nimport { CancellationToken, TypedEventEmitter } from '../mongo_types';\nimport type { Callback, EventEmitterWithState } from '../utils';\nimport { calculateDurationInMs, makeStateMachine, now, ns } from '../utils';\nimport { ServerType, STATE_CLOSED, STATE_CLOSING } from './common';\nimport {\n  ServerHeartbeatFailedEvent,\n  ServerHeartbeatStartedEvent,\n  ServerHeartbeatSucceededEvent\n} from './events';\nimport { Server } from './server';\nimport type { TopologyVersion } from './server_description';\n\n/** @internal */\nconst kServer = Symbol('server');\n/** @internal */\nconst kMonitorId = Symbol('monitorId');\n/** @internal */\nconst kConnection = Symbol('connection');\n/** @internal */\nconst kCancellationToken = Symbol('cancellationToken');\n/** @internal */\nconst kRoundTripTime = Symbol('roundTripTime');\n\nconst STATE_IDLE = 'idle';\nconst STATE_MONITORING = 'monitoring';\nconst stateTransition = makeStateMachine({\n  [STATE_CLOSING]: [STATE_CLOSING, STATE_IDLE, STATE_CLOSED],\n  [STATE_CLOSED]: [STATE_CLOSED, STATE_MONITORING],\n  [STATE_IDLE]: [STATE_IDLE, STATE_MONITORING, STATE_CLOSING],\n  [STATE_MONITORING]: [STATE_MONITORING, STATE_IDLE, STATE_CLOSING]\n});\n\nconst INVALID_REQUEST_CHECK_STATES = new Set([STATE_CLOSING, STATE_CLOSED, STATE_MONITORING]);\nfunction isInCloseState(monitor: Monitor) {\n  return monitor.s.state === STATE_CLOSED || monitor.s.state === STATE_CLOSING;\n}\n\n/** @public */\nexport const ServerMonitoringMode = Object.freeze({\n  auto: 'auto',\n  poll: 'poll',\n  stream: 'stream'\n} as const);\n\n/** @public */\nexport type ServerMonitoringMode = (typeof ServerMonitoringMode)[keyof typeof ServerMonitoringMode];\n\n/** @internal */\nexport interface MonitorPrivate {\n  state: string;\n}\n\n/** @public */\nexport interface MonitorOptions\n  extends Omit<ConnectionOptions, 'id' | 'generation' | 'hostAddress'> {\n  connectTimeoutMS: number;\n  heartbeatFrequencyMS: number;\n  minHeartbeatFrequencyMS: number;\n  serverMonitoringMode: ServerMonitoringMode;\n}\n\n/** @public */\nexport type MonitorEvents = {\n  serverHeartbeatStarted(event: ServerHeartbeatStartedEvent): void;\n  serverHeartbeatSucceeded(event: ServerHeartbeatSucceededEvent): void;\n  serverHeartbeatFailed(event: ServerHeartbeatFailedEvent): void;\n  resetServer(error?: MongoError): void;\n  resetConnectionPool(): void;\n  close(): void;\n} & EventEmitterWithState;\n\n/** @internal */\nexport class Monitor extends TypedEventEmitter<MonitorEvents> {\n  /** @internal */\n  s: MonitorPrivate;\n  address: string;\n  options: Readonly<\n    Pick<\n      MonitorOptions,\n      | 'connectTimeoutMS'\n      | 'heartbeatFrequencyMS'\n      | 'minHeartbeatFrequencyMS'\n      | 'serverMonitoringMode'\n    >\n  >;\n  connectOptions: ConnectionOptions;\n  isRunningInFaasEnv: boolean;\n  [kServer]: Server;\n  [kConnection]?: Connection;\n  [kCancellationToken]: CancellationToken;\n  /** @internal */\n  [kMonitorId]?: MonitorInterval;\n  rttPinger?: RTTPinger;\n\n  get connection(): Connection | undefined {\n    return this[kConnection];\n  }\n\n  constructor(server: Server, options: MonitorOptions) {\n    super();\n\n    this[kServer] = server;\n    this[kConnection] = undefined;\n    this[kCancellationToken] = new CancellationToken();\n    this[kCancellationToken].setMaxListeners(Infinity);\n    this[kMonitorId] = undefined;\n    this.s = {\n      state: STATE_CLOSED\n    };\n\n    this.address = server.description.address;\n    this.options = Object.freeze({\n      connectTimeoutMS: options.connectTimeoutMS ?? 10000,\n      heartbeatFrequencyMS: options.heartbeatFrequencyMS ?? 10000,\n      minHeartbeatFrequencyMS: options.minHeartbeatFrequencyMS ?? 500,\n      serverMonitoringMode: options.serverMonitoringMode\n    });\n    this.isRunningInFaasEnv = getFAASEnv() != null;\n\n    const cancellationToken = this[kCancellationToken];\n    // TODO: refactor this to pull it directly from the pool, requires new ConnectionPool integration\n    const connectOptions = Object.assign(\n      {\n        id: '<monitor>' as const,\n        generation: server.pool.generation,\n        connectionType: Connection,\n        cancellationToken,\n        hostAddress: server.description.hostAddress\n      },\n      options,\n      // force BSON serialization options\n      {\n        raw: false,\n        useBigInt64: false,\n        promoteLongs: true,\n        promoteValues: true,\n        promoteBuffers: true\n      }\n    );\n\n    // ensure no authentication is used for monitoring\n    delete connectOptions.credentials;\n    if (connectOptions.autoEncrypter) {\n      delete connectOptions.autoEncrypter;\n    }\n\n    this.connectOptions = Object.freeze(connectOptions);\n  }\n\n  connect(): void {\n    if (this.s.state !== STATE_CLOSED) {\n      return;\n    }\n\n    // start\n    const heartbeatFrequencyMS = this.options.heartbeatFrequencyMS;\n    const minHeartbeatFrequencyMS = this.options.minHeartbeatFrequencyMS;\n    this[kMonitorId] = new MonitorInterval(monitorServer(this), {\n      heartbeatFrequencyMS: heartbeatFrequencyMS,\n      minHeartbeatFrequencyMS: minHeartbeatFrequencyMS,\n      immediate: true\n    });\n  }\n\n  requestCheck(): void {\n    if (INVALID_REQUEST_CHECK_STATES.has(this.s.state)) {\n      return;\n    }\n\n    this[kMonitorId]?.wake();\n  }\n\n  reset(): void {\n    const topologyVersion = this[kServer].description.topologyVersion;\n    if (isInCloseState(this) || topologyVersion == null) {\n      return;\n    }\n\n    stateTransition(this, STATE_CLOSING);\n    resetMonitorState(this);\n\n    // restart monitor\n    stateTransition(this, STATE_IDLE);\n\n    // restart monitoring\n    const heartbeatFrequencyMS = this.options.heartbeatFrequencyMS;\n    const minHeartbeatFrequencyMS = this.options.minHeartbeatFrequencyMS;\n    this[kMonitorId] = new MonitorInterval(monitorServer(this), {\n      heartbeatFrequencyMS: heartbeatFrequencyMS,\n      minHeartbeatFrequencyMS: minHeartbeatFrequencyMS\n    });\n  }\n\n  close(): void {\n    if (isInCloseState(this)) {\n      return;\n    }\n\n    stateTransition(this, STATE_CLOSING);\n    resetMonitorState(this);\n\n    // close monitor\n    this.emit('close');\n    stateTransition(this, STATE_CLOSED);\n  }\n}\n\nfunction resetMonitorState(monitor: Monitor) {\n  monitor[kMonitorId]?.stop();\n  monitor[kMonitorId] = undefined;\n\n  monitor.rttPinger?.close();\n  monitor.rttPinger = undefined;\n\n  monitor[kCancellationToken].emit('cancel');\n\n  monitor[kConnection]?.destroy({ force: true });\n  monitor[kConnection] = undefined;\n}\n\nfunction useStreamingProtocol(monitor: Monitor, topologyVersion: TopologyVersion | null): boolean {\n  // If we have no topology version we always poll no matter\n  // what the user provided, since the server does not support\n  // the streaming protocol.\n  if (topologyVersion == null) return false;\n\n  const serverMonitoringMode = monitor.options.serverMonitoringMode;\n  if (serverMonitoringMode === ServerMonitoringMode.poll) return false;\n  if (serverMonitoringMode === ServerMonitoringMode.stream) return true;\n\n  // If we are in auto mode, we need to figure out if we're in a FaaS\n  // environment or not and choose the appropriate mode.\n  if (monitor.isRunningInFaasEnv) return false;\n  return true;\n}\n\nfunction checkServer(monitor: Monitor, callback: Callback<Document | null>) {\n  let start = now();\n  const topologyVersion = monitor[kServer].description.topologyVersion;\n  const isAwaitable = useStreamingProtocol(monitor, topologyVersion);\n  monitor.emit(\n    Server.SERVER_HEARTBEAT_STARTED,\n    new ServerHeartbeatStartedEvent(monitor.address, isAwaitable)\n  );\n\n  function failureHandler(err: Error, awaited: boolean) {\n    monitor[kConnection]?.destroy({ force: true });\n    monitor[kConnection] = undefined;\n\n    monitor.emit(\n      Server.SERVER_HEARTBEAT_FAILED,\n      new ServerHeartbeatFailedEvent(monitor.address, calculateDurationInMs(start), err, awaited)\n    );\n\n    const error = !(err instanceof MongoError)\n      ? new MongoError(MongoError.buildErrorMessage(err), { cause: err })\n      : err;\n    error.addErrorLabel(MongoErrorLabel.ResetPool);\n    if (error instanceof MongoNetworkTimeoutError) {\n      error.addErrorLabel(MongoErrorLabel.InterruptInUseConnections);\n    }\n\n    monitor.emit('resetServer', error);\n    callback(err);\n  }\n\n  const connection = monitor[kConnection];\n  if (connection && !connection.closed) {\n    const { serverApi, helloOk } = connection;\n    const connectTimeoutMS = monitor.options.connectTimeoutMS;\n    const maxAwaitTimeMS = monitor.options.heartbeatFrequencyMS;\n\n    const cmd = {\n      [serverApi?.version || helloOk ? 'hello' : LEGACY_HELLO_COMMAND]: 1,\n      ...(isAwaitable && topologyVersion\n        ? { maxAwaitTimeMS, topologyVersion: makeTopologyVersion(topologyVersion) }\n        : {})\n    };\n\n    const options = isAwaitable\n      ? {\n          socketTimeoutMS: connectTimeoutMS ? connectTimeoutMS + maxAwaitTimeMS : 0,\n          exhaustAllowed: true\n        }\n      : { socketTimeoutMS: connectTimeoutMS };\n\n    if (isAwaitable && monitor.rttPinger == null) {\n      monitor.rttPinger = new RTTPinger(\n        monitor[kCancellationToken],\n        Object.assign(\n          { heartbeatFrequencyMS: monitor.options.heartbeatFrequencyMS },\n          monitor.connectOptions\n        )\n      );\n    }\n\n    connection.command(ns('admin.$cmd'), cmd, options, (err, hello) => {\n      if (err) {\n        return failureHandler(err, isAwaitable);\n      }\n\n      if (!('isWritablePrimary' in hello)) {\n        // Provide hello-style response document.\n        hello.isWritablePrimary = hello[LEGACY_HELLO_COMMAND];\n      }\n\n      const duration =\n        isAwaitable && monitor.rttPinger\n          ? monitor.rttPinger.roundTripTime\n          : calculateDurationInMs(start);\n\n      monitor.emit(\n        Server.SERVER_HEARTBEAT_SUCCEEDED,\n        new ServerHeartbeatSucceededEvent(monitor.address, duration, hello, isAwaitable)\n      );\n\n      // If we are using the streaming protocol then we immediately issue another 'started'\n      // event, otherwise the \"check\" is complete and return to the main monitor loop.\n      if (isAwaitable) {\n        monitor.emit(\n          Server.SERVER_HEARTBEAT_STARTED,\n          new ServerHeartbeatStartedEvent(monitor.address, true)\n        );\n        start = now();\n      } else {\n        monitor.rttPinger?.close();\n        monitor.rttPinger = undefined;\n\n        callback(undefined, hello);\n      }\n    });\n\n    return;\n  }\n\n  // connecting does an implicit `hello`\n  connect(monitor.connectOptions, (err, conn) => {\n    if (err) {\n      monitor[kConnection] = undefined;\n\n      failureHandler(err, false);\n      return;\n    }\n\n    if (conn) {\n      // Tell the connection that we are using the streaming protocol so that the\n      // connection's message stream will only read the last hello on the buffer.\n      conn.isMonitoringConnection = true;\n\n      if (isInCloseState(monitor)) {\n        conn.destroy({ force: true });\n        return;\n      }\n\n      monitor[kConnection] = conn;\n      monitor.emit(\n        Server.SERVER_HEARTBEAT_SUCCEEDED,\n        new ServerHeartbeatSucceededEvent(\n          monitor.address,\n          calculateDurationInMs(start),\n          conn.hello,\n          useStreamingProtocol(monitor, conn.hello?.topologyVersion)\n        )\n      );\n\n      callback(undefined, conn.hello);\n    }\n  });\n}\n\nfunction monitorServer(monitor: Monitor) {\n  return (callback: Callback) => {\n    if (monitor.s.state === STATE_MONITORING) {\n      process.nextTick(callback);\n      return;\n    }\n    stateTransition(monitor, STATE_MONITORING);\n    function done() {\n      if (!isInCloseState(monitor)) {\n        stateTransition(monitor, STATE_IDLE);\n      }\n\n      callback();\n    }\n\n    checkServer(monitor, (err, hello) => {\n      if (err) {\n        // otherwise an error occurred on initial discovery, also bail\n        if (monitor[kServer].description.type === ServerType.Unknown) {\n          return done();\n        }\n      }\n\n      // if the check indicates streaming is supported, immediately reschedule monitoring\n      if (useStreamingProtocol(monitor, hello?.topologyVersion)) {\n        setTimeout(() => {\n          if (!isInCloseState(monitor)) {\n            monitor[kMonitorId]?.wake();\n          }\n        }, 0);\n      }\n\n      done();\n    });\n  };\n}\n\nfunction makeTopologyVersion(tv: TopologyVersion) {\n  return {\n    processId: tv.processId,\n    // tests mock counter as just number, but in a real situation counter should always be a Long\n    // TODO(NODE-2674): Preserve int64 sent from MongoDB\n    counter: Long.isLong(tv.counter) ? tv.counter : Long.fromNumber(tv.counter)\n  };\n}\n\n/** @internal */\nexport interface RTTPingerOptions extends ConnectionOptions {\n  heartbeatFrequencyMS: number;\n}\n\n/** @internal */\nexport class RTTPinger {\n  connection?: Connection;\n  /** @internal */\n  [kCancellationToken]: CancellationToken;\n  /** @internal */\n  [kRoundTripTime]: number;\n  /** @internal */\n  [kMonitorId]: NodeJS.Timeout;\n  closed: boolean;\n\n  constructor(cancellationToken: CancellationToken, options: RTTPingerOptions) {\n    this.connection = undefined;\n    this[kCancellationToken] = cancellationToken;\n    this[kRoundTripTime] = 0;\n    this.closed = false;\n\n    const heartbeatFrequencyMS = options.heartbeatFrequencyMS;\n    this[kMonitorId] = setTimeout(() => measureRoundTripTime(this, options), heartbeatFrequencyMS);\n  }\n\n  get roundTripTime(): number {\n    return this[kRoundTripTime];\n  }\n\n  close(): void {\n    this.closed = true;\n    clearTimeout(this[kMonitorId]);\n\n    this.connection?.destroy({ force: true });\n    this.connection = undefined;\n  }\n}\n\nfunction measureRoundTripTime(rttPinger: RTTPinger, options: RTTPingerOptions) {\n  const start = now();\n  options.cancellationToken = rttPinger[kCancellationToken];\n  const heartbeatFrequencyMS = options.heartbeatFrequencyMS;\n\n  if (rttPinger.closed) {\n    return;\n  }\n\n  function measureAndReschedule(conn?: Connection) {\n    if (rttPinger.closed) {\n      conn?.destroy({ force: true });\n      return;\n    }\n\n    if (rttPinger.connection == null) {\n      rttPinger.connection = conn;\n    }\n\n    rttPinger[kRoundTripTime] = calculateDurationInMs(start);\n    rttPinger[kMonitorId] = setTimeout(\n      () => measureRoundTripTime(rttPinger, options),\n      heartbeatFrequencyMS\n    );\n  }\n\n  const connection = rttPinger.connection;\n  if (connection == null) {\n    connect(options, (err, conn) => {\n      if (err) {\n        rttPinger.connection = undefined;\n        rttPinger[kRoundTripTime] = 0;\n        return;\n      }\n\n      measureAndReschedule(conn);\n    });\n\n    return;\n  }\n\n  const commandName =\n    connection.serverApi?.version || connection.helloOk ? 'hello' : LEGACY_HELLO_COMMAND;\n  connection.commandAsync(ns('admin.$cmd'), { [commandName]: 1 }, undefined).then(\n    () => measureAndReschedule(),\n    () => {\n      rttPinger.connection?.destroy({ force: true });\n      rttPinger.connection = undefined;\n      rttPinger[kRoundTripTime] = 0;\n      return;\n    }\n  );\n}\n\n/**\n * @internal\n */\nexport interface MonitorIntervalOptions {\n  /** The interval to execute a method on */\n  heartbeatFrequencyMS: number;\n  /** A minimum interval that must elapse before the method is called */\n  minHeartbeatFrequencyMS: number;\n  /** Whether the method should be called immediately when the interval is started  */\n  immediate: boolean;\n}\n\n/**\n * @internal\n */\nexport class MonitorInterval {\n  fn: (callback: Callback) => void;\n  timerId: NodeJS.Timeout | undefined;\n  lastExecutionEnded: number;\n  isExpeditedCallToFnScheduled = false;\n  stopped = false;\n  isExecutionInProgress = false;\n  hasExecutedOnce = false;\n\n  heartbeatFrequencyMS: number;\n  minHeartbeatFrequencyMS: number;\n\n  constructor(fn: (callback: Callback) => void, options: Partial<MonitorIntervalOptions> = {}) {\n    this.fn = fn;\n    this.lastExecutionEnded = -Infinity;\n\n    this.heartbeatFrequencyMS = options.heartbeatFrequencyMS ?? 1000;\n    this.minHeartbeatFrequencyMS = options.minHeartbeatFrequencyMS ?? 500;\n\n    if (options.immediate) {\n      this._executeAndReschedule();\n    } else {\n      this._reschedule(undefined);\n    }\n  }\n\n  wake() {\n    const currentTime = now();\n    const timeSinceLastCall = currentTime - this.lastExecutionEnded;\n\n    // TODO(NODE-4674): Add error handling and logging to the monitor\n    if (timeSinceLastCall < 0) {\n      return this._executeAndReschedule();\n    }\n\n    if (this.isExecutionInProgress) {\n      return;\n    }\n\n    // debounce multiple calls to wake within the `minInterval`\n    if (this.isExpeditedCallToFnScheduled) {\n      return;\n    }\n\n    // reschedule a call as soon as possible, ensuring the call never happens\n    // faster than the `minInterval`\n    if (timeSinceLastCall < this.minHeartbeatFrequencyMS) {\n      this.isExpeditedCallToFnScheduled = true;\n      this._reschedule(this.minHeartbeatFrequencyMS - timeSinceLastCall);\n      return;\n    }\n\n    this._executeAndReschedule();\n  }\n\n  stop() {\n    this.stopped = true;\n    if (this.timerId) {\n      clearTimeout(this.timerId);\n      this.timerId = undefined;\n    }\n\n    this.lastExecutionEnded = -Infinity;\n    this.isExpeditedCallToFnScheduled = false;\n  }\n\n  toString() {\n    return JSON.stringify(this);\n  }\n\n  toJSON() {\n    const currentTime = now();\n    const timeSinceLastCall = currentTime - this.lastExecutionEnded;\n    return {\n      timerId: this.timerId != null ? 'set' : 'cleared',\n      lastCallTime: this.lastExecutionEnded,\n      isExpeditedCheckScheduled: this.isExpeditedCallToFnScheduled,\n      stopped: this.stopped,\n      heartbeatFrequencyMS: this.heartbeatFrequencyMS,\n      minHeartbeatFrequencyMS: this.minHeartbeatFrequencyMS,\n      currentTime,\n      timeSinceLastCall\n    };\n  }\n\n  private _reschedule(ms?: number) {\n    if (this.stopped) return;\n    if (this.timerId) {\n      clearTimeout(this.timerId);\n    }\n\n    this.timerId = setTimeout(this._executeAndReschedule, ms || this.heartbeatFrequencyMS);\n  }\n\n  private _executeAndReschedule = () => {\n    if (this.stopped) return;\n    if (this.timerId) {\n      clearTimeout(this.timerId);\n    }\n\n    this.isExpeditedCallToFnScheduled = false;\n    this.isExecutionInProgress = true;\n\n    this.fn(() => {\n      this.lastExecutionEnded = now();\n      this.isExecutionInProgress = false;\n      this._reschedule(this.heartbeatFrequencyMS);\n    });\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}