{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MongoClient = exports.ServerApiVersion = void 0;\nconst fs_1 = require(\"fs\");\nconst util_1 = require(\"util\");\nconst bson_1 = require(\"./bson\");\nconst change_stream_1 = require(\"./change_stream\");\nconst mongo_credentials_1 = require(\"./cmap/auth/mongo_credentials\");\nconst providers_1 = require(\"./cmap/auth/providers\");\nconst connection_string_1 = require(\"./connection_string\");\nconst constants_1 = require(\"./constants\");\nconst db_1 = require(\"./db\");\nconst error_1 = require(\"./error\");\nconst mongo_logger_1 = require(\"./mongo_logger\");\nconst mongo_types_1 = require(\"./mongo_types\");\nconst execute_operation_1 = require(\"./operations/execute_operation\");\nconst run_command_1 = require(\"./operations/run_command\");\nconst read_preference_1 = require(\"./read_preference\");\nconst server_selection_1 = require(\"./sdam/server_selection\");\nconst topology_1 = require(\"./sdam/topology\");\nconst sessions_1 = require(\"./sessions\");\nconst utils_1 = require(\"./utils\");\n/** @public */\nexports.ServerApiVersion = Object.freeze({\n  v1: '1'\n});\n/** @internal */\nconst kOptions = Symbol('options');\n/**\n * The **MongoClient** class is a class that allows for making Connections to MongoDB.\n * @public\n *\n * @remarks\n * The programmatically provided options take precedence over the URI options.\n *\n * @example\n * ```ts\n * import { MongoClient } from 'mongodb';\n *\n * // Enable command monitoring for debugging\n * const client = new MongoClient('mongodb://localhost:27017', { monitorCommands: true });\n *\n * client.on('commandStarted', started => console.log(started));\n * client.db().collection('pets');\n * await client.insertOne({ name: 'spot', kind: 'dog' });\n * ```\n */\nclass MongoClient extends mongo_types_1.TypedEventEmitter {\n  constructor(url, options) {\n    super();\n    this[kOptions] = (0, connection_string_1.parseOptions)(url, this, options);\n    this.mongoLogger = new mongo_logger_1.MongoLogger(this[kOptions].mongoLoggerOptions);\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const client = this;\n    // The internal state\n    this.s = {\n      url,\n      bsonOptions: (0, bson_1.resolveBSONOptions)(this[kOptions]),\n      namespace: (0, utils_1.ns)('admin'),\n      hasBeenClosed: false,\n      sessionPool: new sessions_1.ServerSessionPool(this),\n      activeSessions: new Set(),\n      get options() {\n        return client[kOptions];\n      },\n      get readConcern() {\n        return client[kOptions].readConcern;\n      },\n      get writeConcern() {\n        return client[kOptions].writeConcern;\n      },\n      get readPreference() {\n        return client[kOptions].readPreference;\n      },\n      get isMongoClient() {\n        return true;\n      }\n    };\n    this.checkForNonGenuineHosts();\n  }\n  /** @internal */\n  checkForNonGenuineHosts() {\n    const documentDBHostnames = this[kOptions].hosts.filter(hostAddress => (0, utils_1.isHostMatch)(utils_1.DOCUMENT_DB_CHECK, hostAddress.host));\n    const srvHostIsDocumentDB = (0, utils_1.isHostMatch)(utils_1.DOCUMENT_DB_CHECK, this[kOptions].srvHost);\n    const cosmosDBHostnames = this[kOptions].hosts.filter(hostAddress => (0, utils_1.isHostMatch)(utils_1.COSMOS_DB_CHECK, hostAddress.host));\n    const srvHostIsCosmosDB = (0, utils_1.isHostMatch)(utils_1.COSMOS_DB_CHECK, this[kOptions].srvHost);\n    if (documentDBHostnames.length !== 0 || srvHostIsDocumentDB) {\n      this.mongoLogger.info('client', utils_1.DOCUMENT_DB_MSG);\n    } else if (cosmosDBHostnames.length !== 0 || srvHostIsCosmosDB) {\n      this.mongoLogger.info('client', utils_1.COSMOS_DB_MSG);\n    }\n  }\n  /** @see MongoOptions */\n  get options() {\n    return Object.freeze({\n      ...this[kOptions]\n    });\n  }\n  get serverApi() {\n    return this[kOptions].serverApi && Object.freeze({\n      ...this[kOptions].serverApi\n    });\n  }\n  /**\n   * Intended for APM use only\n   * @internal\n   */\n  get monitorCommands() {\n    return this[kOptions].monitorCommands;\n  }\n  set monitorCommands(value) {\n    this[kOptions].monitorCommands = value;\n  }\n  /** @internal */\n  get autoEncrypter() {\n    return this[kOptions].autoEncrypter;\n  }\n  get readConcern() {\n    return this.s.readConcern;\n  }\n  get writeConcern() {\n    return this.s.writeConcern;\n  }\n  get readPreference() {\n    return this.s.readPreference;\n  }\n  get bsonOptions() {\n    return this.s.bsonOptions;\n  }\n  /**\n   * Connect to MongoDB using a url\n   *\n   * @see docs.mongodb.org/manual/reference/connection-string/\n   */\n  async connect() {\n    if (this.connectionLock) {\n      return this.connectionLock;\n    }\n    try {\n      this.connectionLock = this._connect();\n      await this.connectionLock;\n    } finally {\n      // release\n      this.connectionLock = undefined;\n    }\n    return this;\n  }\n  /**\n   * Create a topology to open the connection, must be locked to avoid topology leaks in concurrency scenario.\n   * Locking is enforced by the connect method.\n   *\n   * @internal\n   */\n  async _connect() {\n    if (this.topology && this.topology.isConnected()) {\n      return this;\n    }\n    const options = this[kOptions];\n    if (options.tls) {\n      if (typeof options.tlsCAFile === 'string') {\n        options.ca ??= await fs_1.promises.readFile(options.tlsCAFile);\n      }\n      if (typeof options.tlsCRLFile === 'string') {\n        options.crl ??= await fs_1.promises.readFile(options.tlsCRLFile);\n      }\n      if (typeof options.tlsCertificateKeyFile === 'string') {\n        if (!options.key || !options.cert) {\n          const contents = await fs_1.promises.readFile(options.tlsCertificateKeyFile);\n          options.key ??= contents;\n          options.cert ??= contents;\n        }\n      }\n    }\n    if (typeof options.srvHost === 'string') {\n      const hosts = await (0, connection_string_1.resolveSRVRecord)(options);\n      for (const [index, host] of hosts.entries()) {\n        options.hosts[index] = host;\n      }\n    }\n    // It is important to perform validation of hosts AFTER SRV resolution, to check the real hostname,\n    // but BEFORE we even attempt connecting with a potentially not allowed hostname\n    if (options.credentials?.mechanism === providers_1.AuthMechanism.MONGODB_OIDC) {\n      const allowedHosts = options.credentials?.mechanismProperties?.ALLOWED_HOSTS || mongo_credentials_1.DEFAULT_ALLOWED_HOSTS;\n      const isServiceAuth = !!options.credentials?.mechanismProperties?.PROVIDER_NAME;\n      if (!isServiceAuth) {\n        for (const host of options.hosts) {\n          if (!(0, utils_1.hostMatchesWildcards)(host.toHostPort().host, allowedHosts)) {\n            throw new error_1.MongoInvalidArgumentError(`Host '${host}' is not valid for OIDC authentication with ALLOWED_HOSTS of '${allowedHosts.join(',')}'`);\n          }\n        }\n      }\n    }\n    this.topology = new topology_1.Topology(this, options.hosts, options);\n    // Events can be emitted before initialization is complete so we have to\n    // save the reference to the topology on the client ASAP if the event handlers need to access it\n    this.topology.once(topology_1.Topology.OPEN, () => this.emit('open', this));\n    for (const event of constants_1.MONGO_CLIENT_EVENTS) {\n      this.topology.on(event, (...args) => this.emit(event, ...args));\n    }\n    const topologyConnect = async () => {\n      try {\n        await (0, util_1.promisify)(callback => this.topology?.connect(options, callback))();\n      } catch (error) {\n        this.topology?.close({\n          force: true\n        });\n        throw error;\n      }\n    };\n    if (this.autoEncrypter) {\n      await this.autoEncrypter?.init();\n      await topologyConnect();\n      await options.encrypter.connectInternalClient();\n    } else {\n      await topologyConnect();\n    }\n    return this;\n  }\n  /**\n   * Close the client and its underlying connections\n   *\n   * @param force - Force close, emitting no events\n   */\n  async close(force = false) {\n    // There's no way to set hasBeenClosed back to false\n    Object.defineProperty(this.s, 'hasBeenClosed', {\n      value: true,\n      enumerable: true,\n      configurable: false,\n      writable: false\n    });\n    const activeSessionEnds = Array.from(this.s.activeSessions, session => session.endSession());\n    this.s.activeSessions.clear();\n    await Promise.all(activeSessionEnds);\n    if (this.topology == null) {\n      return;\n    }\n    // If we would attempt to select a server and get nothing back we short circuit\n    // to avoid the server selection timeout.\n    const selector = (0, server_selection_1.readPreferenceServerSelector)(read_preference_1.ReadPreference.primaryPreferred);\n    const topologyDescription = this.topology.description;\n    const serverDescriptions = Array.from(topologyDescription.servers.values());\n    const servers = selector(topologyDescription, serverDescriptions);\n    if (servers.length !== 0) {\n      const endSessions = Array.from(this.s.sessionPool.sessions, ({\n        id\n      }) => id);\n      if (endSessions.length !== 0) {\n        await (0, execute_operation_1.executeOperation)(this, new run_command_1.RunAdminCommandOperation({\n          endSessions\n        }, {\n          readPreference: read_preference_1.ReadPreference.primaryPreferred,\n          noResponse: true\n        })).catch(() => null); // outcome does not matter;\n      }\n    }\n    // clear out references to old topology\n    const topology = this.topology;\n    this.topology = undefined;\n    await new Promise((resolve, reject) => {\n      topology.close({\n        force\n      }, error => {\n        if (error) return reject(error);\n        const {\n          encrypter\n        } = this[kOptions];\n        if (encrypter) {\n          return encrypter.closeCallback(this, force, error => {\n            if (error) return reject(error);\n            resolve();\n          });\n        }\n        resolve();\n      });\n    });\n  }\n  /**\n   * Create a new Db instance sharing the current socket connections.\n   *\n   * @param dbName - The name of the database we want to use. If not provided, use database name from connection string.\n   * @param options - Optional settings for Db construction\n   */\n  db(dbName, options) {\n    options = options ?? {};\n    // Default to db from connection string if not provided\n    if (!dbName) {\n      dbName = this.options.dbName;\n    }\n    // Copy the options and add out internal override of the not shared flag\n    const finalOptions = Object.assign({}, this[kOptions], options);\n    // Return the db object\n    const db = new db_1.Db(this, dbName, finalOptions);\n    // Return the database\n    return db;\n  }\n  /**\n   * Connect to MongoDB using a url\n   *\n   * @remarks\n   * The programmatically provided options take precedence over the URI options.\n   *\n   * @see https://www.mongodb.com/docs/manual/reference/connection-string/\n   */\n  static async connect(url, options) {\n    const client = new this(url, options);\n    return client.connect();\n  }\n  /**\n   * Creates a new ClientSession. When using the returned session in an operation\n   * a corresponding ServerSession will be created.\n   *\n   * @remarks\n   * A ClientSession instance may only be passed to operations being performed on the same\n   * MongoClient it was started from.\n   */\n  startSession(options) {\n    const session = new sessions_1.ClientSession(this, this.s.sessionPool, {\n      explicit: true,\n      ...options\n    }, this[kOptions]);\n    this.s.activeSessions.add(session);\n    session.once('ended', () => {\n      this.s.activeSessions.delete(session);\n    });\n    return session;\n  }\n  async withSession(optionsOrExecutor, executor) {\n    const options = {\n      // Always define an owner\n      owner: Symbol(),\n      // If it's an object inherit the options\n      ...(typeof optionsOrExecutor === 'object' ? optionsOrExecutor : {})\n    };\n    const withSessionCallback = typeof optionsOrExecutor === 'function' ? optionsOrExecutor : executor;\n    if (withSessionCallback == null) {\n      throw new error_1.MongoInvalidArgumentError('Missing required callback parameter');\n    }\n    const session = this.startSession(options);\n    try {\n      return await withSessionCallback(session);\n    } finally {\n      try {\n        await session.endSession();\n      } catch {\n        // We are not concerned with errors from endSession()\n      }\n    }\n  }\n  /**\n   * Create a new Change Stream, watching for new changes (insertions, updates,\n   * replacements, deletions, and invalidations) in this cluster. Will ignore all\n   * changes to system collections, as well as the local, admin, and config databases.\n   *\n   * @remarks\n   * watch() accepts two generic arguments for distinct use cases:\n   * - The first is to provide the schema that may be defined for all the data within the current cluster\n   * - The second is to override the shape of the change stream document entirely, if it is not provided the type will default to ChangeStreamDocument of the first argument\n   *\n   * @param pipeline - An array of {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents. This allows for filtering (using $match) and manipulating the change stream documents.\n   * @param options - Optional settings for the command\n   * @typeParam TSchema - Type of the data being detected by the change stream\n   * @typeParam TChange - Type of the whole change stream document emitted\n   */\n  watch(pipeline = [], options = {}) {\n    // Allow optionally not specifying a pipeline\n    if (!Array.isArray(pipeline)) {\n      options = pipeline;\n      pipeline = [];\n    }\n    return new change_stream_1.ChangeStream(this, pipeline, (0, utils_1.resolveOptions)(this, options));\n  }\n}\nexports.MongoClient = MongoClient;","map":{"version":3,"names":["fs_1","require","util_1","bson_1","change_stream_1","mongo_credentials_1","providers_1","connection_string_1","constants_1","db_1","error_1","mongo_logger_1","mongo_types_1","execute_operation_1","run_command_1","read_preference_1","server_selection_1","topology_1","sessions_1","utils_1","exports","ServerApiVersion","Object","freeze","v1","kOptions","Symbol","MongoClient","TypedEventEmitter","constructor","url","options","parseOptions","mongoLogger","MongoLogger","mongoLoggerOptions","client","s","bsonOptions","resolveBSONOptions","namespace","ns","hasBeenClosed","sessionPool","ServerSessionPool","activeSessions","Set","readConcern","writeConcern","readPreference","isMongoClient","checkForNonGenuineHosts","documentDBHostnames","hosts","filter","hostAddress","isHostMatch","DOCUMENT_DB_CHECK","host","srvHostIsDocumentDB","srvHost","cosmosDBHostnames","COSMOS_DB_CHECK","srvHostIsCosmosDB","length","info","DOCUMENT_DB_MSG","COSMOS_DB_MSG","serverApi","monitorCommands","value","autoEncrypter","connect","connectionLock","_connect","undefined","topology","isConnected","tls","tlsCAFile","ca","promises","readFile","tlsCRLFile","crl","tlsCertificateKeyFile","key","cert","contents","resolveSRVRecord","index","entries","credentials","mechanism","AuthMechanism","MONGODB_OIDC","allowedHosts","mechanismProperties","ALLOWED_HOSTS","DEFAULT_ALLOWED_HOSTS","isServiceAuth","PROVIDER_NAME","hostMatchesWildcards","toHostPort","MongoInvalidArgumentError","join","Topology","once","OPEN","emit","event","MONGO_CLIENT_EVENTS","on","args","topologyConnect","promisify","callback","error","close","force","init","encrypter","connectInternalClient","defineProperty","enumerable","configurable","writable","activeSessionEnds","Array","from","session","endSession","clear","Promise","all","selector","readPreferenceServerSelector","ReadPreference","primaryPreferred","topologyDescription","description","serverDescriptions","servers","values","endSessions","sessions","id","executeOperation","RunAdminCommandOperation","noResponse","catch","resolve","reject","closeCallback","db","dbName","finalOptions","assign","Db","startSession","ClientSession","explicit","add","delete","withSession","optionsOrExecutor","executor","owner","withSessionCallback","watch","pipeline","isArray","ChangeStream","resolveOptions"],"sources":["../src/mongo_client.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}